{"text_id": "8000", "text": "docstring: The request for deleting an application."}
{"text_id": "8001", "text": "docstring: Save image label to file\nSave adjusted label to file"}
{"text_id": "8002", "text": "docstring: listen a local port for file"}
{"text_id": "8003", "text": "docstring: Define a TV service that can play/pause/stop without generate remote events."}
{"text_id": "8004", "text": "docstring: Flattens a series of lists which contain which segments have\nbeen merged in each iteration.\n\nParameters\n\nmerge_history : list of list of list of int\nThe merge history\n\nReturns\n\nmerged_segments : list of list of int"}
{"text_id": "8005", "text": "docstring: Accepts data for writing to JSON file"}
{"text_id": "8006", "text": "docstring: Parse a dictionary of structure information to an ase.Atoms object."}
{"text_id": "8007", "text": "docstring: Wait for a tile to compute.\nIf a computation is already running for this tile, it will be reused.\nOtherwise, a new computation is started."}
{"text_id": "8008", "text": "docstring: Item too Big\nRotation = False"}
{"text_id": "8009", "text": "docstring: Decorator for ignoring exception from a function\ne.g."}
{"text_id": "8010", "text": "docstring: Generates fake logit values by sampling from the standard normal"}
{"text_id": "8011", "text": "docstring: Serialize the module-level code as a function so the debugger will know\nit's a \"relevant frame\" and it will know where to set the breakpoint\nfor 'break modulename'."}
{"text_id": "8012", "text": "docstring: Return the dimensionality of graph labels."}
{"text_id": "8013", "text": "docstring: Performs a forward pass on a torch tensor of a line with shape (C, H, W)\nand returns a list of tuples (class, start, end, max). Max is the\nmaximum value of the softmax layer in the region."}
{"text_id": "8014", "text": "docstring: Validates a TCP checksum according to RFC 1071.\nTakes length, source address and destination address for computing\nthe IP pseudo-header. The data parameter contains the entire TCP\npacket."}
{"text_id": "8015", "text": "docstring: Get Biography answers from API by list of IDs or one ID."}
{"text_id": "8016", "text": "docstring: Over-write default _bundle() method to separate the DetectorContainer\ninto its own HDU"}
{"text_id": "8017", "text": "docstring: Main flow for checking recent trades and posting them to Twitter. Runs on schedule in clock.py"}
{"text_id": "8018", "text": "docstring: Asserts that a value is true"}
{"text_id": "8019", "text": "docstring: Mount the partition with the given mount_point."}
{"text_id": "8020", "text": "docstring: Launch a \"REPL\" against AWS Lambda to inspect their runtime."}
{"text_id": "8021", "text": "docstring: Return the given time series after seasonal adjustment ( Y(t) - S(t) )\nParameters\n\nseries : ndarray\nThe series to be seasonally decomposed\nperiodicity : int\nThe periodicity of the sequence.\nseasonality : int, default = 1\nLength of the seasonal smoother. Must be an odd integer, and should normally be >= 7\n\nReturns\n\nndarray\nThe seasonally decomposed series"}
{"text_id": "8022", "text": "docstring: main function to create a streamlit GUI"}
{"text_id": "8023", "text": "docstring: The summary table lists each sample on a new line and the average\nresult for each test that is specified."}
{"text_id": "8024", "text": "docstring: Return the grid of external input vectors."}
{"text_id": "8025", "text": "docstring: get user e-mail adresse from credential/user tags"}
{"text_id": "8026", "text": "docstring: Store names of resources listed in  cache."}
{"text_id": "8027", "text": "docstring: Yields `num` items from the cartesian product of items in a random order."}
{"text_id": "8028", "text": "docstring: Sets all Parameters' gradient buffer to 0."}
{"text_id": "8029", "text": "docstring: Tracks the number of consecutive correct & incorrect answers."}
{"text_id": "8030", "text": "docstring: Called by a session event, updates the model based documents."}
{"text_id": "8031", "text": "docstring: returns the basename, epoch, version and release lvl for an rpm file\nIf form is set to 'list', the components are returned as lists.\nIf filename is a string, the components are returned as strings.\nif form is set to 'dict', a dictionary is returned. The keys are the\nbasenames, the values are a dictionary with keys: ep, ver, rel."}
{"text_id": "8032", "text": "docstring: Sets the anomalyitem of this Anomaly."}
{"text_id": "8033", "text": "docstring: Check if the simple tag exist as a filter in"}
{"text_id": "8034", "text": "docstring: Create a new config file at this location"}
{"text_id": "8035", "text": "docstring: Function to read the UV data from the spectrometer\nStores the normalized absorbance and flourescence data into Spectrometer Object"}
{"text_id": "8036", "text": "docstring: Check whether event_ndims is at least min_event_ndims."}
{"text_id": "8037", "text": "docstring: Compute two affine transforms that rectify two images over a given AOI."}
{"text_id": "8038", "text": "docstring: Adds packageids from each catalogitem to a dictionary"}
{"text_id": "8039", "text": "docstring: Accepts a string with a valid IP address"}
{"text_id": "8040", "text": "docstring: Get duration from the states attributes."}
{"text_id": "8041", "text": "docstring: Deletes this message from the appropriate mailbox. If it does not exist in the mailbox,\na ValueError is raised."}
{"text_id": "8042", "text": "docstring: If the required libraries for geospatial support are installed, and if a\ngeospatial column is present in the dataframe, convert it to a\nGeoDataFrame."}
{"text_id": "8043", "text": "docstring: Delete a specified user.\nParameters\n\napp : aiohttp.web.Application\nThe aiohttp application instance\nuid : str, default=None\nThe uid of the user to be deleted. If None will use username\nusername : str, default=None\nThe username of the user to be deleted if no uid is specified.\nIf also None won't delete anything.\nReturns\n\ndeleted : bool\nTrue if the user was deleted, False otherwise"}
{"text_id": "8044", "text": "docstring: index webpage displays cool visuals and receives user input text for model\nshow some graph on the messages stored and classified\ninput form for classifying a new message"}
{"text_id": "8045", "text": "docstring: Non-dynamically computes the status of each edge in the graph.\nThis is can be used to verify the dynamic computations and update when\nthe dynamic state is lost."}
{"text_id": "8046", "text": "docstring: Convert the paging list to pyarrow ChunkedArray."}
{"text_id": "8047", "text": "docstring: Connects two ports together. The coupling is to begin at p1 and\nto end at p2."}
{"text_id": "8048", "text": "docstring: Check if the cryptography library is present, and if it is recent enough\nfor most usages in scapy (v1.7 or later)."}
{"text_id": "8049", "text": "docstring: The fuction translate french into english"}
{"text_id": "8050", "text": "docstring: Checks if a line intersects any of the sides in the self.polygons polygons."}
{"text_id": "8051", "text": "docstring: Start the Java Beam job server that connects to the flink session cluster. User needs to provide the\njob name that started the Flink session and optionally the worker parallelism."}
{"text_id": "8052", "text": "docstring: Displays the weather at a particular location"}
{"text_id": "8053", "text": "docstring: Forward method of metric that handles masking of values.\nDo not override this method but :py:meth:`~loss` instead"}
{"text_id": "8054", "text": "docstring: Allows creating a new user in nebulon ON"}
{"text_id": "8055", "text": "docstring: Retrieves a list of only high vulnerability occurrences associated\nwith a resource."}
{"text_id": "8056", "text": "docstring: Run an exhaustive search on all consecutive room"}
{"text_id": "8057", "text": "docstring: Given a refresh token, generate a new access token if the refresh token is valid\nand the previous access token allows for a refresh"}
{"text_id": "8058", "text": "docstring: For .demote command, demotes the replied/tagged person"}
{"text_id": "8059", "text": "docstring: Lists log entries.  Use this method to retrieve log entries from Cloud\nLogging.  For ways to export log entries, see\n`Exporting Logs `_."}
{"text_id": "8060", "text": "docstring: listen room_leave event for puppet\nroom, leavers, remover, date\n\nthis is friendly for code typing"}
{"text_id": "8061", "text": "docstring: Click an element based on xpath"}
{"text_id": "8062", "text": "docstring: Performs the forward pass for (inverted) dropout.\n\nArray of the same shape as x.\ncache: tuple (dropout_param, mask). In training mode, mask is the dropout\nmask that was used to multiply the input; in test mode, mask is None."}
{"text_id": "8063", "text": "docstring: Return a list of business Information based on queried city."}
{"text_id": "8064", "text": "docstring: Data caches save time by re-using tensors for nodes and edges you have aleady calculated.\nThis usually gives me a 5-10x speedup but your mileage may vary.\n\nParameters\n\nWrappedPose\nEach pose needs a different cache. Please give us the pose that corresponds to this cache\n\nReturns\n\nDecoratorDataCache\nA data cache that can be passed to generate_input and generate_input_for_resid."}
{"text_id": "8065", "text": "docstring: Find subscription type string within specific subscription.\nEssentially removes extraneous parts of the string to get the type."}
{"text_id": "8066", "text": "docstring: If the user is already authenticated, redirect to kitchen"}
{"text_id": "8067", "text": "docstring: Builds the command for starting the bigtable emulator."}
{"text_id": "8068", "text": "docstring: Removes edits at the specified layer, or removes edits at all layers\nif no layer name is specified."}
{"text_id": "8069", "text": "docstring: When venv already exists with the project_name, ask\nuser opinion."}
{"text_id": "8070", "text": "docstring: Search for audit events by providing an FQL filter and paging details."}
{"text_id": "8071", "text": "docstring: Returns the queryset with new filters"}
{"text_id": "8072", "text": "docstring: Update range value for augassigned variables."}
{"text_id": "8073", "text": "docstring: Convert the applicable keys in `header` from how they appear in the reference\nfile to how they appear in the rmap. Multiple conversion activities.\n\n1. Mapping from reference file keywwords to corresponding dataset keywords.\n2. Expansion of conditional substitutions defined in e.g."}
{"text_id": "8074", "text": "docstring: Checks to make sure that the inputted address\nfollows proper web email address formatting\n\n:param      address     \n\n:return      success"}
{"text_id": "8075", "text": "docstring: Call the service registered to svc_name with the specified (optional)\nnamespace and given kwargs."}
{"text_id": "8076", "text": "docstring: Round the given number to the nearest odd number."}
{"text_id": "8077", "text": "docstring: Infers CKAN packages from \"simple\" spreadsheet structure."}
{"text_id": "8078", "text": "docstring: Setter for parent thread identifier."}
{"text_id": "8079", "text": "docstring: > Colour\nGet the back colour for active hotspots."}
{"text_id": "8080", "text": "docstring: Compute Gini coefficient of array of values"}
{"text_id": "8081", "text": "docstring: Read the three files that compose the dataset"}
{"text_id": "8082", "text": "docstring: Prepare the CSR sparse matrix for conversion to TensorFlow.\nParameters\n\nX : sparse matrix in CSR format\n\nReturns\n\nindices : numpy array with shape (X.nnz, 2)\ndescribing the indices with values in X.\nvalues : numpy array with shape (X.nnz)\ndescribing the values at each index"}
{"text_id": "8083", "text": "docstring: Returns a flattened version of the config where '.' separates nested values"}
{"text_id": "8084", "text": "docstring: Reset the config manager to it's initialised state.\nThis clears all values, unsets all defaults and removes all\nhandlers, maps, and hooks."}
{"text_id": "8085", "text": "docstring: Update spent information for list of transactions for a specific address. This method assumes the list of\ntransaction complete and up-to-date.\n\nThis methods loops through all the transaction and update all transaction outputs for given address, checks\nif the output is spent and add the spending transaction ID and index number to the outputs.\n\nThe same list of transactions with updates outputs will be returned\n\n\n\n:return list of Transaction."}
{"text_id": "8086", "text": "docstring: r\"\"\"Forward pass that concatenates the continuous features with the\nembeddings. The result is then passed through a series of dense Resnet\nblocks"}
{"text_id": "8087", "text": "docstring: Merges two binary numbers together using the bitmask."}
{"text_id": "8088", "text": "docstring: Constructs a specified PeleeNet backbone. Freezes the specified number of layers in the backbone."}
{"text_id": "8089", "text": "docstring: r\"\"\"Returns a Gaussian function in z"}
{"text_id": "8090", "text": "docstring: If the most freqeunt sense makes up more than 90% of the word encounters, then assign it"}
{"text_id": "8091", "text": "docstring: Run sample analyses that should work for any particle system."}
{"text_id": "8092", "text": "docstring: Update .py configuration file with new path to extensions"}
{"text_id": "8093", "text": "docstring: Search track, album, artist or user"}
{"text_id": "8094", "text": "docstring: True if its okay to invoke the allocator."}
{"text_id": "8095", "text": "docstring: Convert a single sequence of arrays to multiple arrays."}
{"text_id": "8096", "text": "docstring: Using this for convenience over GeoPy because it doesn't support our vectorized operations w/ Pandas"}
{"text_id": "8097", "text": "docstring: Resizing each output image window in the batch as an image volume\nlocation specifies the original input image (so that the\ninterpolation order, original shape information retained in the\n\ngenerated outputs).For the fields that have the keyword 'window' in the\ndictionary key, it will be saved as image. The rest will be saved as\ncsv. CSV files will contain at saving a first line of 0 (to be\nchanged into the header by the user), the first column being the\nindex of the window, followed by the list of output."}
{"text_id": "8098", "text": "docstring: If Incredibuild should be used, check for required packages"}
{"text_id": "8099", "text": "docstring: Check that the current results are consistent with the control file.\nThis is run when reloading state.\n\nRaises CompetitionError if they're not.\n\n(In general, control file changes are permitted. The only thing we\nreject is results for a currently-defined matchup whose players aren't\ncorrect.)"}
{"text_id": "8100", "text": "docstring: KL divergence for the Kumaraswamy distribution."}
{"text_id": "8101", "text": "docstring: Decodes and shows data from an ASN.1 encoded byte stream in the editor."}
{"text_id": "8102", "text": "docstring: Compute a Cohen's D from an observation and a prediction."}
{"text_id": "8103", "text": "docstring: reduce the item to it's original type"}
{"text_id": "8104", "text": "docstring: Compute gradient given current model parameters and local data."}
{"text_id": "8105", "text": "docstring: read corpus from df, clean each description as it is read"}
{"text_id": "8106", "text": "docstring: Take matrix data and output raw data.\nOutput uses the same type as input to the transform function.\nEither np array or pd dataframe."}
{"text_id": "8107", "text": "docstring: given a user with GitHub permissions, an article, and markdown, dispatch an action\nto generate a pull request and return the link to the user."}
{"text_id": "8108", "text": "docstring: Nuclear norm\nParameters\n\npenalty : float\nnuclear norm penalty hyperparameter\n\nnewshape : tuple, optional\nDesired shape of the parameters to apply the nuclear norm to. The given\nparameters are reshaped to an array with this shape, or not reshaped if\nthe value of newshape is None. (Default: None)"}
{"text_id": "8109", "text": "docstring: r\"\"\".\nConstruct a new leapfrog evolver with tuned parameters loaded from HDF5.\n\\param h5group Base group that contains the tuner group, i.e.\n`h5group['leapfrogTuner']` must exist.\n\\param action Instance of isle.Action to use for molecular dynamics.\n\\param rng Central random number generator for the run. Used for accept/reject.\n\\throws RuntimeError if tuning is not complete/successful.\n\\returns A new instance of evolver.leapfrog.ConstStepLeapfrog with\nthe tuned length and nstep."}
{"text_id": "8110", "text": "docstring: Parameters\nsignal: np.ndarray a NxM numpy ndarray\nthreshold: float the cutoff value for the zero forcing (default: 1e-20)\n\nReturns\n\nthe signal, where no value is smaller than threshold"}
{"text_id": "8111", "text": "docstring: Create dummy structure (copy data from tables without any keys or indexes)"}
{"text_id": "8112", "text": "docstring: Validates a payload against a schema\nraises MagellanRuntime Exceptions or Warnings depending on config"}
{"text_id": "8113", "text": "docstring: Main method to run hyper tuning."}
{"text_id": "8114", "text": "docstring: Return a new validator for the same field of the same object."}
{"text_id": "8115", "text": "docstring: Deletes a Pub/Sub subscription, if it exists."}
{"text_id": "8116", "text": "docstring: Performs basic processing on the loaded image"}
{"text_id": "8117", "text": "docstring: Measure and analyze inference time for a tensorflow model with different batch sizes."}
{"text_id": "8118", "text": "docstring: Run simple validate on the monitored key."}
{"text_id": "8119", "text": "docstring: Returns a frame containing the status fields we want to display to the\napp in the main window"}
{"text_id": "8120", "text": "docstring: Create a working directory with PatchSim test data files."}
{"text_id": "8121", "text": "docstring: Calculates ROC curve on the folds"}
{"text_id": "8122", "text": "docstring: post process & create csv file"}
{"text_id": "8123", "text": "docstring: List all services in the repository\nIt is method for GET /ays/repository/{repository}/service"}
{"text_id": "8124", "text": "docstring: Invoke any time that an error or warning appears in the log.\nParameters\n\nmsg : string\nmessage string from console."}
{"text_id": "8125", "text": "docstring: Simplify all blocks in self._blocks."}
{"text_id": "8126", "text": "docstring: Computes a CRC Checksum on an image."}
{"text_id": "8127", "text": "docstring: Uploading an application to be deployed by Armada"}
{"text_id": "8128", "text": "docstring: Save explore agent weight for explorer."}
{"text_id": "8129", "text": "docstring: Create a command to return a list of OVSDB records\nIdentical to db_list, but returns a RowView list result"}
{"text_id": "8130", "text": "docstring: Write the current config to disk."}
{"text_id": "8131", "text": "docstring: Prototypical Network.\nArgs\n\nweight x height x channel\nn_way: number of classes\nk_shot: number of samples per class"}
{"text_id": "8132", "text": "docstring: \n\nresult files will be saved to outputdirectory\n\n\n\ntargetname will be queried via simbad or tic which saves a configuration file to target config directory"}
{"text_id": "8133", "text": "docstring: Creates an instance of this model from a dictionary\nArgs:\ndictionary (dictionary): A dictionary representation of the object\nas obtained from the deserialization of the server's response. The\nkeys MUST match property names in the API description.\n\nAn instance of this structure class."}
{"text_id": "8134", "text": "docstring: Return a tuple of X1,Y1,X2,Y2 coordinates for a rectangle\nwhich encloses the item identified by index in ARGS."}
{"text_id": "8135", "text": "docstring: Validate input values for the execute function."}
{"text_id": "8136", "text": "docstring: Turns the ``params`` dict to a sorted querystring and returns it"}
{"text_id": "8137", "text": "docstring: Delete storage for a managedEnvironment.\nDelete storage for a managedEnvironment."}
{"text_id": "8138", "text": "docstring: Greedifies the given strategy. -1 is the minumum value and 1 is the maximum."}
{"text_id": "8139", "text": "docstring: Generate the feasible regions from a dictionary of static map elements.\nParameters\n\nstatic_elements : dict\nA dictionary of map elements"}
{"text_id": "8140", "text": "docstring: Purge any packages that need to be removed."}
{"text_id": "8141", "text": "docstring: Waf fights us tooth and nail to try to enforce its convoluted view of the file-system,\nand falls to pieces any time it gets confused. This takes an absolute path and works\naround waf's quirks to obtain the corresponding node.\nIf the node is in the build tree, it might not exist yet, and waf will do bizarre\nthings if we ask it to create the absolute path. If the node is outside of the build\ntree, we require it to exist now, or we will fail immediately."}
{"text_id": "8142", "text": "docstring: Find the index of the closest speed allowed to a given speed."}
{"text_id": "8143", "text": "docstring: Returns the step number of a checkpoint path."}
{"text_id": "8144", "text": "docstring: Compensating for off resonance with a pulse sequence with an embedded\nWimperis (or BB1) control, also known as CinBB.\n\nParameters\n\nrabi_rotation : float, optional\nThe total rabi rotation to be performed by the control.\nmaximum_rabi_rate : float, optional\nDefaults to 2.*np.pi\nThe maximum rabi frequency for the control.\nazimuthal_angle : float, optional\nThe azimuthal position of the control.\nkwargs : dict\nOther keywords required to make a qctrlopencontrols.DrivenControls.\n\nReturns\n\n"}
{"text_id": "8145", "text": "docstring: Perform a Blueair API call.\nThis is a low level function that is used by most of the client API calls."}
{"text_id": "8146", "text": "docstring: distributionGroups_listUsers  # noqa: E501\nReturns a list of member details in the distribution group specified  # noqa: E501\nThis method makes a synchronous HTTP request by default.\n\n"}
{"text_id": "8147", "text": "docstring: Determine if the given module is enabled locally."}
{"text_id": "8148", "text": "docstring: Calculate X-Vector network activations.\nReturn the requested intermediate layer without computing unnecessary activations.\n\nParameters\n\n\n\nReturns\n\n"}
{"text_id": "8149", "text": "docstring: Given a new status, and external id, updates status of associated onetrust subtask"}
{"text_id": "8150", "text": "docstring: Creates a combined plot with the paths for all the players"}
{"text_id": "8151", "text": "docstring: Check if mode is executable\nMode can be specified in octal or as an int."}
{"text_id": "8152", "text": "docstring: Returns a new ExpressionMap without expressions related to the given\nhandle type."}
{"text_id": "8153", "text": "docstring: Send message to agent to create vip"}
{"text_id": "8154", "text": "docstring: Pulls samples from the sampler with SOME unmasked\nvoxels for each task"}
{"text_id": "8155", "text": "docstring: Entry function to fetch the repo data for a language and select the required fields.\nAnd call analytics function on this data."}
{"text_id": "8156", "text": "docstring: none\nRandomly choose a point within the boundary\n\n"}
{"text_id": "8157", "text": "docstring: Add command-line arguments common between library_packager_old.py invoked as a script, and\nthe yb_release.py script."}
{"text_id": "8158", "text": "docstring: [DEPRECATED NOTICE: This operation will soon be removed] Gets all the\npattern features."}
{"text_id": "8159", "text": "docstring: Builds a schedule for running BP on a tree graph structure.  Schedule is built using a recursive depth\nfirst search."}
{"text_id": "8160", "text": "docstring: Helper function replace an entry in a string by the field number.\nNo padding is implemented currently.  Spacing will change if\nthe original field entry and the new field entry are of\ndifferent lengths."}
{"text_id": "8161", "text": "docstring: Migrate the data from the Query to a target dataset.\nValid optional kwargs include.\n\n"}
{"text_id": "8162", "text": "docstring: Ensure that when the use_transitions argument is set to True the state\ncontains the board of the last two timesteps."}
{"text_id": "8163", "text": "docstring: This function is responsible for taking in a string and interpreting as an individual function.\nParameters\n\nstr\nstring to be interpreted as a timefn function.\n\nReturns\n\nobj\npython timefn object corresponding to the string."}
{"text_id": "8164", "text": "docstring: Create a PendingTentative associated to this loop."}
{"text_id": "8165", "text": "docstring: Handle building child config sections."}
{"text_id": "8166", "text": "docstring: Adds (or updates) instance of Satellite"}
{"text_id": "8167", "text": "docstring: Upload a new put-file to use for the RTR `put` command."}
{"text_id": "8168", "text": "docstring: Loads a rust standard library and yields corresponding BUILD for it"}
{"text_id": "8169", "text": "docstring: Create props suitable for track plots.\nParameters\n\nkinds : list of str\nThe keys for different values in the plot\ncolors : list of str or cycler.Cycler, optional\nColors to apply to line segments.\n\nReturns\n\ndict mapping (k1, k2) to props"}
{"text_id": "8170", "text": "docstring: Make layer specified be drawn at front of Z order.\nid  ID of the layer to pop to the front"}
{"text_id": "8171", "text": "docstring: Computes hashes for the provided Bytes"}
{"text_id": "8172", "text": "docstring: Flattens the pickling graph, by removing backreference from the ports."}
{"text_id": "8173", "text": "docstring: Append a code file using the code_type"}
{"text_id": "8174", "text": "docstring: All angle calculations in this function is w.r.t habitat coordinate frame, on X-Z plane\nwhere +Y is upward, -Z is forward and +X is rightward.\nAngle 0 corresponds to +X, angle 90 corresponds to +y and 290 corresponds to 270."}
{"text_id": "8175", "text": "docstring: Reads single FITS file from JWST's NIRCam instrument.\nParameters\n\nstr\nSingle filename to read\ndata:   DataClass\nThe data object in which the fits data will stored\nmeta:   MetaClass\nThe metadata object\n\nReturns\n\nDataClass\nThe updated data object with the fits data stored inside\n\nNotes\n\n\n\nNovember 2012 Kevin Stevenson\nInitial version\nJune 2021 Aarynn Carter/Eva-Maria Ahrer\nUpdated for NIRSpec"}
{"text_id": "8176", "text": "docstring: match the reference string into journal, issue, year, pages to find the reference"}
{"text_id": "8177", "text": "docstring: Computes a data-independent RDP curve for GNMax.\nImplementation of Proposition 8."}
{"text_id": "8178", "text": "docstring: Plot mHI-mHalo relation for 2 models"}
{"text_id": "8179", "text": "docstring: Parse main page and extract all articles"}
{"text_id": "8180", "text": "docstring: Performs a serving cycle for the client, that is, waits for a request to be received or for a new value to be published, then\nsends new game servers data to this client.\nUnexpected errors are caught by caller.\nReturns `true` if connection is still open, `false` otherwise."}
{"text_id": "8181", "text": "docstring: Gets or sets the date of the current context."}
{"text_id": "8182", "text": "docstring: This function creates a model that fits a ramp using a rising exponential.\nParameters\n\ngoal as x -> inf\nm1,m2: rise exp\nt1,t2: time offset\nt:       Array of time/phase points\n\nReturns\n\nThis function returns an array of y values by combining an eclipse and a rising exponential\n\nRevisions\n\n2011-07-11    Kevin Stevenson, UCF\nkevin218@knights.ucf.edu\nOriginal version"}
{"text_id": "8183", "text": "docstring: If crawlers are reporting too many errors, halt the crawl."}
{"text_id": "8184", "text": "docstring: Send a websocket message, and return the response."}
{"text_id": "8185", "text": "docstring: Lump together factor levels into \"other\""}
{"text_id": "8186", "text": "docstring: This method pushes impression in queue after modifying the payload"}
{"text_id": "8187", "text": "docstring: Executes a search over the data of a given entity set to find rows that match the search term  # noqa: E501\nThis method makes a synchronous HTTP request by default. To make an\nasynchronous HTTP request, please pass async_req=True\n\n"}
{"text_id": "8188", "text": "docstring: Clear the Event FK and autoscheduled status, removing the Event from the schedule"}
{"text_id": "8189", "text": "docstring: Return a copy of this graph in shared memory, without node data or edge data.\nIt moves the graph index to shared memory and returns a DGLHeterograph object which\nhas the same graph structure, node types and edge types but does not contain node data\nor edge data.\n\nParameters\n\nname : str\nThe name of the shared memory.\nformats : str or a list of str (optional)\nDesired formats to be materialized.\n\nReturns\n\nHeteroGraph\nThe graph in shared memory"}
{"text_id": "8190", "text": "docstring: Handle netmask_v6 possibilities from the database.\nHistorically, this was stored as just an integral CIDR prefix,\nbut in the future it should be stored as an actual netmask.\nBe tolerant of either here."}
{"text_id": "8191", "text": "docstring: Change the visible identity of our wearer."}
{"text_id": "8192", "text": "docstring: Load the configuration from a file (ConfigParser syntax)."}
{"text_id": "8193", "text": "docstring: Mark a test that's expected to fail for a given condition."}
{"text_id": "8194", "text": "docstring: Fetch a single credential exchange record  # noqa: E501\nThis method makes a synchronous HTTP request by default. To make an\nasynchronous HTTP request, please pass async_req=True\n\n"}
{"text_id": "8195", "text": "docstring: Parses the arguments and options."}
{"text_id": "8196", "text": "docstring: Convert network prediction into a quantile prediction.\nWill use first metric in ``metrics`` attribute to calculate result."}
{"text_id": "8197", "text": "docstring: Predict the future state using continuous approximation to the discrete A."}
{"text_id": "8198", "text": "docstring: When the page isn't found render the error.html\npage and display it to the user with the 404 message."}
{"text_id": "8199", "text": "docstring: Says a given text string.\nYou can configure the language and voice of the text using"}
{"text_id": "8200", "text": "docstring: Run assembly on the prepared statements.\nThis function loads all the prepared statements associated with the\ncorpus and then runs assembly on them."}
{"text_id": "8201", "text": "docstring: A callable to create a Flask app with the Reddit provider"}
{"text_id": "8202", "text": "docstring: Analyze the pdb using distance between atom and minimum distances."}
{"text_id": "8203", "text": "docstring: Fork coallele counts for each adapter ID and fragment"}
{"text_id": "8204", "text": "docstring: Configure the given card in monitor mode"}
{"text_id": "8205", "text": "docstring: Parse a list of C function declarations and output to Python code that can be embedded into\nangr.procedures.definitions.\n\n"}
{"text_id": "8206", "text": "docstring: Method to document the columns from a model.\nWill ask the user which columns they want to document and collect the new definition.\n\ncolumns (Dict[str, str]): Dict of columns with the column name as the key\nand the column description to populate schema.yml as the value."}
{"text_id": "8207", "text": "docstring: This attack module is supposed to run python scripts\nAvailable arguments are.\n\ntarget for this module has to be specified in 'args'\n\nfull path to the script\n\noptional args for script\n\noutput_file (optional) - where should be output file of module be stored, if not defined,\noutput will be in the report file\n\nfor how long - in seconds - the script should run, if not defined in args;\nif timeout is not set, module waits until its finished\n\nwhich type of script you want to run (python, shell , ruby)"}
{"text_id": "8208", "text": "docstring: Create a unit ID shuffled surrogate of BinnedSpikeTrainArray."}
{"text_id": "8209", "text": "docstring: Create Kafka producer, check if relevant topic exists (if not create it) and start producing messages"}
{"text_id": "8210", "text": "docstring: This function is used to display the image`s pyramid"}
{"text_id": "8211", "text": "docstring: Get all organizations  # noqa: E501\nReturns the organizations  # noqa: E501\nThis method makes a synchronous HTTP request by default. To make an\nasynchronous HTTP request, please pass async_req=True\n\n"}
{"text_id": "8212", "text": "docstring: Builds input sequence from file.\nSplits lines on whitespace. Treats punctuation as whitespace. For word-level\nsequences, only keeps terms that are in the vocab.\nTerms are added as token in the SequenceExample.  The EOS_TOKEN is also\nappended. Label and weight features are set to 0."}
{"text_id": "8213", "text": "docstring: Removes the HPC Exporter's collector"}
{"text_id": "8214", "text": "docstring: Finalize the BoM Analytics client and return it for use.\nAuthentication must be configured for this method to succeed.\n\nReturns"}
{"text_id": "8215", "text": "docstring: Convert a single MARC21 classification or authority record to RDF."}
{"text_id": "8216", "text": "docstring: returns a list of all captures of the current position"}
{"text_id": "8217", "text": "docstring: This will initialise a hangman game and generate the necessary data."}
{"text_id": "8218", "text": "docstring: Determines reaction penalties, on the given model, for\nthe given expression data.\n\nOperates on a single cell"}
{"text_id": "8219", "text": "docstring: Given a high-res Mesh structure and its corrsponding low-res Mesh structure,\napply the high-to-low mapping that created this pair, to given list of Mesh items.\nThe given list of target meshes should posses the same topology as the given pair of\nlow and high-res meshes.\n\nhigh and low res meshes as Mesh instances.\nlist of target high-res meshesh\n\nList of low-res meshes corrsponding to the given list of high-res meshes."}
{"text_id": "8220", "text": "docstring: Form handler for deleting a journal entry."}
{"text_id": "8221", "text": "docstring: Closes the connection if any\nCloses the tab safely\nbuggy when removed\nobjects dict not working well\nneed other way around"}
{"text_id": "8222", "text": "docstring: returns a dictionary with the struct's entries (shallow copy)"}
{"text_id": "8223", "text": "docstring: Export a tokenizer to a file ( > exporttoken  )"}
{"text_id": "8224", "text": "docstring: Verifies a single step of the pipeline."}
{"text_id": "8225", "text": "docstring: Simply looks at the subreddit properties\nif image/video/gifs allowed then they are removed\nNote: Use keep_only_text_strict from now on"}
{"text_id": "8226", "text": "docstring: return from the module, without error"}
{"text_id": "8227", "text": "docstring: Given a dictionary of `relationships`, apply crease value to edges"}
{"text_id": "8228", "text": "docstring: Read a 2D (n,m) array in Fortran order"}
{"text_id": "8229", "text": "docstring: Sends files from URLs to a thread"}
{"text_id": "8230", "text": "docstring: Returns the SIFt of all OTHER entities with residues that are part of THIS\nchain."}
{"text_id": "8231", "text": "docstring: Plot train, test time time series\nPlot multiple forecast to compare"}
{"text_id": "8232", "text": "docstring: Function to check availability in the hospitals based on\nuser age from the json response from the public API\n\nParameters\n\npayload : JSON\nage: INT\n\nReturns\n\navailable_centers_str : String\nAvailable hospitals\ntotal_available_centers : Integer\nTotal available hospitals"}
{"text_id": "8233", "text": "docstring: Return with the name of the controller name."}
{"text_id": "8234", "text": "docstring: Hex to 5 tets, no new points"}
{"text_id": "8235", "text": "docstring: Update the parameter of the control mechanism (limits and steps).\nParameters\n\ncurrentKey : string\nKeyboard event encoded in string."}
{"text_id": "8236", "text": "docstring: Checks if the user have canceled the execution and takes\nappropriate action"}
{"text_id": "8237", "text": "docstring: Compute Cartesian MRI forward operation (2D) without (i)fftshifts"}
{"text_id": "8238", "text": "docstring: Iterate over all lemmata for one language collected at the\nword iteration stage."}
{"text_id": "8239", "text": "docstring: Gets Discord channels that are `events` channels."}
{"text_id": "8240", "text": "docstring: Spliting data set for training and testing\n1. Create required folder to training, validating, testing\n2. Split dataframe for each set into *_train, *_valid\n3."}
{"text_id": "8241", "text": "docstring: Pop a console with an InterativeConsole"}
{"text_id": "8242", "text": "docstring: Return a comma-separated list of option strings & metavariables."}
{"text_id": "8243", "text": "docstring: Format the MAC address to the defined group size and group separator.\n\nThe Caller can also use the `to_case` parameter to return the value\nusing str.lower or str.upper case.  By default if `to_case` is not\nprovided, then the character casing will be \"as-is\" passed in the\ninstance constructor.\n\nThe format settings/return value are cached so that future calls using\nthe same format criteria are optimized.  This is a desired condition\nsince the MAC address format value may be used multiple times across\nmany usages; for example when looking for a MAC address in multiple\nnetwork devices.\n\nParameters\n\nThe group size of the octets.\nsep: char - The group separator.\nto_case: Callable - should generally be str.lower or str.upper for case formatting\n\nReturns\n\nthe formatted MAC address string.\n\nRaises\n\nValueError if `size` value is not divisible by 12; number characters in\na MAC address not counting the group separator character."}
{"text_id": "8244", "text": "docstring: Tests Goal class in Google Anlaytics Account Feed."}
{"text_id": "8245", "text": "docstring: Writes a TensorFlow graph to the summary interface.\nThe graph summary is, strictly speaking, not a summary. Conditions\nlike `tf.summary.should_record_summaries` do not apply. Only\na single graph can be associated with a particular run. If multiple\ngraphs are written, then only the last one will be considered by\nTensorBoard.\n\nWhen not using eager execution mode, the user should consider passing\nthe `graph` parameter to `tf.compat.v1.summary.initialize` instead of\ncalling this function. Otherwise special care needs to be taken when\nusing the graph to record the graph."}
{"text_id": "8246", "text": "docstring: Decorator that takes a function, and transforms it into a function that\nprints out how long it took to execute. This decorator may be easily\naltered to output the time to a logging file instead of printing.\n\nParameters\n\n\n\ndigits : int (optional)\nThe number of digits to round the timing to\n\nunit : string (default is minutes)\nThe unit to measure time in, choices are ['minutes', 'seconds']\n\nReturns\n\nmaster_function : function\nA modified version of the input function that prints out how long the\nfunction took to execute"}
{"text_id": "8247", "text": "docstring: open high low close (OHLC) plot"}
{"text_id": "8248", "text": "docstring: the best sentence is the one with the smallest kl_divergence"}
{"text_id": "8249", "text": "docstring: Evaluate three terms recurrence coefficients (TTR)."}
{"text_id": "8250", "text": "docstring: Find the index of the edge closest to the specified point at x,y.\nIf the point is not within eps (in the same coordinates as x,y) of\nany edge in the path, the index of the closest end point is returned."}
{"text_id": "8251", "text": "docstring: Indicate delivery result.\nCalled once for each message produced. Triggered by poll() or flush()."}
{"text_id": "8252", "text": "docstring: Check that data has fewer than n datapoints (first dimension)\nParameters\n\ndata : np.ndarray\nThe data to check\nn : int\nThe number of datapoints data must have fewer than\n\nRaises\n\nTimekeepCheckError\nIf data has n or more datapoints"}
{"text_id": "8253", "text": "docstring: Checks that the FINS frame header part of the command is valid for a command sent from a client to a server\n(PLC)."}
{"text_id": "8254", "text": "docstring: Load filename from the mod at moddir, which may be a directory or a .zip\nfile."}
{"text_id": "8255", "text": "docstring: Ajax call made when filtering displayed questions."}
{"text_id": "8256", "text": "docstring: Construct a point source file with all of the point sources configured.\nInput\n\n\n\ns_rho : int, optional\nNumber of s-levels in the point source file (should match the grid).\nIf not specified, it will derive it from the vshape parameter\ncdl : string, optional,\nName of CDL file to use\n\nOutput\n\nnc : netCDF4 id\nIf successful, returns the netcdf id for writing"}
{"text_id": "8257", "text": "docstring: Set specified notification destination attributes."}
{"text_id": "8258", "text": "docstring: Check anchor order against stride order for YOLO Detect() module m,\nand correct if necessary."}
{"text_id": "8259", "text": "docstring: Creates the bound to be evaluated."}
{"text_id": "8260", "text": "docstring: Returns a string describing the expected action, decode the string returned by ``decision``\nExamples\n\n"}
{"text_id": "8261", "text": "docstring: Return True when k is pressed."}
{"text_id": "8262", "text": "docstring: Test help function for subcommand."}
{"text_id": "8263", "text": "docstring: Shows the menu as configured. Returns validated value entered by user."}
{"text_id": "8264", "text": "docstring: Create good formatted Game Company page."}
{"text_id": "8265", "text": "docstring: Retrieve a single video list in a-z order"}
{"text_id": "8266", "text": "docstring: For given values and parameter names, return the spectrum one would have\nwith these parameters. The values and parameter names should be array\nlike objects of the same length."}
{"text_id": "8267", "text": "docstring: verifying that the widget can set and get a value without loss of equality"}
{"text_id": "8268", "text": "docstring: Give someone or yourself a hug!"}
{"text_id": "8269", "text": "docstring: Logs a message to the logger."}
{"text_id": "8270", "text": "docstring: Generates an Axios interview with Trump meme.\n(Bot Needs: Attach Files)"}
{"text_id": "8271", "text": "docstring: Tries to check and read a user_id from a given access_token and refresh_id."}
{"text_id": "8272", "text": "docstring: Parses the given filename related to the given interface and returns\nthe (declarations, headerfile). The header returned is normally the\nsame as the given to this method (except that it is the full path),\nexcept if tail is not None: in this case, the header is copied to a temp\nfilename and the tail code is appended to it before being passed on to\ngccxml.  This temp filename is then returned."}
{"text_id": "8273", "text": "docstring: Return a scalar type which is common to the input arrays."}
{"text_id": "8274", "text": "docstring: Grabs an image. Uses an existing image if name is given. Otherwise takes an\nimage using a given camera."}
{"text_id": "8275", "text": "docstring: Deserialize the input proto and resets the ensemble from it."}
{"text_id": "8276", "text": "docstring: Schedule command, intended to make the request to Azkaban and treat the response properly.\nThis method receives the project, the flow, the cron expression in quartz format and optional execution options,\nmake the schedule request to schedule the flow with the cron specified and evaluate the response.\n\nIf project, flow or cron is wrong or if there is no session_id, it returns false. If everything is fine, returns\nTrue."}
{"text_id": "8277", "text": "docstring: A function to calculate the Standard Deviation of Data\nby caclulating the Square Root of The Variance"}
{"text_id": "8278", "text": "docstring: Broadcast transient status information to all listeners"}
{"text_id": "8279", "text": "docstring: Main entry point for the Lambda function."}
{"text_id": "8280", "text": "docstring: Scale axis so that the arr entries appear equidistant.\nThe full transformation is piecewise-linear."}
{"text_id": "8281", "text": "docstring: Adds a metadatablock object to the dataset if it is of 'DataverseBase' type and has a metadatablock name"}
{"text_id": "8282", "text": "docstring: query cve action info from database"}
{"text_id": "8283", "text": "docstring: Defines a new identifier of a given name, type and kind.\nAssigns it a running index."}
{"text_id": "8284", "text": "docstring: Obtain part or whole of a chunk.\nParameters\n\ncidx : tuple of ints\nIndices of the chunk.\nitem : tuple of slices\nLocation of region within the chunk.\ndest : ndarray\nNumpy array to store result in."}
{"text_id": "8285", "text": "docstring: Draw the layout region on the input canvas(image)."}
{"text_id": "8286", "text": "docstring: Updates min and max count for each word"}
{"text_id": "8287", "text": "docstring: Process the Lyx LFUN in the currently running Lyx via the server."}
{"text_id": "8288", "text": "docstring: Simple generator that paginates text."}
{"text_id": "8289", "text": "docstring: Updates the WfSwarmingTask entity with status from swarming."}
{"text_id": "8290", "text": "docstring: Check if we can do this operation with our cython functions.\nRaises\n\nNotImplementedError\nThis is either not a valid function for this dtype, or\nvalid but not implemented in cython."}
{"text_id": "8291", "text": "docstring: Marks the specified blob or snapshot for deletion.\nThe blob is later deleted during garbage collection.\n\nNote that in order to delete a blob, you must delete all of its\nsnapshots. You can delete both at the same time with the Delete\nBlob operation."}
{"text_id": "8292", "text": "docstring: Determines if the shooter is up to speed, then rumbles controller and publishes to NetworkTables."}
{"text_id": "8293", "text": "docstring: \n\n2D list of strategies. The 1st dimension represents the\ndifferent strategies for which the run will be generated,\nwhereas the 2nd one represents the *sub-strategies*,\nwhen necessary, in particular for the coordinated strategies.\nFor a coordinated strategy there are 2 sub-strategies on the\nsecond dimension.\nnb_execs: number of runs,\nodp: output directory path\nnetids: list of networks ids to patrol\npop_sizes: number of agents"}
{"text_id": "8294", "text": "docstring: Subtracts given mean value(s) from image. If parameter 'separate_channels' is set True, mean value from\nparameter 'mean' for corresponding channel in the is subtracted. Otherwise, only single mean value (first\nvalue of the parameter 'mean' in this case) is subtracted from each channels. The parameter 'direction'\nindicates what direction of processing will be followed. For example, if direction is set 'column', mean values\n(one for each corresponding column) are subtracted from each columns respectively."}
{"text_id": "8295", "text": "docstring: Apply a single training step on one batch."}
{"text_id": "8296", "text": "docstring: Makes a progress plot from a POAP controller\nThis method depends on matplotlib and will terminate if matplotlib.pyplot\nis unavailable."}
{"text_id": "8297", "text": "docstring: Move validation chip images to val folder (applies train/val split on images)"}
{"text_id": "8298", "text": "docstring: Draw stop traffic signs and its bounding box if enabled"}
{"text_id": "8299", "text": "docstring: Gets the luns of this LogicalUnit."}
{"text_id": "8300", "text": "docstring: Normalized Difference Water Index (McFeeters, 1996)."}
{"text_id": "8301", "text": "docstring: Checks if agent is loged to the call center module"}
{"text_id": "8302", "text": "docstring: Parse the configuration file, if one is configured, and add it to\nthe `Bison` state."}
{"text_id": "8303", "text": "docstring: returns available SeaBreezeDevices\nlist all connected Ocean Optics devices supported\n\nReturns\n\n`list[SeaBreezeDevice]`\nconnected Spectrometer instances"}
{"text_id": "8304", "text": "docstring: Partition by edge peeling.\nPartition Type: Edge\nDescription: Given graph G and sets of both vertex and edge indices,\ninduce subgraph and partition edges by means of iterative peeling."}
{"text_id": "8305", "text": "docstring: load the FleurInputSchema dict for the specified version"}
{"text_id": "8306", "text": "docstring: Context manager for ASV preview web server. Gives the base URL to use.\nParameters\n\nbase_path : str\nPath to serve files from"}
{"text_id": "8307", "text": "docstring: Create a CatBoost model.\n\nIsolation Forest model"}
{"text_id": "8308", "text": "docstring: Apply the enabled channels chosen using set_enable_channels(). This happens automatically and does not\nusually need to be called."}
{"text_id": "8309", "text": "docstring: Consume the WHERE cluase.\nThese can have some recursion because of the AND symbol."}
{"text_id": "8310", "text": "docstring: Sends data to the network."}
{"text_id": "8311", "text": "docstring: Publishes the message.\nAll listeners that have subscribed to the topic of this message will be\ncalled with the this instance as an argument.\n\nNotifications are sent sequentially. Due to the limitations of current\nimplementation, if any of the listeners raises an exception, subsequent\nlisteners will not get the notification."}
{"text_id": "8312", "text": "docstring: Return the unsigned integer value of four bytes of the array in Big\nEndian base order."}
{"text_id": "8313", "text": "docstring: Computes the formula, particularly tries to find safe and unsafe areas."}
{"text_id": "8314", "text": "docstring: Convert the node and its subtree into a SymPy equation."}
{"text_id": "8315", "text": "docstring: Retrieve a member's parts list. DEPRECATED - Use hw instead."}
{"text_id": "8316", "text": "docstring: Called when someone was disconnected."}
{"text_id": "8317", "text": "docstring: Sends you a picture of a cute doggo :3"}
{"text_id": "8318", "text": "docstring: Add the loop termination condition and body to the graph."}
{"text_id": "8319", "text": "docstring: Uploads files to App Engine Cloud Storage bucket using processes."}
{"text_id": "8320", "text": "docstring: Check whether this element represents the same tree as a given element."}
{"text_id": "8321", "text": "docstring: To forward the message to all chats in the mentioned category."}
{"text_id": "8322", "text": "docstring: Initializes the model for inference."}
{"text_id": "8323", "text": "docstring: pad lines with preceding spaces to provide the indentation required\nby python"}
{"text_id": "8324", "text": "docstring: This method is to be implemented in the subclasses\nShould return a new portfolio_stocks"}
{"text_id": "8325", "text": "docstring: Process TRIPS EKB XML and return INDRA Statements."}
{"text_id": "8326", "text": "docstring: Determine index of stream for next inflowing particle.\nParameters\n\nstreams : list of `Stream`\nList of Stream objects for inlet streams.\n\nReturns\n\ni_inflow : int\nIndex of stream for next inflowing particle."}
{"text_id": "8327", "text": "docstring: apply linear or polynomial regression to estiamte instream sediment"}
{"text_id": "8328", "text": "docstring: null-terminated string of 8-bit characters"}
{"text_id": "8329", "text": "docstring: Generates instructions, kernel arguements, and data for calculating\nthe derivative of the pressure modification term w.r.t. Temperature\nfor Lindemann falloff reactions\n\nParameters\n\n\n\nReturns\n\nknl_list : list of :class:`knl_info`\nThe generated infos for feeding into the kernel generator"}
{"text_id": "8330", "text": "docstring: Sends DELETE-request to REST-API"}
{"text_id": "8331", "text": "docstring: Update the description of an existing tag.\nUser who invokes this API needs edit privilege on the tag."}
{"text_id": "8332", "text": "docstring: Clone a repo to the current directory."}
{"text_id": "8333", "text": "docstring: Return only items that do not have these tags."}
{"text_id": "8334", "text": "docstring: Update a location to storage."}
{"text_id": "8335", "text": "docstring: The Metasploit pattern is alphanumeric, so the EIP value as well"}
{"text_id": "8336", "text": "docstring: KNN Clustering Algorithm - to find the same types of days"}
{"text_id": "8337", "text": "docstring: Take average of numpy arrays in a dictionary."}
{"text_id": "8338", "text": "docstring: Get a new ConfigBlock that is a view into this ConfigBlock\nstarting at the given key.\n\nModifications on the returned ConfigBlock are also reflected in\nthis instance."}
{"text_id": "8339", "text": "docstring: Estimate Doppler broadened FWHM of recombination line profiles\nReference: Rybicki & Lightman (Section 10.6)\n\n\n\nmass_particle   [scalar or numpy array] Mass of particle (kg). If specified\nas numpy array, it must be of same size as input nu.\nCould also be specified as an instance of class\nastropy.units.Quantity\n\ntemperature     [scalar or numpy array] Temperature (K). If specified\nas numpy array, it must be of same size as input nu.\nCould also be specified as an instance of class\nastropy.units.Quantity\n\nnu_0            [scalar or numpy array] Line-center frequency (in Hz).\nShould be of same size as input nu. Could also be\nspecified as an instance of class astropy.units.Quantity\n\nrms_turbulent_velocity\n[scalar or numpy array] RMS of turbulent velocity (in\nkm/s). If specified as numpy array, it must be of same\nsize as input nu. Could also be specified as an instance\nof class astropy.units.Quantity Quantity\n\n\n\nFWHM of the Doppler broadened line profile (in Hz). Same size as input\nnu_0. It will be returned as an instance of class astropy.units.Quantity.\nIt will have units of 'second'"}
{"text_id": "8340", "text": "docstring: filenames for each of the media items in the library"}
{"text_id": "8341", "text": "docstring: Invoke `which` command in shell to check if the command is valid."}
{"text_id": "8342", "text": "docstring: set enabled status for actions of volume functional module."}
{"text_id": "8343", "text": "docstring: Register the argument inside of the parser\nArgs:\nparser - The argument parser object we're registering"}
{"text_id": "8344", "text": "docstring: Inspect the arguments to pkg.removed and discover what packages need to\nbe removed. Return a dict of packages to remove."}
{"text_id": "8345", "text": "docstring: Transform from scanner to rat anatomical"}
{"text_id": "8346", "text": "docstring: Write out \"cdef extern\"-style definition for an HDF5 function"}
{"text_id": "8347", "text": "docstring: r\"\"\"\nCompute the Weil restriction of this point over some extension\nfield.\n\nIf the field is a finite field, then this computes\nthe Weil restriction to the prime subfield.\n\n\n\nScheme point on the Weil restriction of the codomain of this point.\n\n\n\n"}
{"text_id": "8348", "text": "docstring: remove hstore virtual fields from class"}
{"text_id": "8349", "text": "docstring: Find and get group thread by its name"}
{"text_id": "8350", "text": "docstring: Check peers status\nand add component result"}
{"text_id": "8351", "text": "docstring: Flatten date, datetime, time, decimal, and bytes as a dict with\na __py__ field and arguments to reconstruct it. Also see the coercers"}
{"text_id": "8352", "text": "docstring: Internal function. Free the memory associated with `this`, a bool.\nUsed to clean up after the relation check."}
{"text_id": "8353", "text": "docstring: Add the type of the node as suffix.\nThe type added can be overridden if the type of the node is in the\nspecified dictinary at \"overrided\" argument. The defaults overrided\ntypes is :obj:`types`."}
{"text_id": "8354", "text": "docstring: User can input interested word(s); then the program prints all the anagrams of the word(s).\nOnce user inputs '-1', the program ends. At the meantime it prints the speed of its algorithm on the console."}
{"text_id": "8355", "text": "docstring: Find a library using search paths.\nUse of this method to find a dependent library indicates that the\nlibrary dependencies are not properly specified. As such, it warns\nwhen it is used."}
{"text_id": "8356", "text": "docstring: Examines an HTTP request header to determine whether the user agent\nsupports the XHTML media type (application/xhtml+xml).  Returns True or\nFalse."}
{"text_id": "8357", "text": "docstring: Solve complex double precision triangular packed system with one right-hand size.\nReferences\n\n`cublastpsv `_"}
{"text_id": "8358", "text": "docstring: Build the jwt token for the connection.\nApple returns an error if the provider token is updated too often, so we don't want to constantly build\nnew ones."}
{"text_id": "8359", "text": "docstring: Utility funtion to delete a sensor event table and its associated sequence."}
{"text_id": "8360", "text": "docstring: Print with supplied function\nprint_func -- print function to use"}
{"text_id": "8361", "text": "docstring: This function creates an agent that merges the input streams into a single output\nstream where the timestamps of the output stream are in monotone nondecreasing\norder.\nElements of the input streams are tuples (timestamp, ....); we require the zeroth\npart of the tuple to be a timestamp: a nonnegative number.\n\nParameters\n\na nonempty list of streams\nElements of the input streams are tuples in which the zeroth element is a\ntimestamp: a nonnegative number\nsingle_output_stream: a single stream\ncall_streams: optional\ncall_streams is either None or a list of streams.\n\nReturns\n\nAn agent that merges the input streams into an output stream."}
{"text_id": "8362", "text": "docstring: Handles index changes to enabled_orthoview_combo_box.\nSaves the setting and notifies the doc controller to toggle\nvisibilty of appropriate 2D orthographic view (sliceview or gridview)."}
{"text_id": "8363", "text": "docstring: Return the model predictions on the prediction set,\nusing cache if possible."}
{"text_id": "8364", "text": "docstring: Extracts trusted CA certs from the system CA cert bundle"}
{"text_id": "8365", "text": "docstring: Generates MCMC samples. Should be implemented in a subclass."}
{"text_id": "8366", "text": "docstring: Here 1 for each image in batch,\npreviously default was 4. I changed it to 1"}
{"text_id": "8367", "text": "docstring: Initializes shares and distributes them amongst their respective owners\nArgs:\nowners the list of shareholders. Can be of any length."}
{"text_id": "8368", "text": "docstring: Scale some type of iterable of floats by a scale factor"}
{"text_id": "8369", "text": "docstring: grid origin x location in the plane coordinate system\nversionadded:: 9.2"}
{"text_id": "8370", "text": "docstring: Define initial surface type according to median elevation such that the melt can be calculated over snow or ice.\n\n\n\n\n\nAdd option_surfacetype_initial to specify an AAR ratio and apply this to estimate initial conditions\n\nParameters\n\nglacier_area : np.ndarray\nGlacier area [km2] from previous year for each elevation bin\nglacier_table : pd.Series\nTable of glacier's RGI information\nelev_bins : np.ndarray\nElevation bins [masl]\nReturns\n\nsurfacetype : np.ndarray\nUpdated surface type for each elevation bin\nfirnline_idx : int\nFirn line index"}
{"text_id": "8371", "text": "docstring: Returns a ResourcesAndOutputs object for a deployment."}
{"text_id": "8372", "text": "docstring: Writes a file under python3 with encoding (default UTF-8).\nAlso works under python2, without encoding.\nUses the EAFP\nprinciple."}
{"text_id": "8373", "text": "docstring: True if it converges , False otherwise"}
{"text_id": "8374", "text": "docstring: Return object data in easily serializeable format"}
{"text_id": "8375", "text": "docstring: Controls characters that need to be escaped (to obtain a well-formed\nXML document)"}
{"text_id": "8376", "text": "docstring: Rotate such that the first neuron is at 0'"}
{"text_id": "8377", "text": "docstring: Attempts to run an instance from the newly created PV image.\nWill attempt to ping/ssh into the instance once running and execute the 'uptime' command."}
{"text_id": "8378", "text": "docstring: Return objects matching child objects properties.\nParameters\n\nattrs : dict\ntmux properties to match values of\n\nReturns\n\nlist"}
{"text_id": "8379", "text": "docstring: Calculates the distance from this Nest to another Nest."}
{"text_id": "8380", "text": "docstring: Call a process and return it's stdout.\nEverything in kwargs will be passed to subprocess.Popen\n\nA bytes object will be returned if encoding is not defined, else stdout will be decoded\naccording to specified encoding.\n\n"}
{"text_id": "8381", "text": "docstring: Generate a Display Table from a passed Structured Table.\nThis routine takes in a prototyped Structured Table and returns a prototyped Display Table\n(CSV of scalar values) based upon some standard assumptions about how it should be displayed.\n\n:param structured: A structured table, such as generated by make_strehlow_table\n:return"}
{"text_id": "8382", "text": "docstring: Prepare the running browser (mobile emulation, UA string, etc"}
{"text_id": "8383", "text": "docstring: Any units that fail or are rejected/released asynchronously accumulate\nwithin the ConcreteSet until collected. These are cached by a\nprepareProbe.\n@returns a ResourceSet\n@raises Exception in case of error"}
{"text_id": "8384", "text": "docstring: Return the dictionary of the elements with it's count."}
{"text_id": "8385", "text": "docstring: Tests the process_response method of the OneLogin_Saml2_Auth class\nCase Valid Response, After processing the response the user\nis authenticated, attributes are returned, also has a nameID and\nthe error array is empty"}
{"text_id": "8386", "text": "docstring: Setter. Allows for self.hide_from = value. Will append to hiders"}
{"text_id": "8387", "text": "docstring: Takes a sequence of spike times and produces a non-normalised density\nestimate by summing Half-exponential (asymetric) defined by sd at each spike\ntime. The range of the output is guessed from the extent of the data (which\nneed not be ordered), the resolution is automagically determined from sd; we\ncurrently used sd/10. A 2d np.array is returned with the time scale and\nnon-normalised 'density' as first and second rows."}
{"text_id": "8388", "text": "docstring: Removes the database's vulnerability assessment rule baseline."}
{"text_id": "8389", "text": "docstring: tuple of int: Get or set the number of pixels read out (width, height). Will automatically center.\nThis applies after binning, i.e. this is the size the output image will be.\nSetting will stop and restart camera if running."}
{"text_id": "8390", "text": "docstring: Content type of current playing media."}
{"text_id": "8391", "text": "docstring: Train this tensorflow model with train data."}
{"text_id": "8392", "text": "docstring: Sorts interval list based on first value of each pair in list"}
{"text_id": "8393", "text": "docstring: Return a random directed graph on the vertices V."}
{"text_id": "8394", "text": "docstring: Write the LN IOC related environmental variable file.\nThis environmental variable will be loaded by all link nodes."}
{"text_id": "8395", "text": "docstring: See if a piece of the dictionary is missing. If it is then we set it to the hardcoded values defined in config.py\nThis function should not be called externally. It fills all data related to bootloader configuration options"}
{"text_id": "8396", "text": "docstring: Decorator check required login and active user"}
{"text_id": "8397", "text": "docstring: Breeding Selection.\nSelect individuals for breeding by adding them to the `selected_`\narray."}
{"text_id": "8398", "text": "docstring: Add an inline field with the given name and value to the given embed."}
{"text_id": "8399", "text": "docstring: Takes the last state-estimate from the mhe to perform an open-loop simulation that initializes\nthe last slice of the mhe horizon. By default the last finite element will be taken as reference.\n\nLoad initial guess to ref\nSet values for inputs\nSet values for initial states\nSolve reference\nLoad back to lsmhe"}
{"text_id": "8400", "text": "docstring: Returns the model properties as a dict"}
{"text_id": "8401", "text": "docstring: Load predictions from an individual sub model into a dataframe stored in the sub_models list, if no model_no is given\nthen load data into next available index.  Valid source is a CSV file."}
{"text_id": "8402", "text": "docstring: This method looks for jobs which where marked as failed.\nIt will restore their status to available, so some other\nworker/emulator can try to do it.\nIt will also join the process which failed the job to the main\nthread, removing their pid from process_at_work."}
{"text_id": "8403", "text": "docstring: Loads payer data from a named YAML file."}
{"text_id": "8404", "text": "docstring: Sets the permissions of this AppVersion.\n:param permissions: The permissions of this AppVersion."}
{"text_id": "8405", "text": "docstring: Write the augmented help into the formatter if it exists."}
{"text_id": "8406", "text": "docstring: Asserts that the template with the provided name was used in rendering\nthe response."}
{"text_id": "8407", "text": "docstring: In the forward pass we receive a Tensor containing the input and return\na Tensor containing the output. ctx is a context object that can be used\nto stash information for backward computation. You can cache arbitrary\nobjects for use in the backward pass using the ctx.save_for_backward method."}
{"text_id": "8408", "text": "docstring: This function can take both binary or quantitative model and outputs AUPR and AUROC"}
{"text_id": "8409", "text": "docstring: Computes the effective size of the given component.\nIf the component does not exist or does not exist on this platform, the size\nis 0.\n\nIf it has data, just use the reported size of its data.\n\nIf there is no data, report the total size of all its direct hidden\ndependencies (that are valid on this platform).  We don't include visible\ndependencies because they will show up in the list with their own size.\n\nThis is a best effort estimation.  It is not easily possible to accurately\nreport size in all situations because complex dependency graphs (between\nhidden and visible components, as well as circular dependencies) makes it\ninfeasible to correctly show size when only displaying visible components.\nThe goal is mainly to not show some components as having no size at all\nwhen they are wrappers around platform specific components."}
{"text_id": "8410", "text": "docstring: Update the RUs per second of an Azure Cosmos DB MongoDB collection."}
{"text_id": "8411", "text": "docstring: Gets what extensions are supported by the remote party."}
{"text_id": "8412", "text": "docstring: Creates and returns a SDL texture loaded from the png file."}
{"text_id": "8413", "text": "docstring: Update refund  # noqa: E501"}
{"text_id": "8414", "text": "docstring: decoheres the coin at selected qubits"}
{"text_id": "8415", "text": "docstring: Organize and store the data from the log line into the metric store by metric type, transaction, timestamp"}
{"text_id": "8416", "text": "docstring: Fourier transform of the Mexican hat wavelet as in Wang and\nLu (2010), equation [15]."}
{"text_id": "8417", "text": "docstring: Generate list of actions allowed\ndepending on agent's location."}
{"text_id": "8418", "text": "docstring: Write tensor in file format supported by TFLITE example."}
{"text_id": "8419", "text": "docstring: Handle rejected proposal from sampling phase."}
{"text_id": "8420", "text": "docstring: Test light curves from txt."}
{"text_id": "8421", "text": "docstring: Extract all genes in the selected cluster.\ncluster_id: the ID of the cluster.\nsp: genome assembly name.\nreturn: cluster_genes, a list of gene ensembl ids."}
{"text_id": "8422", "text": "docstring: Flatten the array to one dimension using the 'F' (Fortran) style and\nreturn a 2D array"}
{"text_id": "8423", "text": "docstring: The axis aligned bounding box of all the vertices as two\n3-dimensional arrays containing the minimum and maximum for each\naxis."}
{"text_id": "8424", "text": "docstring: Initialize the element by creating the proxy."}
{"text_id": "8425", "text": "docstring: Wait for nodes to be provisioned.\nLoops until all nodes finish provisioning."}
{"text_id": "8426", "text": "docstring: Return the resource corresponding to a single event."}
{"text_id": "8427", "text": "docstring: Will be called on sigtstp.\nDo whatever cleanup would allow the user to use other programs."}
{"text_id": "8428", "text": "docstring: Updates fields specified in ``include_fields`` from the source to current Document."}
{"text_id": "8429", "text": "docstring: Helper function to process measurement for CHP circuits.\nRecursively handles TensorProd > Composed > ComputationalBasis\nPOVM objects .\n\nParameters\n\nPOVM\nUnmarginalized POVM to process\n\nLabel\nPOVM label, which may include StateSpaceLabels that result\nin POVM marginalization\n\nTextIOWrapper\nOpen file handle for dumping CHP strings"}
{"text_id": "8430", "text": "docstring: Verifies the expected output text is flushed by the console task under test.\nNB: order of entries is not tested, just presence."}
{"text_id": "8431", "text": "docstring: Creates a temporary folder containing a set of test templates.\nThe templates to copy can be passed in by using the tpl_repo_contents mark.\n\nUsed for testing installation of template directories."}
{"text_id": "8432", "text": "docstring: Create a subgraph specification from a predefined version in the DB.\nParameters\n\npredef : :class:`predef_subgraph_spec`\nA predefined subgraph specification in the DB."}
{"text_id": "8433", "text": "docstring: Parses train.py parameters (train_args) from config file located at\nself.config_path and returns a ilurl.params.TrainParams object\nwith the parsed parameters."}
{"text_id": "8434", "text": "docstring: Creates a new user or updates an existing user via the API."}
{"text_id": "8435", "text": "docstring: Convert fields and filters from strings to list, dicts"}
{"text_id": "8436", "text": "docstring: Send batch ticket change notification e-mail (untranslated)"}
{"text_id": "8437", "text": "docstring: Async function definition is the same thing as the synchronous\none."}
{"text_id": "8438", "text": "docstring: Register 0 or more blueprints (mutates the app passed to it)."}
{"text_id": "8439", "text": "docstring: Computes the standard statistics of the market\nParameters\n\nreservation_prices (dict, optional) :\nthe reservation prices of the users. If there is none,\nthe bid will be assumed truthfull\nreservation_prices :\n(Default value = None)\nexclude :\nList of mechanisms to ignore will comuting statistics\n\nReturns\n\nstats : dict\nDictionary with the differnt statistics."}
{"text_id": "8440", "text": "docstring: Returns a list of users in the group."}
{"text_id": "8441", "text": "docstring: Trains the model and generates dinosaur names.\n\n- learned parameters"}
{"text_id": "8442", "text": "docstring: Parameters\n\nstr\nThe dll directory containing\nDLL's that should be visible to\nPython DLL's loaded by Python."}
{"text_id": "8443", "text": "docstring: Serves as a guard/filter to distinguish appendix amendments from\namendments to other parts of the reg"}
{"text_id": "8444", "text": "docstring: To load a plugin again. if you have unloaded it"}
{"text_id": "8445", "text": "docstring: Add edges from an iterable of pairs of nodes.\nAll edges with default weight of 1.0."}
{"text_id": "8446", "text": "docstring: Two-power law top hat surface density profile with Gaussian\nscale height."}
{"text_id": "8447", "text": "docstring: Open GLDAS datasets and return precipitation and temperature"}
{"text_id": "8448", "text": "docstring: Reduces word embeddings to rows in vocab"}
{"text_id": "8449", "text": "docstring: Return the hosts found in the hosts file in as an OrderedDict"}
{"text_id": "8450", "text": "docstring: Adds security marks to a finding."}
{"text_id": "8451", "text": "docstring: Returns raw CSV content of the log file."}
{"text_id": "8452", "text": "docstring: Clear all the sequences of the sequences viewer"}
{"text_id": "8453", "text": "docstring: Extract the gestational age (GA) in weeks and days from a\nmatch of the corrected GA (CGA)"}
{"text_id": "8454", "text": "docstring: Returns a tuple of per-host NID strings tuples"}
{"text_id": "8455", "text": "docstring: Helper method to create a series of balances that includes some misc. balances but\nnone that are below the ``EJECTION_BALANCE``."}
{"text_id": "8456", "text": "docstring: Compute the derivatives of the least-squares vector of this objective function.\nNote that because each `lsvec` element only depends on the corresponding probability,\nthis is just an element-wise derivative (or, the diagonal of a jacobian matrix),\ni.e. the resulting values are the derivatives of the `local_function` at\neach (probability, count, total-count) value.\n\nParameters\n\nprobs : numpy.ndarray\nArray of probability values.\n\ncounts : numpy.ndarray\nArray of count values.\n\ntotal_counts : numpy.ndarray\nArray of total count values.\n\nfreqs : numpy.ndarray\nArray of frequency values.  This should always equal `counts / total_counts`\nbut is supplied separately to increase performance.\n\nintermediates : tuple, optional\nUsed internally to speed up computations.\n\nReturns\n\nnumpy.ndarray\nA 1D array of length equal to that of each array argument."}
{"text_id": "8457", "text": "docstring: Initializes the database\nThis command creates a new (or refreshes the existing) database\nschema and places it under SqlAlchemy version control."}
{"text_id": "8458", "text": "docstring: Randomizes the contents of a Category proto conformant to the spec."}
{"text_id": "8459", "text": "docstring: Validate the inputs of a ternary generic array operation"}
{"text_id": "8460", "text": "docstring: Gathers the data from the specified minions' mine"}
{"text_id": "8461", "text": "docstring: Return a list of the keys"}
{"text_id": "8462", "text": "docstring: Fetch and download binary data at URL."}
{"text_id": "8463", "text": "docstring: This fixture is automatically run to clear out the events registered before and after a test function runs."}
{"text_id": "8464", "text": "docstring: Find the corresponding ecoinvent region given an IAM region."}
{"text_id": "8465", "text": "docstring: Returns the fully constructed MDP diagram which is connected to the\nvector source for simulation. Each subclass should implement this\nmethod."}
{"text_id": "8466", "text": "docstring: Rerun the analysis of single scans."}
{"text_id": "8467", "text": "docstring: Fetch and parse the actual alarm status page."}
{"text_id": "8468", "text": "docstring: Add availability zones to an existing Load Balancer\nAll zones must be in the same region as the Load Balancer\nAdding zones that are already registered with the Load Balancer\nhas no effect."}
{"text_id": "8469", "text": "docstring: Checks if there is duplicate in input array"}
{"text_id": "8470", "text": "docstring: Read in a .csv file from the KuLGaP web application as a byte stream and parses that .csv into a\n`TreatmentResponseExperiment` object. Then computes summary statistics, builds a DataFrame and JSONizes\nthe DataFrame, returning the JSON string.\n\n:param csv_byte_stream [bytes] A byte stream passed from the web application containing the .csv data for\na PDX experiment.\n:return [TreatmentResponseExperiment] object containing the data from the .csv byte stream"}
{"text_id": "8471", "text": "docstring: Plot ycols of dataframe vs x contained in its index, with optional y data manipulation"}
{"text_id": "8472", "text": "docstring: Gets a list of managed instance administrators."}
{"text_id": "8473", "text": "docstring: Quantize embedding weights and write to binary file."}
{"text_id": "8474", "text": "docstring: Stops and/or removes a docker container for a specific lambda function ARN."}
{"text_id": "8475", "text": "docstring: formats the image channels based on config"}
{"text_id": "8476", "text": "docstring: Get a sensor reading using Micropython API\nReturn 0-1024 direct ADC (0~3.3v) reading"}
{"text_id": "8477", "text": "docstring: A utility function to perform common verification steps."}
{"text_id": "8478", "text": "docstring: Loads a coordinate variable from the source data and returns it."}
{"text_id": "8479", "text": "docstring: Convert an iterable of ids to their corresponding words using a dictionary.\nThis function abstracts away the differences between the HashDictionary and the standard one."}
{"text_id": "8480", "text": "docstring: Print out the sorted list with duplicates removed, one per line"}
{"text_id": "8481", "text": "docstring: Clears the database name and cache prefix on response.\nThis is a precaution against the connection being reused without\nfirst calling set_dbname."}
{"text_id": "8482", "text": "docstring: Creates an oemof Transformer component from information given in\nthe AirSourceHeatPump class, to be used in the oemof model"}
{"text_id": "8483", "text": "docstring: Predict class probabilities for X in 'soft' voting"}
{"text_id": "8484", "text": "docstring: Fit given data to functions in fit_functions. Creates a folder for each given function in \"path\". A plot of\ninput data the least square fit and the optimal parameters is saved as png.\n\nParameters\n\n"}
{"text_id": "8485", "text": "docstring: the missing values are handled by removing the rows since the\nnumber of rows with missing values is very less"}
{"text_id": "8486", "text": "docstring: \n\nA primary key is something like an index, but its main purpose is to\nlink different tables together. This allows searches to be executed on\nmultiple tables that represent maybe different data about the same\nobjects.\n\n\n\nThis function only changes the column to be non-primary, it does not\ndelete it.\n\n\n\n"}
{"text_id": "8487", "text": "docstring: Check if a file is ignored.\nIf the file does not exist its size is assumed to be 0."}
{"text_id": "8488", "text": "docstring: Marks the entire current flash or a single value as *used*, so when\nthe next request hit the server, those values will be automatically\nremoved from this flash by :class:`FlashMiddleware`."}
{"text_id": "8489", "text": "docstring: Returns flag indicating whether finalised deploy event has already been processed."}
{"text_id": "8490", "text": "docstring: Returns the exception occurred during the login attempt, if any, otherwise None."}
{"text_id": "8491", "text": "docstring: Ordered cells adjacent to edge u-v.\nParameters\n\nu : hashable\nThe identifier of the first vertex.\nv : hashable\nThe identifier of the second vertex.\n\nReturns\n\nlist\nOrdered List of keys identifying the adjacent cells."}
{"text_id": "8492", "text": "docstring: Gets rid of noise, where possible. Currently just removes 'AUTO CR - LOG SUMMARY' lines"}
{"text_id": "8493", "text": "docstring: Returns parameters used for this model."}
{"text_id": "8494", "text": "docstring: Replace a series of URLs with the host_name"}
{"text_id": "8495", "text": "docstring: Calculate losses, and run actor iterations until reaching `actor_iterations`\nspecified earlier or reaching stop/ok conditions."}
{"text_id": "8496", "text": "docstring: Stop the master and activate current standby to master"}
{"text_id": "8497", "text": "docstring: The first error path in this collection."}
{"text_id": "8498", "text": "docstring: Convert the hypoDD reloc file into fdsn\nformat that could be read by zmap"}
{"text_id": "8499", "text": "docstring: Call an Aca-Py tenant endpoint using GET method."}
{"text_id": "8500", "text": "docstring: @description Saves a model's parameters.\n\n@param model A sklearn model object\n\n@param descr Notes on the model\n\n@return A dataframe containing the model's parameters"}
{"text_id": "8501", "text": "docstring: Create the colander schema based on generator's factories"}
{"text_id": "8502", "text": "docstring: make a prediction based on trained model"}
{"text_id": "8503", "text": "docstring: Fire an event when property changed, calling all of the\nregistered callbacks."}
{"text_id": "8504", "text": "docstring: infer feature-set schema & stats from static dataframe (without pipeline)"}
{"text_id": "8505", "text": "docstring: Setup a psycopg2 connection with a Redshift database using supplied\ncredentials.\n\nNote that `server` must be a web address. You'll need to remove prefixes\nlike 'jdbc:sqlserver://'. Similarly, suffixes specifying the port and/or\ndatabase must also be removed."}
{"text_id": "8506", "text": "docstring: Validate the racer_info json we receive."}
{"text_id": "8507", "text": "docstring: This method ranks the non dominated fronts by omitting thr first front from the data\nand searching the remaining data for a new one recursively.\n@ In, data, np.array, data matrix (nPoints, nObjectives) containing the multi-objective\nevaluations of each point/individual, element (i,j)\nmeans jth objective function at the ith point/individual\n@ out, nonDominatedRank, list, a list of length nPoints that has the ranking\nof the front passing through each point"}
{"text_id": "8508", "text": "docstring: Check for new videos\nIf one or more videos have been found, notice them to the\nchannel(s) and return the quantity of published videos."}
{"text_id": "8509", "text": "docstring: Create a heterograph that has one set of source nodes, one set of\ndestination nodes and one set of edges.\n\nParameters\n\nnx_graph : NetworkX graph\nThe input graph must follow the bipartite graph convention of networkx.\nEach node has an attribute ``bipartite`` with values 0 and 1 indicating\nwhich set it belongs to. Only edges from node set 0 to node set 1 are\nadded to the returned graph.\nutype : str\nSource node type name.\netype : str\nEdge type name.\nvtype : str\nDestination node type name.\nedge_id_attr_name : str, optional\nKey name for edge ids in the NetworkX graph. If not found, we\nwill consider the graph not to have pre-specified edge ids.\n\nReturns\n\n"}
{"text_id": "8510", "text": "docstring: Takes a terminated ParsePath and checks if its denotation\ncan be finalized"}
{"text_id": "8511", "text": "docstring: Adds a guess and updates game state"}
{"text_id": "8512", "text": "docstring: This method convert nodes word lookup to nodes word index look up.\n:param node_lists:list: list of node lists"}
{"text_id": "8513", "text": "docstring: Indicates that tiles are always within the array bounds,\nresulting in tiles which have truncated halos.\nSee :ref:`the-halo-parameter-examples` examples."}
{"text_id": "8514", "text": "docstring: Queries cluster aggr for attributes.\nCurrently queries for raid and ha-policy."}
{"text_id": "8515", "text": "docstring: Get an expression to be inserted into the complete event\nhandler's head."}
{"text_id": "8516", "text": "docstring: Merge dictionary d2 in d1."}
{"text_id": "8517", "text": "docstring: Retrieve a list of nameditem objects."}
{"text_id": "8518", "text": "docstring: Find average fitness for a population"}
{"text_id": "8519", "text": "docstring: Try to guess the Arff filetype.\nIt usually starts with a \"format-version:\" string and has several stanzas which starts with \"id:\"."}
{"text_id": "8520", "text": "docstring: Splits the input tensor into several smaller tensors.\nWhen nsplits_or_sections is int, the last tensor may be smaller than others."}
{"text_id": "8521", "text": "docstring: Plot the average rewards plot for each experiment in exp_dir"}
{"text_id": "8522", "text": "docstring: Aggregates and averages a list of test results."}
{"text_id": "8523", "text": "docstring: Returns a metaclass that is conjunctive descendant of all metaclasses used by parent\nclasses."}
{"text_id": "8524", "text": "docstring: MtgaZone has landing page for archetype with many decks: this function returns the page text of the first deck in\nthe archetype url; if it finds no deck link it returns the input (in case the page is already the correct one)."}
{"text_id": "8525", "text": "docstring: Writes metadata to the output stream if output is not suppressed."}
{"text_id": "8526", "text": "docstring: Called before processing all the groups. It calls `group_pre` for each\ngroup in DAG order."}
{"text_id": "8527", "text": "docstring: Collects paths to all the pattern files in given folder"}
{"text_id": "8528", "text": "docstring: To add the coverage object in contained list and link\nthe id as reference to claim.insurance.coverage"}
{"text_id": "8529", "text": "docstring: Get information from a pathway network."}
{"text_id": "8530", "text": "docstring: Returns a string saying how close they are to discovery."}
{"text_id": "8531", "text": "docstring: Calculate the DTW costs between a list of references and hypotheses"}
{"text_id": "8532", "text": "docstring: Iterate over the nodes reachable from any of the given roots."}
{"text_id": "8533", "text": "docstring: Cash Analysis  # noqa: E501\nAnalyze cash activity over time  # noqa: E501\nThis method makes a synchronous HTTP request by default.\n\n"}
{"text_id": "8534", "text": "docstring: Fetch historical data for a financial instrument."}
{"text_id": "8535", "text": "docstring: Returns True if this expression has no side effects that\nwould prevent re-ordering."}
{"text_id": "8536", "text": "docstring: Clone the bias and running mean from the actor and critic networks and actor-target and critic-target networks."}
{"text_id": "8537", "text": "docstring: Adds the given elements to a visgroup, if it doesn't exist one is created"}
{"text_id": "8538", "text": "docstring: Plots a histogram of DATASOURCE, binned using BINNING.\nThe figure is saved to OUTPUT.png.\n\nFor multi-dimensional data, each pair of resources is plotted as a 2D histogram.\n\nBINNING can be a path to a previously created binning, or custom bin edges\nin all dimension: dimensions are separated by colons, edge values in\neach dimension are separated by commas."}
{"text_id": "8539", "text": "docstring: Change the name of one the agent, whose ID is given."}
{"text_id": "8540", "text": "docstring: removes special \"_id\" from entries returned from MongoDB"}
{"text_id": "8541", "text": "docstring: Construct Protobuf message for Python data reader.\nThe Python data reader will import the current Python file to\naccess the sample access functions."}
{"text_id": "8542", "text": "docstring: PV from which to trigger the creation of a log file"}
{"text_id": "8543", "text": "docstring: Returns a list of map classes from one name or file path"}
{"text_id": "8544", "text": "docstring: Transforms logarithmic transition probabilities a and b."}
{"text_id": "8545", "text": "docstring: Regiesters a bunch of metrics for Sanic server\n(request latency, count, etc) and exposes /metrics endpoint\nto allow Prometheus to scrape them out."}
{"text_id": "8546", "text": "docstring: Return the key given the appearances of the span."}
{"text_id": "8547", "text": "docstring: Return the adjacency matrix of edges of the given edge type.\nBy default, a row of returned adjacency matrix represents the\ndestination of an edge and the column represents the source.\n\nWhen transpose is True, a row represents the source and a column\nrepresents a destination.\n\nParameters\n\ntranspose : bool, optional\nA flag to transpose the returned adjacency matrix. (Default: False)\nctx : context, optional\nThe context of returned adjacency matrix. (Default: cpu)\nscipy_fmt : str, optional\nIf specified, return a scipy sparse matrix in the given format.\nOtherwise, return a backend dependent sparse tensor. (Default: None)\netype : str, optional\nThe edge type. Can be omitted if there is only one edge type\nin the graph. (Default: None)\n\nReturns\n\nSparseTensor or scipy.sparse.spmatrix\nAdjacency matrix.\n\nExamples\n\nInstantiate a heterogeneous graph.\n\n\n\nGet a backend dependent sparse tensor. Here we use PyTorch for example.\n\n\n\nGet a scipy coo sparse matrix.\n\n"}
{"text_id": "8548", "text": "docstring: Setup so the gain is always specified at the ref"}
{"text_id": "8549", "text": "docstring: Delete region translation\nResponse 204 NO CONTENT"}
{"text_id": "8550", "text": "docstring: Initialization helper function that does the following:\n(1) replicating the module from device[0] to the other devices\n(2) bucketing the parameters for reductions\n(3) resetting the bucketing states\n(4) registering the grad hooks\n(5) passing a handle of DDP to SyncBatchNorm Layer"}
{"text_id": "8551", "text": "docstring: Create a URL to the Tool Results UI for a test."}
{"text_id": "8552", "text": "docstring: Returns 1 if X has won the game, -1 if O has won, 0 otherwise."}
{"text_id": "8553", "text": "docstring: msg_bus_subscriber is the ZeroMQ callback to\nsubscribe to classified results"}
{"text_id": "8554", "text": "docstring: Check victim's available_actions until the desired action is available\nor the timeout is reached, filtering on action keys: class_name, state."}
{"text_id": "8555", "text": "docstring: Request states from the state manager. In order for this do have any effect\nall required states have to be registered:.\n\n"}
{"text_id": "8556", "text": "docstring: reshape a result to the original shape of the Point Set"}
{"text_id": "8557", "text": "docstring: Helper function to define class properties."}
{"text_id": "8558", "text": "docstring: Parses the input and returns a LanternfishCounter"}
{"text_id": "8559", "text": "docstring: r\"\"\"Checks whether the member is boosting the guild.\nReturns"}
{"text_id": "8560", "text": "docstring: Remove router(VPC) from private zone"}
{"text_id": "8561", "text": "docstring: Get list of all config rules in Citizen Cloud Formation"}
{"text_id": "8562", "text": "docstring: This method is called from upload_file_view.py to process (parse) the file that the user selected."}
{"text_id": "8563", "text": "docstring: Yields samples from `model`, in autoregressive language model fashion.\nThis function uses `model` to generate outputs one position at a time, with\naccess to inputs for the current position and all preceding positions. The\nnew output becomes the next position's input, and further calls to\n`autoregressive_sample_stream` repeat the process for successive positions\nindefinitely.\n\nInputs and outputs always come in batches, even if size 1."}
{"text_id": "8564", "text": "docstring: Function returning Createc channel ADC value\nNote that the kelvin param is for the old software.\nFor the new version STMAFM 4.3, only ADC values are meant to be read out.\n\nParameters\n\nstm : createc.CreatecWin32\nCreatec instance\nchannel : int\nChannel number\nboard : int\nBoard number\nkelvin : bool\nWhether it is for temperature\n\nReturns\n\ndata : str"}
{"text_id": "8565", "text": "docstring: Builds the LUNA analyzer applet and configures the FPGA with it."}
{"text_id": "8566", "text": "docstring: Main function that handles dicom image conversions. Calls Converter class from thicom.converter.\nRequires numpy for manipulation, scipy for saving. If the image is compressed it will attempt to\ndecompress it first using thicom.decomp (requires Linux OS with gdcmconv tool). If the DICOM image\ncontaines multiple frames, a png image will be generated for each one.\n\nConverter Class' PNG naming convention:\nSeriesDescription_InstanceNumber.png, where SeriesDescription is the description of the MRI sequence\nand InstanceNumber is the number of the current image in the series .\n\nUse cases:\n>>> import thicom\n1."}
{"text_id": "8567", "text": "docstring: Convert the volume to be of the new type.\nReturns a boolean indicating whether the retype occurred."}
{"text_id": "8568", "text": "docstring: type text into the text field"}
{"text_id": "8569", "text": "docstring: Stops the monitor and all associated threads."}
{"text_id": "8570", "text": "docstring: Given the covariance matrix improve it, if it is not invertable\nor eigen values are negative or condition number that is above the limit"}
{"text_id": "8571", "text": "docstring: The function to empty the truck and return the list of consignments assigned to it"}
{"text_id": "8572", "text": "docstring: Return true if path is dir and has at least one childs directory"}
{"text_id": "8573", "text": "docstring: Generation queue handler.\nCatch queue argument and update last message time for this queue."}
{"text_id": "8574", "text": "docstring: Locate the .gitattributes file\nreturns None if not in a git repo and scope=None"}
{"text_id": "8575", "text": "docstring: Check if tesseroids boundaries are well defined\nParameters\n\n"}
{"text_id": "8576", "text": "docstring: Query for data using server specific HTTP GET key,value pairs.\nThis function is called by query() to communicate with an HTTP server.\nUnless you need to issue server specific GET values  (maybe due to a\nmisconfigured catalog entry) use query() instead of calling this function\ndirectly."}
{"text_id": "8577", "text": "docstring: Create a smooth L1 loss functor.\nParameters\n\nsigma : float\nThis argument defines the point where the loss changes from L2 to L1.\n\nReturns\nA functor for computing the smooth L1 loss given target data and\npredicted data."}
{"text_id": "8578", "text": "docstring: Scales quantity to obtain dimensionful quantity."}
{"text_id": "8579", "text": "docstring: Return the amount of hops until target is reached."}
{"text_id": "8580", "text": "docstring: A dictionary of quantities describing this budget.\nReturn the contents of this budget in a dictionary containing\n(description, value) pairs for each element name.\n\nReturns\n\ndict"}
{"text_id": "8581", "text": "docstring: Shows the user their portfolio balance in the form of a graph"}
{"text_id": "8582", "text": "docstring: > JobMonitor\nReturns the JobMonitor for the associated controller if it exists"}
{"text_id": "8583", "text": "docstring: Override `autosave` and change diff as the user types."}
{"text_id": "8584", "text": "docstring: Fetch a Dataframe with data from JHU CSSE COVID-19 Data.\nThe full repository name is COVID-19 Data Repository by the Center for Systems Science and Engineering (CSSE) at\nJohns Hopkins University.\n\nCf."}
{"text_id": "8585", "text": "docstring: Function which informs people that you are AFK in PM"}
{"text_id": "8586", "text": "docstring: Transform a date object to an str object."}
{"text_id": "8587", "text": "docstring: Wells use absolute scaling. Scale to `coord_type` instead."}
{"text_id": "8588", "text": "docstring: The unitary operator dimensions for all the tensor-product blocks.\nReturns\n\ntuple of tuples"}
{"text_id": "8589", "text": "docstring: Should be a generator function. Don't yield values (they'll be ignored)."}
{"text_id": "8590", "text": "docstring: Take an instance of a BigQuery client and wrap the query and result methods with methods that call the Querius API."}
{"text_id": "8591", "text": "docstring: Write all model parameters (name, shape) to the log."}
{"text_id": "8592", "text": "docstring: Sets the initial state of the device."}
{"text_id": "8593", "text": "docstring: Returns a list of databases that are owned by this cluster and were followed by another\ncluster."}
{"text_id": "8594", "text": "docstring: Login endpoint for both client and manager"}
{"text_id": "8595", "text": "docstring: Fetches the count of comments on some content."}
{"text_id": "8596", "text": "docstring: Export environment variables from file\nenv_file : pathlib.Path\npath to file with environment variables"}
{"text_id": "8597", "text": "docstring: Allow user to correct detected transit modes and line names."}
{"text_id": "8598", "text": "docstring: Query an ESRI map server for a vector layer and return a geojson structured dict.\nParameters\n\nbase_url : str\nThe base url for the map server up to the layer_id.\nlayer_id : str or int\nThe layer id.\nout_fields : None or list of str\nThe output fields to be returned. The geometry will always be returned. None will return all fields.\nwhere : None or str\nThe SQL style 'where' clause to query the layer. None will have no filters.\n\nReturns\n\nDict\nIn GeoJSON structure"}
{"text_id": "8599", "text": "docstring: Compute the semi-binary contact map of cofactor-cofactor and cofactor-protein interactions using the\ncofactor interactor indices. The final contact map has elements of the interactors, not the specific cofactor residues."}
{"text_id": "8600", "text": "docstring: Writes a pandas dataframe to a parquet file in HDFS. Overwrites the file if it already exists"}
{"text_id": "8601", "text": "docstring: Displays a hot-key for the specified interface item"}
{"text_id": "8602", "text": "docstring: Apply front-end processes to a signal and return the output.\nThe front-end consists of the full ARA electronics chain (including\namplification) and signal clipping. Does not include the extra\namplification and envelope circuit.\n\nParameters\n\nsignal : Signal\n``Signal`` object on which to apply the front-end processes.\n\nReturns\n\nSignal\nSignal processed by the ARA antenna front end.\n\nSee Also\n\npyrex.custom.ara.antenna.ARAAntennaSystem.front_end :\nApply front-end processes to a signal and return the output."}
{"text_id": "8603", "text": "docstring: fetch a remote file using aria2."}
{"text_id": "8604", "text": "docstring: This builds an integer crosswalk ID table with a field that stores categorical\ninformation in the fewest number of bytes. This is important because it can take\nsignificant amounts of time to group across categories if they are large:\nfor example, with 4 million newspaper articles, on one server a GROUP BY with\na 12-byte VARCHAR field takes 5.5 seconds, but a GROUP BY with a 3-byte MEDIUMINT\nfield corresponding exactly to that takes 2.2 seconds on the exact same data.\nThat sort of query is included in every single bookworm\nsearch multiple times, so it's necessary to optimize. Plus, it means we can save space on memory storage\nin important ways as well."}
{"text_id": "8605", "text": "docstring: Installs a font in static/fonts"}
{"text_id": "8606", "text": "docstring: Copies a file from the src_vm to the dest_vm."}
{"text_id": "8607", "text": "docstring: Read the unmapped/raw value from the device.\nMust be implemented in derived classes!"}
{"text_id": "8608", "text": "docstring: Resets the OpenAI gym environment to start a new episode.\nBy default this function will create a new log file for every\nepisode, if the intention is to log only full trials then\ncomment the 3 lines below contianing self.outfile and\nself.create_file."}
{"text_id": "8609", "text": "docstring: Calculate information states recursively for the state. Fill in the\nstate_data."}
{"text_id": "8610", "text": "docstring: Save image with given filename."}
{"text_id": "8611", "text": "docstring: Moves vector sprites away from each other in small increments"}
{"text_id": "8612", "text": "docstring: Read a file and return the resulting data."}
{"text_id": "8613", "text": "docstring: Converts C map pointer to python dict"}
{"text_id": "8614", "text": "docstring: Handler for end of XML element."}
{"text_id": "8615", "text": "docstring: Get index of queue stream."}
{"text_id": "8616", "text": "docstring: Return the filename of the source file for the document"}
{"text_id": "8617", "text": "docstring: Insert values into a table."}
{"text_id": "8618", "text": "docstring: Returns the URL's cursor query given its current value"}
{"text_id": "8619", "text": "docstring: Handle promoting users to admins request."}
{"text_id": "8620", "text": "docstring: returns the maximal value of B for unbalanced max kappa_out\nsoutions."}
{"text_id": "8621", "text": "docstring: Creates a new distributed group.\nThis function requires that all processes in the main group  enter this function, even\nif they are not going to be members of the group. Additionally, groups\nshould be created in the same order in all processes."}
{"text_id": "8622", "text": "docstring: Initializes weights from pickled python dictionaries.\nInputs:\nsession: tf.Session, Tensorflow session object containing the network graph\nweight_files: list of str, Paths to the pickle files that are used to initialize network weights\nexclude_var_list: list of str, Weights that should not be loaded"}
{"text_id": "8623", "text": "docstring: Delete a view from a map. You cannot delete the last view in a map."}
{"text_id": "8624", "text": "docstring: Tests ``FromList`` raises exception when lengths mismatch."}
{"text_id": "8625", "text": "docstring: Iterate over all Field objects within, including multi fields."}
{"text_id": "8626", "text": "docstring: Clears from GLOBALS all existing `mat_db` variables!"}
{"text_id": "8627", "text": "docstring: Create a fake session and copy user files"}
{"text_id": "8628", "text": "docstring: Collects all stack frames that Scalene actually processes."}
{"text_id": "8629", "text": "docstring: Generate a UUID and store it in the session."}
{"text_id": "8630", "text": "docstring: Return dict representation of group data and file data."}
{"text_id": "8631", "text": "docstring: Group tensors together.\nThis creates a tuple of tensors with the same values as the `tensors`\nargument, except that the value of each tensor is only returned after the\nvalues of all tensors have been computed.\n\n`control_inputs` contains additional ops that have to finish before this op\nfinishes, but whose outputs are not returned.\n\nThis can be used as a \"join\" mechanism for parallel computations: all the\nargument tensors can be computed in parallel, but the values of any tensor\nreturned by `tuple` are only available after all the parallel computations\nare done.\n\nSee also `group` and `with_dependencies`."}
{"text_id": "8632", "text": "docstring: Updates the cost limit and removes any nodes that violate the new\nlimit."}
{"text_id": "8633", "text": "docstring: Returns the core file name component for products produced by the\nBase PGE. This function should typically be overridden by inheritors\nof PostProcessorMixin to accomplish the specific file-naming conventions\nrequired by the PGE.\n\nThe core file name component of the Base PGE consists of.\n\n\n\nCallers of this function are responsible for assignment of any other\nproduct-specific fields, such as the file extension.\n\nParameters\n\ninter_filename : str, optional\nThe intermediate filename of the output product to generate the\ncore filename for. This parameter may be used to inspect the file\nin order to derive any necessary components of the returned filename.\nFor the base PGE, this parameter is unused and may be omitted.\n\nReturns\n\ncore_filename : str\nThe core file name component to assign to products created by this PGE."}
{"text_id": "8634", "text": "docstring: Checks for confirmation of modifying a given Msg object"}
{"text_id": "8635", "text": "docstring: Functions as `next' for value-accepting generators."}
{"text_id": "8636", "text": "docstring: Clean the current sys.path and sys.modules from anything to do with MODULENAME."}
{"text_id": "8637", "text": "docstring: This function sets up QCoDeS to refer to the given database file. If the\ndatabase file does not exist, it will be initiated."}
{"text_id": "8638", "text": "docstring: Return the scaling governor of a logical core."}
{"text_id": "8639", "text": "docstring: For removing liquidity this function returns the amount of token UNI_Q for the respective asset depending on the policy_input"}
{"text_id": "8640", "text": "docstring: Select between gunicorn and paste depending on what ia available"}
{"text_id": "8641", "text": "docstring: Run the acQuire Selection Tool."}
{"text_id": "8642", "text": "docstring: Return a compact version of the struct. In case the struct was inside a\nbigger message, it \"extracts\" it into a new message which contains\nonly the needed pieces."}
{"text_id": "8643", "text": "docstring: Update alertmanager.yml config file to reflect changes in configuration.\nArgs:\nrestart_on_failure: a flag indicating if the service should be restarted if a config\nhot-reload failed.\n\nTrue if unchanged, or if changed successfully; False otherwise"}
{"text_id": "8644", "text": "docstring: Return sequnce counter in ms. Always unique."}
{"text_id": "8645", "text": "docstring: Fired when the user selects a piece of data on a different view\n(the AMSC must store this somehow?)"}
{"text_id": "8646", "text": "docstring: Direct API method to delete a user."}
{"text_id": "8647", "text": "docstring: Helper method to check if notifications for user exists."}
{"text_id": "8648", "text": "docstring: This function is used to remember how an user categorized a certain transaction, so that the next time\nthe bot sees the transaction the bot will be able to categorize it automatically.\n\n"}
{"text_id": "8649", "text": "docstring: Parse text in TEXT containing balanced expressions surrounded by single\nor double braces or brackets.  This is a generator; it successively yields\nchunks of text consisting either of sections without any braces or brackets,\nor balanced expressions delimited by single or double braces or brackets, or\nunmatched single or double right braces or brackets.  TEXTRE is used to\nseparate the text into chunks; it can be used to separate out additional\ntop-level separators, such as vertical bar."}
{"text_id": "8650", "text": "docstring: Adds command line arguments to the runtime.\nExisting arguments will be preserved.\nThis method can be called (chained) multiple times to add various arguments.\n\nParameters\n\nPositional arguments.\nIn a single method call, positional arguments are always added before keyword arguments.\nYou can call with_argument() to add positional arguments after keyword arguments.\n\nKeyword arguments.\nTo add a keyword argument without value, set the value to None.\n\nReturns\n\nRuntime\nThis method returns self to support chaining methods.\n\nRaises\n\nValueError\nKeyword arguments with space in a key."}
{"text_id": "8651", "text": "docstring: Only keep idx that match the person ids in `keep_person_idxs`."}
{"text_id": "8652", "text": "docstring: Returns the start of the year, i.e. the 1st January of the current date,\nthen optionally offset by :code:`offset` years.\n\nParameters\n\ndate : datetime.date\nthe date from which to compute the start of the year\noffset : int, optional\nan offset from the start of the year of the date\n\nReturns\n\ndatetime.date\nThe start of the year"}
{"text_id": "8653", "text": "docstring: Predfined case/pan/zooms of the compraison diagram below."}
{"text_id": "8654", "text": "docstring: Generates a time with a random time attribute and returns it"}
{"text_id": "8655", "text": "docstring: Wrapper to force_set element via javascript if needed"}
{"text_id": "8656", "text": "docstring: Displays error message (if any)"}
{"text_id": "8657", "text": "docstring: Text-wrap a string, returning a list of wrapped lines."}
{"text_id": "8658", "text": "docstring: Load the selected file and return to core state."}
{"text_id": "8659", "text": "docstring: Add friendship to db from friendinvite passed in and\nremove friendinvite from db."}
{"text_id": "8660", "text": "docstring: Register as a server that handles a particular GPIB device(s).\nReturns a list with information about all matching devices that\nhave been connected up to this point:\n[(device name, gpib server name, gpib channel, bool)]\n\nAfter registering, messages will be sent to the registered\nmessage ID whenever a matching device connects or disconnects.\nThe clusters sent in response to this setting and those sent as\nmessages have the same format.  For messages, the final boolean\nindicates whether the device has been connected or disconnected,\nwhile in response to this function call, the final boolean is\nalways true, since we only send info about connected devices.\n\nThe device name is determined by parsing the response to a *IDN.\nquery.  To handle devices that don't support *IDN. correctly, use\nthe 'Register Ident Function' in addition."}
{"text_id": "8661", "text": "docstring: Trim struct ndarrays to their final size"}
{"text_id": "8662", "text": "docstring: Adds a leaving group with single attachment point."}
{"text_id": "8663", "text": "docstring: Parse the command and sub_commands from the given content.\ntodo: consider supporting command aliases without copy and pasting entire command patterns\n\n:param content; the content to parse.\n:return: the parsed command, and the index of the next meaningful character in the string."}
{"text_id": "8664", "text": "docstring: check if the input buffer is finished"}
{"text_id": "8665", "text": "docstring: Load files, run filters, allow user to view anagrams by 1st letter."}
{"text_id": "8666", "text": "docstring: Evaluates the models performance by predicting on X_test. Prints out the\nclassification report for all categories and the best found parameters."}
{"text_id": "8667", "text": "docstring: int and long values are written using variable-length, zig-zag coding."}
{"text_id": "8668", "text": "docstring: Compute reweight_factor for regression and classification loss."}
{"text_id": "8669", "text": "docstring: Run a frame (typically belonging to a method)."}
{"text_id": "8670", "text": "docstring: Returns the acceleration along the x axis of the aircraft in\nmeters/sec^2"}
{"text_id": "8671", "text": "docstring: Infer the schema of a Spark SQL `DataFrame` object."}
{"text_id": "8672", "text": "docstring: Build forward index from ARFF file"}
{"text_id": "8673", "text": "docstring: Compute the pool age moment vectors up to ``up_to_order`` over\nthe time grid by an ODE system.\n\nThis function solves an ODE system to obtain the pool age moments very\nfast. If the system has empty pools at the beginning, the semi-explicit\nformula is used until all pools are non-empty. Then the ODE system\nstarts."}
{"text_id": "8674", "text": "docstring: The hybrid KB/Pareto solver API. It calls KB solver for worst cases of Pareto."}
{"text_id": "8675", "text": "docstring: Called when a mouse cursor is moving in the widget.\nAdjust method signature as appropriate for callback."}
{"text_id": "8676", "text": "docstring: r\"\"\"Retrieves an aggregated list of forwarding rules."}
{"text_id": "8677", "text": "docstring: Delete profile file, and remove associated key in profiles list"}
{"text_id": "8678", "text": "docstring: This command is used to schedule downtime for\nall services associated with a particular host.\n\nDuring the specified downtime, Nagios will not send\nnotifications out about the host.\n\n"}
{"text_id": "8679", "text": "docstring: New user registration view.\nAccess only for admin.\nIf the user tries to enter this route without logging in, he will be automatically redirected to the login page.\nIf the user tries to enter this route without permission(user is not admin),\nhe will be automatically redirected to the cabinet page.\nMethods: GET, POST"}
{"text_id": "8680", "text": "docstring: Returns True if two-step authentication is required."}
{"text_id": "8681", "text": "docstring: Update parameters of existing WEBP image.\n:param request modify_web_p_request object with parameters\n:return: file"}
{"text_id": "8682", "text": "docstring: Specifies the Git repository and branch/commit for the job source code.\nParameters\n\nurl : str\nURL of the Git repository.\nbranch : str, optional\nGit branch name, by default None, the default branch will be used.\ncommit : str, optional\nGit commit ID (SHA1 hash), by default None, the most recent commit will be used.\nsecret_ocid : str\nThe secret OCID storing the SSH key content for checking out the Git repository.\n\nReturns\n\nself\nThe runtime instance."}
{"text_id": "8683", "text": "docstring: Produce image object classification predictions\nParameters\n\ninputs : feature dataframe\n\nReturns\n\noutput : A dataframe with image labels/classifications/cluster assignments"}
{"text_id": "8684", "text": "docstring: Find an entry given a string (the term to be found)"}
{"text_id": "8685", "text": "docstring: The vina scoring function (lower is better) is a hybrid function described in doi: 10.1002/jcc.21334, PMID: 19499576"}
{"text_id": "8686", "text": "docstring: Function called when a new range was seen"}
{"text_id": "8687", "text": "docstring: Fork to the cluster for each sample and fragment"}
{"text_id": "8688", "text": "docstring: Nimby State: Machine is idle, host is unlocked,\nwaiting for user activity"}
{"text_id": "8689", "text": "docstring: Update a single learning-object."}
{"text_id": "8690", "text": "docstring: Event executed from `send_open()` to set additional information to newly\ncreated session instance."}
{"text_id": "8691", "text": "docstring: Runs a single ZenML step.\nSubclasses should in most cases not need to overwrite this method and\nimplement their custom logic in the `setup(...)` and `post_run(...)`\nmethods instead. If you still need to customize the functionality of\nthis method, make sure to still include all the existing logic as your\nstep won't be executed properly otherwise."}
{"text_id": "8692", "text": "docstring: Convert uri to buffer\nInternally it downloads from the URI and set :attr:`buffer`."}
{"text_id": "8693", "text": "docstring: Wait until the model is ready."}
{"text_id": "8694", "text": "docstring: Runs the compiled circuit\nreturns a qiskit results object\nUse get_result to get a single result"}
{"text_id": "8695", "text": "docstring: Delete external versions that have been marked as inactive after ``days``.\nThe commit status is updated to link to the build page, as the docs are removed."}
{"text_id": "8696", "text": "docstring: Computes the accuracy (fraction of correct classifications)."}
{"text_id": "8697", "text": "docstring: Matrix-matrix product for complex double precision triangular matrix.\nReferences\n\n`cublastrmm `_"}
{"text_id": "8698", "text": "docstring: Make a list of the mean dominant fraction at all possible numbers\nof ntop_factors"}
{"text_id": "8699", "text": "docstring: Helper function to turn either a figure, an axes, or a list of axes into a list of axes"}
{"text_id": "8700", "text": "docstring: Incoming connection, connect it if we have avaialble connections."}
{"text_id": "8701", "text": "docstring: Check whether or not a file is recognized as an a/v object."}
{"text_id": "8702", "text": "docstring: Ns x 2Nr array containing TPI of reaction k to variable i"}
{"text_id": "8703", "text": "docstring: Execute underlying contract method via eth_call."}
{"text_id": "8704", "text": "docstring: Yields a data loader given args and an explicit mode, such that we can do both\ntraining and validation splits without changing args."}
{"text_id": "8705", "text": "docstring: Check the state and sync_state from pg_stat_replication"}
{"text_id": "8706", "text": "docstring: Sets the minimum value for an ISlider interface item (can only be used for ZScript-generated interface items)"}
{"text_id": "8707", "text": "docstring: High-level parser function."}
{"text_id": "8708", "text": "docstring: Find all largest common subgraphs honoring constraints."}
{"text_id": "8709", "text": "docstring: Compute the multinomial negative log-likelihood along the sequence (axis=1)\nand sum the values across all each channels"}
{"text_id": "8710", "text": "docstring: Install a template function 'unrye' that gets the contents from a PGo."}
{"text_id": "8711", "text": "docstring: Reset the parameters of the module"}
{"text_id": "8712", "text": "docstring: Plot a geographical heatmap of the given metric."}
{"text_id": "8713", "text": "docstring: Perform simulation update for one time step."}
{"text_id": "8714", "text": "docstring: Constructs a ResNetV1b-34 model.\nParameters\n\npretrained : bool or str\nBoolean value controls whether to load the default pretrained weights for model.\nString value represents the hashtag for a certain version of pretrained weights.\nroot : str, default '~/.torch/models'\nLocation for keeping the model parameters.\ndilated: bool, default False\nWhether to apply dilation strategy to ResNetV1b, yielding a stride 8 model."}
{"text_id": "8715", "text": "docstring: Given a list of time stamps, a corresponding list of vals, a start time, and a number of times, this returns a list ordered correctly with missing values filled in"}
{"text_id": "8716", "text": "docstring: Gets the new_crash_id of this Crash."}
{"text_id": "8717", "text": "docstring: Returns the results of PRF photometry applied to the pixel file.\nParameters\n\ncadences : list of int\nCadences to fit.  If `None` (default) then all cadences will be fit.\nparallel : bool\nIf `True`, fitting cadences will be distributed across multiple\ncores using Python's `multiprocessing` module.\nkwargs : dict\nKeywords to be passed to `tpf.get_model()` to create the\n`TPFModel` object that will be fit.\n\nReturns\n\nresults : PRFPhotometry object\nObject that provides access to PRF-fitting photometry results and\nvarious diagnostics."}
{"text_id": "8718", "text": "docstring: Configure osmnx by setting the default global vars to desired values.\nParameters\n\n\n\nReturns\n\nNone"}
{"text_id": "8719", "text": "docstring: Left mouse button down. Prepare for possible drag."}
{"text_id": "8720", "text": "docstring: Convert a dict whose values\nare lists to a list of\ntuples of the key with\neach of the values"}
{"text_id": "8721", "text": "docstring: No Docs needed. Return asked attribute of the given exchange"}
{"text_id": "8722", "text": "docstring: Get or set the vertical scale."}
{"text_id": "8723", "text": "docstring: Parse a table from the given text."}
{"text_id": "8724", "text": "docstring: updateAliasesFromPipeline(self, pipeline) -> long\nThis will generate a new mashup by updating the aliases of the current\nmashup according to the aliases in a pipeline. This assumes that the\nmashup's current aliases are different from pipeline aliases by at most\none change"}
{"text_id": "8725", "text": "docstring: Open a contactless reader device identified by *path*."}
{"text_id": "8726", "text": "docstring: Handle a line of input.\nline -- 8-bit string containing one line of input.\n\nThe line may or may not contain the terminating newline. Any internal\nnewline is discarded.\n\nReturns a pair (response, end_session)\n\nresponse    -- the GTP response to be sent to the controller\nend_session -- bool\n\nresponse is normally a string containing a well-formed GTP response\n(ending with '\\n\\n'). It may also be None, in which case nothing at all\nshould be sent to the controller.\n\nIf end_session is true, the GTP session should be terminated."}
{"text_id": "8727", "text": "docstring: Removes gap only columns from the alignment.\nParameters\n\nnp.array\nThe alignment stored as a numpy array\nrelativePositions: list\nA list of integers representing columns in the alignment, from which\nvalues are removed as columns are removed from the alignment.\nrmfile: str\nPath to a file in which to store a list of removed sequences\nlog: logging.Logger\nAn open log file object\n\nReturns\n\nnp.array\nThe cleaned alignment stored as a numpy array\nr: set\nA set of column numbers of sequences which have been removed\nrelativePositions: list\nA list of integers representing columns in the alignment, from which\nvalues are removed as columns are removed from the alignment, minus\nthe columns removed using this function."}
{"text_id": "8728", "text": "docstring: constant folding, if all operands of an expression are a Constant do the math"}
{"text_id": "8729", "text": "docstring: Allows deletion of a user group"}
{"text_id": "8730", "text": "docstring: Collects and prints statistics about the number of players\nat each rank"}
{"text_id": "8731", "text": "docstring: Fetch, open, and load GSE brief metadata into attributes."}
{"text_id": "8732", "text": "docstring: I was kicked from a channel"}
{"text_id": "8733", "text": "docstring: Main function that parses the arguments and writes the output."}
{"text_id": "8734", "text": "docstring: Init the merger depending on if we are compiling a subdoc or the master\ndoc itself."}
{"text_id": "8735", "text": "docstring: Put data into the object from a source."}
{"text_id": "8736", "text": "docstring: Configures application.\nSets the basic auth. credentials and specifies json encoder class.\n\nReturns (Tuple):\nApplication and BasicAuth objects."}
{"text_id": "8737", "text": "docstring: : Update this with the values specified in the other sub-style.\nINPUT VARIABLES\nsubStyle    The sub-style whose values we are going to use to update\nthis sub-style."}
{"text_id": "8738", "text": "docstring: Write a duty cycle to the output pin"}
{"text_id": "8739", "text": "docstring: Write a content object that is submitted to the dynamodb_table.\nNote: this method does not store the data of the content itself\nIf we want to store the media itself that is done either:\nby a client using a presign url we give them\ndirect s3 put call in the case of raw bytes\nnot at all in the case of CDN-URL submission\n(WIP: possibly done after a match is found)\n\nThis function is also called directly by api_root when handling s3 uploads to partner\nbanks. If editing, ensure the logic in api_root.process_s3_event is still correct"}
{"text_id": "8740", "text": "docstring: The type of the ExpressRoute Circuit Peering."}
{"text_id": "8741", "text": "docstring: Get the IDs of the task states that are defined as \"closed\"."}
{"text_id": "8742", "text": "docstring: Generate a Single BiSBiS virtualizer, store and return with it."}
{"text_id": "8743", "text": "docstring: Return a json dictionary representing this model."}
{"text_id": "8744", "text": "docstring: Enters an interactive IPython shell."}
{"text_id": "8745", "text": "docstring: Clone the master repos to disk. The restore fixture is explicitly\nincluded as it must be run before this fixture."}
{"text_id": "8746", "text": "docstring: This function will train all ROMs if they are not converged\n@ In, samplerType, string, the type of sampler\n@ In, kwargs, dict,  is a dictionary that contains the information coming from the sampler,\na mandatory key is the sampledVars'that contains a dictionary {'name variable':value}\n@ Out, None"}
{"text_id": "8747", "text": "docstring: Get current timestamp in seconds."}
{"text_id": "8748", "text": "docstring: Apply display formats by row index, and set row index width\nExamples\n\n"}
{"text_id": "8749", "text": "docstring: Adds global SNMP read community."}
{"text_id": "8750", "text": "docstring: Create multiple DF join builder\nIt is used in conjunction with `joinWith` and `doJoin`"}
{"text_id": "8751", "text": "docstring: Save the classifier component to the given directory"}
{"text_id": "8752", "text": "docstring: Saves the list to a given filename"}
{"text_id": "8753", "text": "docstring: Read and return input batch from `p.file_pattern`.\nSame as _BuildDataSourceWithMetadata but does not return any metadata."}
{"text_id": "8754", "text": "docstring: Optimize the T (test locations for MeanEmbeddingTest, frequencies for\nSmoothCFTest) and the Gaussian kernel width by\nmaximizing the test power. X, Y should not be the same data as used\nin the actual test .\nOptimize the empirical version of Lambda(T) i.e., the criterion used\nto optimize the test locations.\n\nJxd numpy array. initial value of T,  where\nJ = the number of test locations/frequencies\ngwidth0: initial Gaussian width (width squared for the MeanEmbeddingTest)\nfunc_z: function that works on Theano variables\nto construct features to be used for the T^2 test.\n(X, Y, T, gaussian_width) |-> n x J'\nmax_iter: #gradient descent iterations\nbatch_proportion: (0,1] value to be multipled with nx giving the batch\nsize in stochastic gradient. 1 = full gradient ascent.\ntol_fun: termination tolerance of the objective value\nreg: a regularization parameter. Must be a non-negative number.\n\n"}
{"text_id": "8755", "text": "docstring: Return an axes of confidence bands using a bootstrap approach.\nNotes\n\nThe bootstrap approach iteratively resampling residuals.\nIt plots `nboot` number of straight lines and outlines the shape of a band.\nThe density of overlapping lines indicates improved confidence.\n\nReturns\n\nax : axes\nCluster of lines\nUpper and Lower bounds (high and low) (optional)  Note: sensitive to outliers\n\nReferences\n\n[1] J. Stults. \"Visualizing Confidence Intervals\", Various Consequences."}
{"text_id": "8756", "text": "docstring: Stringify an object for fortran-readable input."}
{"text_id": "8757", "text": "docstring: Function to extract a datetime from a dagman out file line\nParameters\n\nline : str\nAny line from a .dagman.out file.\n\nReturns\n\ndt : datetime.datetime\nDatetime stamp from line in out file."}
{"text_id": "8758", "text": "docstring: the name of the file that you want to gather data ex:\"data_tweets.json\".\nMaxSententences: a int between 0 and infinite (you are limited to 140 char so putting 99999 musn't be a good idea).\nreturn a tweet generated by the Makov chain (str)."}
{"text_id": "8759", "text": "docstring: Called with information about the server connected to."}
{"text_id": "8760", "text": "docstring: Start the exchange gateway\n:param instmt: Instrument\n:return List of threads"}
{"text_id": "8761", "text": "docstring: Returns a wrapper that changes the :attr:`voxelbotutils.Bot.guild_settings` internal cache.\nGives a nested function that takes a :code:`value` argument that acts as the data to delete."}
{"text_id": "8762", "text": "docstring: This function takes a list of input raster files, and uses\na gdal VRT to create a mosaic of all the inputs. This mosaic\nis then saved to the output location specified by out_path,\nas a single raster file.\n\nNote that global 250/500-m scale mosaics are large files, and\na single image may be more than 2 GB in size. Make sure that\nthere is sufficient disk space before calling this function.\n\nReturn value is the string passed to 'out_path'\n\n"}
{"text_id": "8763", "text": "docstring: Scan objects by cluster, sort by created"}
{"text_id": "8764", "text": "docstring: Called when the start of a TAG_Compound is parsed.\nA TAG_Compound stores named entries of varying types."}
{"text_id": "8765", "text": "docstring: Predict the future state using discrete evolution.\nEvolve the system from X0 as long as control is available, using\nthe discrete evolution.\n\n"}
{"text_id": "8766", "text": "docstring: Initialize a TransitGatewayReference object from a json dictionary."}
{"text_id": "8767", "text": "docstring: Index a record by record identifier."}
{"text_id": "8768", "text": "docstring: Opens all raw files ending with -raw.fif in subjects\ndirectory for marking bads.\n\nParameters\n\nList of subjects.\nsubjects_dir: The subjects directory. If None, the default SUBJECTS_DIR\nfrom environment will be considered.\n\nOutput\n\nThe raw files with bads marked are saved with _bcc (for bad channels checked)\nadded to the file name."}
{"text_id": "8769", "text": "docstring: Ensures that user and group IDs are backed by the same backend.\nRaise a CrossBackendNotAllowed exception if they are not from the same\nbackend, otherwise return None."}
{"text_id": "8770", "text": "docstring: Check whether metadata reload has been enabled in config\nreturn: bool"}
{"text_id": "8771", "text": "docstring: Performs a CMA-Es optimization and feeds the result into LBFG-S for further\nrefinement."}
{"text_id": "8772", "text": "docstring: Unsubscribes from an Adafruit IO feed or group.\nCan also subscribe to someone else's feed."}
{"text_id": "8773", "text": "docstring: Batches a list of arrays of different sizes, grouping them by\nsize. This is designed for use with variable length sequences. Each\nbatch will have a maximum of batch_size arrays, but may have less if\nthere are fewer arrays of the same length. It is recommended to use\nthe pad_arrays() method of the LabelledDataset instance before using\nthis function, in order to quantise the lengths.\n\n\n\nlist of ndarray\nA list of N-D arrays, possibly of different lengths, to batch.\nThe assumption is that all the arrays have the same rank and\nonly axis 0 differs in length.\ny: ndarray\nThe labels for each of the arrays in arrays_x.\nbatch_size: int\nArrays will be grouped together by size, up to a maximum of\nbatch_size, after which a new batch will be created. Thus each\nbatch produced will have between 1 and batch_size items.\nshuffle: bool, default = True\nWhether to shuffle array order in a batch.\nuniform_batch_size: bool, default = False\nWhether to keep all batches the same size, batch_size, and pad\nwith zeros if necessary, or have batches of different sizes if\nthere aren't enough sequences to group together.\n\n\n\nndarray,\nThe batched arrays. x_list[i] is the i'th\nbatch, having between 1 and batch_size items, each of length\nlengths[i].\ny_list: ndarray\nThe batched labels corresponding to sequences in x_list.\ny_list[i] has the same length as x_list[i]."}
{"text_id": "8774", "text": "docstring: Generates a self-signed CA root certificate (RSA)."}
{"text_id": "8775", "text": "docstring: Convert seconds to HH:MM:SS"}
{"text_id": "8776", "text": "docstring: LineEndRectExtend(self)\nMove caret to last position on line, extending rectangular selection to new caret position."}
{"text_id": "8777", "text": "docstring: Removes a handler for the given watch."}
{"text_id": "8778", "text": "docstring: Poll Transactions for the active Account"}
{"text_id": "8779", "text": "docstring: Return a generator iterator over an exception's chain.\nThe exceptions are yielded from outermost to innermost ."}
{"text_id": "8780", "text": "docstring: \n\nOne-shot iterators have the following limitations.\n\nThey do not support parameterization: all logic for creating the underlying\ndataset must be bundled in the `dataset_factory` function.\nThey are not resettable. Once a one-shot iterator reaches the end of its\nunderlying dataset, subsequent \"IteratorGetNext\" operations on that\niterator will always produce an `OutOfRange` error.\n\n"}
{"text_id": "8781", "text": "docstring: This method has been registered as the flush callback.  Log the two params it is given."}
{"text_id": "8782", "text": "docstring: Fetch quantitative question data as JSON."}
{"text_id": "8783", "text": "docstring: Extract content from DER encoded string: Convert DER encoded signature to signature string.\n\n:return bytes, str: Signature"}
{"text_id": "8784", "text": "docstring: takes in an identity label, the corresponding entity, and previous memory trace\nreturns"}
{"text_id": "8785", "text": "docstring: `GXFFT2 ` transform Radially averaged power spectrum - log before average and no normalization"}
{"text_id": "8786", "text": "docstring: Remember the information about a VM and its ports\nA VM information, along with the physical host information\nis saved."}
{"text_id": "8787", "text": "docstring: render the jinja template using the context value from config_variables.yaml"}
{"text_id": "8788", "text": "docstring: Defines the method for writing the post-processor to the metadata within a data object\n@ In, output, DataObject, instance to write to\n@ In, outputDictionary, dict, dictionary stores importance ranking outputs\n@ Out, xml, xmlUtils.StaticXmlElement instance, written data in XML format"}
{"text_id": "8789", "text": "docstring: Callback that updates the number of covariance ellipses and updates the canvas.\nParameters\n\n_event optional\nEvent information. Not used."}
{"text_id": "8790", "text": "docstring: Get the position marker of the violation."}
{"text_id": "8791", "text": "docstring: Generate the MinMax transform inner loop code."}
{"text_id": "8792", "text": "docstring: Visualizes the patch in an axis"}
{"text_id": "8793", "text": "docstring: Recursive function convertint the configuration from old hydra format to the new one."}
{"text_id": "8794", "text": "docstring: A function to transform the power spectrum to an autocorrelation function\n\n\n\n:return r: Autocorrelation function\n:rtype: ndarray"}
{"text_id": "8795", "text": "docstring: Checks whether a particular hyperparameter of the `param_space`\ndoes lie within the provided `bounds`.\n\nIt ensures the second element of the list in the corresponding\nvalue of `param_space` - the upper bound - is larger than the\nfirst - the lower bound. In addition, it checks that both\nelements are within the provided `bounds`.\n\nIn both cases the function will overwrite the provided\ndictionary using\n:meth:`~getml.hyperopt._BaseSearch.__validate_set_param_space_with_warning`\nto ensure the correct ordering and that either of the two\nbounds are not exceeded. Whenever this happens a warning\nmessage will be printed."}
{"text_id": "8796", "text": "docstring: Write/Append the parameter set to a configuration file."}
{"text_id": "8797", "text": "docstring: Initiates the training process.\nReturns\n\nNone"}
{"text_id": "8798", "text": "docstring: Write the grade to the current submission for the given\naccount and assignment"}
{"text_id": "8799", "text": "docstring: Telegram Command to start a subscription.\nA subscriber will be notified of all new calls to the FritzBox since the subscription took place."}
{"text_id": "8800", "text": "docstring: Checks whether there are enough torso keypoints.\nThis function checks whether the model is confident at predicting one of the\nshoulders/hips which is required to determine a good crop region."}
{"text_id": "8801", "text": "docstring: Generate a sparse matrix of the given shape and density with randomly\ndistributed values.\n\nParameters\n\nm, n : int\nshape of the matrix\ndensity : real, optional\ndensity of the generated matrix: density equal to one means a full\nmatrix, density of 0 means a matrix with no non-zero items.\nformat : str, optional\nsparse matrix format.\ndtype : dtype, optional\ntype of the returned matrix values.\nrandom_state : {numpy.random.RandomState, int}, optional\nRandom number generator or random seed. If not given, the singleton\nnumpy.random will be used.  This random state will be used\nfor sampling the sparsity structure, but not necessarily for sampling\nthe values of the structurally nonzero entries of the matrix.\ndata_rvs : callable, optional\nSamples a requested number of random values.\nThis function should take a single argument specifying the length\nof the ndarray that it will return.  The structurally nonzero entries\nof the sparse random matrix will be taken from the array sampled\nby this function.  By default, uniform [0, 1) random values will be\nsampled using the same random state as is used for sampling\nthe sparsity structure.\n\nExamples\n\n\n\nNotes\n\nOnly float types are supported for now."}
{"text_id": "8802", "text": "docstring: Save ticker_storage as a serialized string into a temporary\nServerConf field. Whereas saving is done on the fly, if called by\nserver when it shuts down, the current timer of each ticker will be\nsaved so it can start over from that point."}
{"text_id": "8803", "text": "docstring: Returns the columns' most repeated elements in a dictionary\ncol:integer>=1 | column name as string\nget: 0|1|2 ; 0 to return a list, 1 to return a dictionary, 2 to return a tuple of Matrices for every column individually"}
{"text_id": "8804", "text": "docstring: compute the gradient of f in the forward mode of AD"}
{"text_id": "8805", "text": "docstring: Creates or updates a policy assignment.\nThis operation creates or updates a policy assignment with the given scope and name. Policy\nassignments apply to all resources contained within their scope. For example, when you assign a\npolicy at resource group scope, that policy applies to all resources in the group."}
{"text_id": "8806", "text": "docstring: Calculation of the firing rate of LGN cells based on the given kernels\nand stimulus.\n\nEq."}
{"text_id": "8807", "text": "docstring: Update translations: delete orphan translations and creates empty translations for new objects in database."}
{"text_id": "8808", "text": "docstring: Returns all the orders submitted by for this strategy. Just as a helper\nto use when writing super simple strategies."}
{"text_id": "8809", "text": "docstring: A function to load timeseries data. Exists to standardize\nformatting in case changes are made with how timeseries are\nsaved in future versions.\nPositional Arguments\ntimeseries_file: the file to load timeseries data from."}
{"text_id": "8810", "text": "docstring: Implements frequentist estimation of the laminarisation probability which is simply the number of laminarising\nRPs divided by the total number of RPs at a given energy level."}
{"text_id": "8811", "text": "docstring: Load a serialized computing graph from file."}
{"text_id": "8812", "text": "docstring: Send one or more X{extended messages} as a CTCP query."}
{"text_id": "8813", "text": "docstring: Generate a CORS header string given the origin"}
{"text_id": "8814", "text": "docstring: Execute ZINCRBY Command, consult Redis documentation for details."}
{"text_id": "8815", "text": "docstring: Produce a slice of the input tensor along multiple axes."}
{"text_id": "8816", "text": "docstring: Categorize samples and move them into class name folders."}
{"text_id": "8817", "text": "docstring: Adds the given rate to the summary with the given tag."}
{"text_id": "8818", "text": "docstring: Copy specified file from master to all chars."}
{"text_id": "8819", "text": "docstring: A read-only property that returns True or False.\nWorks by calculating if the last lock (self.locked_at) has timed out\nor not."}
{"text_id": "8820", "text": "docstring: Check health.\nRuns repeatedly until it is veryfied that the classifier is healthy and faces are trained.\n\nIf it is healthy and trained it will check again after run_in_initial_delay"}
{"text_id": "8821", "text": "docstring: Pulls tablet data from attached tablets."}
{"text_id": "8822", "text": "docstring: unpack serialized message in str into this message instance"}
{"text_id": "8823", "text": "docstring: Simple utility to generate a StrategyVariantRequest structure."}
{"text_id": "8824", "text": "docstring: insert many rows into the exit table."}
{"text_id": "8825", "text": "docstring: Takes the defaults as generated by the fit method, and evaluates them on a specific test task. The test task\nis a pandas series, where each index is the configuration, and each value is the performance of that\nconfiguration on the test task.\n\nMake sure to slice the defaults to only contain the subset of interest (typically not all defaults)."}
{"text_id": "8826", "text": "docstring: Return a decorator for a reader function.\nA decorator factory for reader functions.\n\nA reader function should have at least the following signature:\n``_to_(fh)``. `fh` is **always** an\nopen filehandle. This decorator provides the ability to use filepaths in\nthe same argument position as `fh`. They will automatically be opened and\nclosed.\n\nThe reader must not close the filehandle**, cleanup will be\nhandled external to the reader and is not its concern. This is true even\nin the case of generators.\n\nAny additional `**kwargs` will be passed to the reader and may\nbe used if necessary.\n\nIn the event of a compound format (`['format1', 'format2']`) filehandles\nwill be unrolled in the same order as the format and ALL kwarg arguments\nwill be passed as tuples in the same order as the format.\n\nThe reader **must** return an instance of `cls` if `cls` is not None.\nOtherwise the reader must return a generator. The generator need not deal\nwith closing the `fh`. That is already handled by this decorator.\n\n: Failure to adhere to the above interface specified for a reader\nwill result in unintended side-effects.\n\nParameters\n\nformat : str\nA format name which a decorated reader will be bound to.\ncls : type, optional\nThe class which a decorated reader will be bound to. When `cls` is None\nthe reader will be bound as returning a generator.\nDefault is None.\n\nReturns\n\nfunction\nA decorator to be used on a reader.\n\nSee Also\n\n"}
{"text_id": "8827", "text": "docstring: Perfrom a weighted sum of 2 or more images"}
{"text_id": "8828", "text": "docstring: Check assertions for all files in a given directory.\nIf the expected map are given, search first in this\nmap for assertion otherwise the assertion will be extracted\nfrom each file.\nThis function is called by simpleTestDeneratorAssertions."}
{"text_id": "8829", "text": "docstring: Returns index spec according to attribute definition"}
{"text_id": "8830", "text": "docstring: Load the FP32 model, and use the calibrate data to calculate the forward-stage.\nBased on the sample data, we can get the quantization information, and obtain\nthe final quantized model.\n\nNone\nReturns:\nthe program of quantized model."}
{"text_id": "8831", "text": "docstring: Multisine in time domain\nBe sure to include integer number of periods when creating the time vector\n\nParameters\n\nN : int\nNumber of harmonics\n\nReturns\n\nfex : callable\nCallable that takes time scalar or array as input\n\nExamples\n\n"}
{"text_id": "8832", "text": "docstring: Create a movie and store it in the database"}
{"text_id": "8833", "text": "docstring: Raise an error message, unless errors are suppressed."}
{"text_id": "8834", "text": "docstring: Strip comments from line string."}
{"text_id": "8835", "text": "docstring: Update Django models by PK or create new and return new values."}
{"text_id": "8836", "text": "docstring: read generation sizes from JEGA log or DAKOTA's stdout"}
{"text_id": "8837", "text": "docstring: Find a whole level of nodes in the stack"}
{"text_id": "8838", "text": "docstring: Visualize the result for the topic model by 2D embedding (UMAP)"}
{"text_id": "8839", "text": "docstring: Monkeypatch the user home folder."}
{"text_id": "8840", "text": "docstring: Check if target_keys is equal to result_keys."}
{"text_id": "8841", "text": "docstring: Returns postgres attribute number definition such like\nAnum_pg_class_relid, from attribute name."}
{"text_id": "8842", "text": "docstring: perform a validation step. Should return a dict of loggable values."}
{"text_id": "8843", "text": "docstring: Increment a filename until it is unique.\nParameters\n\nfilename : unicode\nThe name of a file, including extension\npath : unicode\nThe API path of the target's directory\ninsert: unicode\nThe characters to insert after the base filename\n\nReturns\n\nname : unicode\nA filename that is unique, based on the input filename."}
{"text_id": "8844", "text": "docstring: Return the bounding box (Numpy array [min longitude, min latitude, max longitude,\nmax latitude]) of the given Feed's stops or of the subset of stops\nspecified by the given stop IDs."}
{"text_id": "8845", "text": "docstring: returns path length, no adjacent duplicates"}
{"text_id": "8846", "text": "docstring: Import TIN from a file into a database, using a Star-structure.\nFILENAME can be a path to single file, or a directory containing the files\nto be imported. The importer tries to guess the file format from its suffix.\n\nSupported file formats: Wavefront OBJ (.obj)"}
{"text_id": "8847", "text": "docstring: Removes this article from the public site"}
{"text_id": "8848", "text": "docstring: Figures out the files needed and adds the pixels."}
{"text_id": "8849", "text": "docstring: A simulator environment with the same characteristics as the\nenvironment returned by make_default_sim_env except on every reset,\nthe simulation is completely rebuilt using interface_generating_function.\n\nSee make_default_sim_env for more info."}
{"text_id": "8850", "text": "docstring: Saves values of tensors into files.\nUseful for debugging."}
{"text_id": "8851", "text": "docstring: Helper function to assist in sending of notifications to the\norchestrator, when unnamed appliances are detected."}
{"text_id": "8852", "text": "docstring: Apply the equations-based version of the linear transformation to\n'X', a list of 4 32-bit bitstrings, least significant bitstring first,\nand return another list of 4 32-bit bitstrings as the result."}
{"text_id": "8853", "text": "docstring: Computes the model's output (forward pass)\nIf training is True variables that need to be stored during training are kept in a cache\ndictionary for each layer. Also, some layers such as Dropout behave differently if\ntraining is set to True."}
{"text_id": "8854", "text": "docstring: Handle RPC cast from plugin to update_health_monitor"}
{"text_id": "8855", "text": "docstring: Save results of render_all as indexed image name and PNG format.\nIf you want to use tile layout, set w and h are grater than 1 or equals 1."}
{"text_id": "8856", "text": "docstring: Generate yaml or json formatted documents containing various information about traps. These files can be used by\nthe Datadog Agent to enrich trap data.\nThis command is intended for \"Network Devices Monitoring\" users who need to enrich traps that are not automatically\nsupported by Datadog.\n\n\n\nYou'll need to install pysmi manually beforehand."}
{"text_id": "8857", "text": "docstring: Function that validates that a clock is present for our simulation domain."}
{"text_id": "8858", "text": "docstring: Create side-by-side (sxs) plot of wind roses from different decades"}
{"text_id": "8859", "text": "docstring: Gets the service_account_name of this Config."}
{"text_id": "8860", "text": "docstring: Get the latest state of the sensor."}
{"text_id": "8861", "text": "docstring: this is the reporter for Self Organizing Maps\nreport occurs at the end of all iterations\nroutine for identifying and reporting membership of oil fields in clusters\nreturns the count of oil fields in each cluster"}
{"text_id": "8862", "text": "docstring: Calculates the Minimum Detectable Effect of a Three-Level Blocked (Fixed) Cluster-level Random Assignment Design,\nTreatment at Level 2\n\nParameters\n\nfloat\nProportion of variance in the outcome between level 2 units (unconditional ICC2)\nn: float\nHarmonic mean of level 1 units across level 2 units (or simple average)\nJ: float\nHarmonic mean of level 2 units across level 3 units (or simple average)\nK: int\nNumber of level 3 units\npower: float, default=0.8\nStatistical power of the test.\n\nReturns\n\nA dictionary containing the minimum_detectable effect as well as confidence intervals for said effect"}
{"text_id": "8863", "text": "docstring: Remove a component from an entity by type\nRaises a KeyError if either the component type or entity\ndoes not exist in database"}
{"text_id": "8864", "text": "docstring: Create a graphical representation of the lattice of cyclic flats."}
{"text_id": "8865", "text": "docstring: Calculate the total number of tokens in a rule."}
{"text_id": "8866", "text": "docstring: parse member tags search page and return the image list"}
{"text_id": "8867", "text": "docstring: creates an appropriate coordinate transformation on a given domain"}
{"text_id": "8868", "text": "docstring: Calculates the summation of the elements along the specified axes."}
{"text_id": "8869", "text": "docstring: Build kwargs for the evaluate() function from the\nparsed command-line arguments."}
{"text_id": "8870", "text": "docstring: Randomly change the velocity of a note in a track"}
{"text_id": "8871", "text": "docstring: Returns a new dataset with altered column names.\ndict values must be unique (1-to-1). Labels not contained in a dict will be left as-is.\nExtra labels listed don't throw an error.\n\nParameters\n\ndict-like or function or list of str\ndict to rename columns selectively, or list of names to rename all columns, or a function like\nstr.upper\n\nReturns\n\nsame type as the caller\nA dataset with specified columns renamed.\n\nExamples\n\n"}
{"text_id": "8872", "text": "docstring: Returns the log probability of a single sample."}
{"text_id": "8873", "text": "docstring: Calculate cross-validated loss and save as new dataframe\nWe use 12-fold cross-validation to determine the mode that best fits\nthe data for each scanning session. To do that, we fit the model to\na subset of the data (the subset contains all responses to 44 out of\nthe 48 stimulus classes, none to the other 4). When fitting the\ncross-validation models, we follow the same procedure we use when\nfitting all the data, but we need to use something else for\nevaluation: we get each cross-validation model's predictions for the\n4 classes it *didn't* see, concatenating together these predictions\nfor all 12 of them, then compare this against the full dataset (all\nvoxels, all stimuli). We then create a dataframe containing this\nloss, as well as other identifying information, and save it at the\nspecified path.\n\nWe also save out the predictions and targets tensors.\n\nThe arguments for this function are a bit strange because it's\nexpressly meant to be called by a snakemake rule and not directly\nfrom a python interpreter (it gets called by the rules calc_cv_error\nand calc_simulated_cv_error)\n\nParameters\n\nloss_files : list\nlist of strings giving the paths to loss files for the\ncross-validation models. each one contains, among other things\nthe specific test subset for this model, and there should be an\nassociated model.pt file saved in the same folder.\ndataset_path : str\nThe path to the first_level_analysis dataframe, saved as a csv,\nwhich contains the actual data our model was fit to predict\nwildcards : dict\ndictionary of wildcards, information used to identify this model\n. Automatically put together by snakemake\noutputs : list\nlist containing two strings, the paths to save the loss dataframe (as a\ncsv) and the predictions / targets tensors (as a pt)\ndf_filter_string : str or None, optional\na str specifying how to filter the voxels in the dataset. see\nthe docstrings for sfp.model.FirstLevelDataset and\nsfp.model.construct_df_filter for more details. If None, we\nwon't filter. Should probably use the default, which is what all\nmodels are trained using."}
{"text_id": "8874", "text": "docstring: Return Tweet and Profile data as dict for writing a CSV report."}
{"text_id": "8875", "text": "docstring: Verify the invoking event has all the necessary data fields."}
{"text_id": "8876", "text": "docstring: Apply the given function to a single model replica."}
{"text_id": "8877", "text": "docstring: Resize this hash table's buckets and rehash all key-value entries.\nShould be called automatically when load factor exceeds a threshold\nsuch as 0.75 after an insertion (when set is called with a new key).\nBest and worst case running time: O(N) all items must be iterated over twice and inserted into table(O(1))\nBest and worst case space usage: O(n) where N represents the temporary list data needs to be stored"}
{"text_id": "8878", "text": "docstring: Set up the Homematic(IP) Local select platform."}
{"text_id": "8879", "text": "docstring: Takes the technology ontology and tries to add each element to the\ntechnologies index of this document. Add only if the technology term\noccurs in the text. This is done rather inefficiently by searching the\nentire text # for each technology, but on a 30K LIF document this takes\nless than # 0.01 seconds for 100 technology terms, so we can live with\nthis."}
{"text_id": "8880", "text": "docstring: Apply func to all ci elements in the tree rooted at elt."}
{"text_id": "8881", "text": "docstring: Takes in the current board and a potential location and checks if placing\nsomething in that square is a valid move or not. Ends by returning true\nif the move's valid and false otherwise."}
{"text_id": "8882", "text": "docstring: Helper function that return udev rules"}
{"text_id": "8883", "text": "docstring: Returns (stdout, stderr, exitCode, timeoutInfo)\nTODO: This really should be easier to access from Lit itself"}
{"text_id": "8884", "text": "docstring: Returns a PIL Image that is represented by self."}
{"text_id": "8885", "text": "docstring: Coerce x to the right kind of string (int, float, or string)"}
{"text_id": "8886", "text": "docstring: Completes __init__, by computing the posterior. If fit_parameters, this\nincludes optimizing the surrogate model parameters.\n\nIf self.state.pending_evaluations is not empty, we proceed as follows:\nCompute posterior for state without pending evals\nDraw fantasy values for pending evals\nRecompute posterior (without fitting)"}
{"text_id": "8887", "text": "docstring: For non-safe requests, confirm that the tokens are present\nand match."}
{"text_id": "8888", "text": "docstring: Page through text by feeding it to another program.  Invoking a\npager through this might support colors."}
{"text_id": "8889", "text": "docstring: Adds a read operation to the request list."}
{"text_id": "8890", "text": "docstring: Returns a client that uses an API key for Cloud SDK crash reports."}
{"text_id": "8891", "text": "docstring: Give low weights to most irrelevant pixels and high weights to pixels around\nthe features"}
{"text_id": "8892", "text": "docstring: Deletes a single DistributedDevice  # noqa: E501\nThis method makes a synchronous HTTP request by default.\n\n"}
{"text_id": "8893", "text": "docstring: Validates the ExplorationIssues domain object."}
{"text_id": "8894", "text": "docstring: Cross Entropy loss function\nY: true labels\nA: final activation function (predicted labels)\nepsilon: small value to make minimize chance for log(0) error"}
{"text_id": "8895", "text": "docstring: evaluate a labeling to get the energy / probability of that given labeling"}
{"text_id": "8896", "text": "docstring: Mark a test method as needing Riak setup."}
{"text_id": "8897", "text": "docstring: Convert string indices into integers. Handles characters, strings\nslices with strings, and tuples of the same. Anything else is\nunchanged."}
{"text_id": "8898", "text": "docstring: Computes Ave SpC, log2 ratios, and Z-scores; results to window and clipboard"}
{"text_id": "8899", "text": "docstring: Augment model with latent variables."}
{"text_id": "8900", "text": "docstring: Normalize an array into 0 <= array < 1.0\nby dividing by the array.ptp() and then\nmoving the element with maximum value inside."}
{"text_id": "8901", "text": "docstring: Return the Legendre symbol (x|y), assuming y is an odd prime."}
{"text_id": "8902", "text": "docstring: Initialize this BasicAuth extension for the given application."}
{"text_id": "8903", "text": "docstring: Return the detected encoding for the page."}
{"text_id": "8904", "text": "docstring: Creates a 3D [R|t] matrix with a translation t\nand an identity rotation"}
{"text_id": "8905", "text": "docstring: computes seed based connectivity matrix for fMRI.\nif save_path is not empty, saves the map as nifti"}
{"text_id": "8906", "text": "docstring: Get the animation curves and settings from the ui and reduce the\nkeyframes on each of those animation curves using the provided\nsettings."}
{"text_id": "8907", "text": "docstring: Updates a document with various segmentations and creates\nan sem.corpus (CoNLL-formatted data) using field argument as index.\n\nParameters\n\ndocument : sem.storage.Document\nthe input data. It is a document with only a content\nlog_level : str or int\nthe logging level\nlog_file : str\nif not None, the file to log to (does not remove command-line\nlogging)."}
{"text_id": "8908", "text": "docstring: Creates a snapshot from the requested subscription.\nIf the snapshot already exists, returns `ALREADY_EXISTS`.\nIf the requested subscription doesn't exist, returns `NOT_FOUND`.\n\nIf the name is not provided in the request, the server will assign a random\nname for this snapshot on the same project as the subscription, conforming\nto the\n[resource name format].\nThe generated name is populated in the returned Snapshot object.\nNote that for REST API requests, you must specify a name in the request."}
{"text_id": "8909", "text": "docstring: Extracts all symbols from the raw XML documents and generates individual symbols from the masks"}
{"text_id": "8910", "text": "docstring: Use Newton's method to find the root of the function"}
{"text_id": "8911", "text": "docstring: Go over all lines and try to find format variables\nThis might be a bit wonky if escaped curly braces are used"}
{"text_id": "8912", "text": "docstring: wavelength array of the spectrometer\nwavelengths in (nm) corresponding to each pixel of the spectrometer\n\nReturns\n\nwavelengths : `numpy.ndarray`\nwavelengths in (nm)"}
{"text_id": "8913", "text": "docstring: Mux the inputs into the appropriate outputs.\nParameters\n\ninputs : Vector\nUnscaled, dimensional input variables read via inputs[key].\noutputs : Vector\nUnscaled, dimensional output variables read via outputs[key]."}
{"text_id": "8914", "text": "docstring: Draws a list of attachments, e.g. photos or audio files,\nassociated with the incident."}
{"text_id": "8915", "text": "docstring: Check to see if combination doesn't match label in question dict or\nif combination has been used before.\nIf so, try another random combination.\nIf not, save question text to list.\nOutput list of three questions."}
{"text_id": "8916", "text": "docstring: Creates examples for the training and dev sets."}
{"text_id": "8917", "text": "docstring: Normalize array and apply colormap."}
{"text_id": "8918", "text": "docstring: Chip away at deletable projects until they are gone."}
{"text_id": "8919", "text": "docstring: a) create a list of the dict's keys and values;\nb) return the key with the max value"}
{"text_id": "8920", "text": "docstring: Returns the amount of memory the host currently has free."}
{"text_id": "8921", "text": "docstring: Release buffers returned by share_outputs calls.\nIt helps in case when output call result is consumed (copied)\nand buffers can be marked as free before the next call to share_outputs. It provides\nthe user with better control about when he wants to run the pipeline, when he wants\nto obtain the resulting buffers and when they can be returned to DALI pool when the\nresults have been consumed."}
{"text_id": "8922", "text": "docstring: Close the video writer and the model plotter."}
{"text_id": "8923", "text": "docstring: Given a set of lattic parameters, generates a matrix representing the\nlattice vectors"}
{"text_id": "8924", "text": "docstring: Filter out empty Lists and Dictionaries"}
{"text_id": "8925", "text": "docstring: Update h for current batch with standard MU\nParameters\n\n\n\nupdate_func : Theano compiled function\nUpdate function\n\ngrad_func : Theano compiled function\nGradient function"}
{"text_id": "8926", "text": "docstring: Removes a set of items from the source list and returns them in a new list based on the\nsplitter algorithm and splitter_args."}
{"text_id": "8927", "text": "docstring: Unsigned division\nPerforms unsigned integer division."}
{"text_id": "8928", "text": "docstring: Compares if two values are equal.\nReturns true if the two values are equal\nor false if they aren't."}
{"text_id": "8929", "text": "docstring: Add a list program to the control list.\nArgs:\nprogram   - a list of program names. Use all connected programs if empty.\nactors    - an optional list of actors that the commander can command."}
{"text_id": "8930", "text": "docstring: Restore the plotting backend to matplotlib"}
{"text_id": "8931", "text": "docstring: Submit a transaction to the blockchain. This function is separate to\nenable the submissions of transactions signed by offline keys.\n\nParameters\n\nsigned_tx_file : str or Path\nPath to the signed transaction file ready for submission.\ncleanup : bool, optional\nFlag that indicates if the temporary transaction files should be\nremoved when finished (defaults to false)."}
{"text_id": "8932", "text": "docstring: Parse drcov log header from filestream."}
{"text_id": "8933", "text": "docstring: main function handles argument processing and sigint handling"}
{"text_id": "8934", "text": "docstring: Get trades for the authenticated account and symbol."}
{"text_id": "8935", "text": "docstring: > None\nTranslate mouse button and modifiers into a virtual mouse button"}
{"text_id": "8936", "text": "docstring: Generate a new request for the same resource"}
{"text_id": "8937", "text": "docstring: Evaluates the Uppaal system declaration."}
{"text_id": "8938", "text": "docstring: Show properties of one or more units/jobs or the manager\nCLI Example.\n\n"}
{"text_id": "8939", "text": "docstring: Update looking_for attribute of a Profile."}
{"text_id": "8940", "text": "docstring: Wrapper function for Django's send_mail."}
{"text_id": "8941", "text": "docstring: Returns the last date in the calendar\nReturns\n\ndatetime.date\nThe last date in the calendar\n\nRaises\n\nKeyError\nif the calendar is empty\n\nSee also\n\nCalendar.first\nReturns the first date in the calendar\nCalendar.end\nAlias"}
{"text_id": "8942", "text": "docstring: Helper method for creating canvas\nIf canvas with this name already exists, it will be returned"}
{"text_id": "8943", "text": "docstring: Given a workfile containing the AVI movies and the labels for each\nframe, this function creates an LMDB for each classification category."}
{"text_id": "8944", "text": "docstring: Get the next state as an integer given the current state and conditional probability table"}
{"text_id": "8945", "text": "docstring: Check if the cell of interest is in the upper edge of the image.\nIf the cell is closer to the edge than a 'radius', then it corrects\nthe outcome adding zero-valued rows at the begining of the image.\n\nParameters\n\nim : numpy.array\nFluorescence microscopy image.\ny_pos : int\n:math:`y`-coordinate of the center of the cell of interest.\nradius : int\nlenght (in pixels) between the center of the image and each edge.\n\nReturns\n\nim : numpy.array\nAn array (image) containing an individualised cell, corrected in case\nthat the cell is close to the upper edge of the original image."}
{"text_id": "8946", "text": "docstring: called when error in connection to client\nargs:\nrequest: the current request\nclient_address: the client address for which error is received"}
{"text_id": "8947", "text": "docstring: Return a dictionary with values from the config_path file.\nNB:  the keys will be all lowercase!"}
{"text_id": "8948", "text": "docstring: Check if string is a CommunityRole string."}
{"text_id": "8949", "text": "docstring: \n\nArgs\ng: the input graph\nnstep: number recurrent steps to run\noutput_dynamics: return latent states dynamics along with final readout"}
{"text_id": "8950", "text": "docstring: Creates a new dispatch user."}
{"text_id": "8951", "text": "docstring: Train the neural network.\nUse a simple backpropagation algorithm to update the weights."}
{"text_id": "8952", "text": "docstring: Test values returned by value() function"}
{"text_id": "8953", "text": "docstring: Get new random number generator.\nParameters\n\nseed_seq : np.random.SeedSequence, rlberry.seeding.Seeder or int, default : None\nSeed sequence from which to spawn the random number generator.\nIf None, generate random seed.\nIf int, use as entropy for SeedSequence."}
{"text_id": "8954", "text": "docstring: Return code for has_security_label TQL filter methods."}
{"text_id": "8955", "text": "docstring: Returns a LearnerAction object from a dict."}
{"text_id": "8956", "text": "docstring: Update 'ref' by subtracting 'value' from it.\nThis operation outputs \"ref\" after the update is done.\nThis makes it easier to chain operations that need to use the reset value."}
{"text_id": "8957", "text": "docstring: Stop the game if running and start a new game\nReturns\n\n"}
{"text_id": "8958", "text": "docstring: This function creates the chi data array. Chi data will be calculated for each vertex of the river profile and\nstored in the 7th column of self._data numpy array"}
{"text_id": "8959", "text": "docstring: Publishes the articles and images of a handoff deliverable to Help Centers and Amazon S3 respectively."}
{"text_id": "8960", "text": "docstring: Encode the tokens based on the characters."}
{"text_id": "8961", "text": "docstring: A box with a _command key was received.\nDispatch it to a local handler call it."}
{"text_id": "8962", "text": "docstring: faces : list of PIL Image\ntarget_embs : [n, 512] computed embeddings of faces in facebank\nnames : recorded names of faces in facebank\ntta : test time augmentation (hfilp, that's all)"}
{"text_id": "8963", "text": "docstring: Update a deprecated path from an object with its new location"}
{"text_id": "8964", "text": "docstring: Converts a network using HardTanh to one using only ReLUs.\n@with_htanh_filename is the path to the ERAN file describing the network\nusing HardTanh, while @no_htanh_filename is the path to the ERAN file this\nfunction should write the ReLU-only version to."}
{"text_id": "8965", "text": "docstring: Load bib content from bib files"}
{"text_id": "8966", "text": "docstring: Wait for job running (whether successful or not)."}
{"text_id": "8967", "text": "docstring: Enables automatic local caching of function, method, class and module attributes on the given proxy."}
{"text_id": "8968", "text": "docstring: Decodes your encoded data to tree."}
{"text_id": "8969", "text": "docstring: Publish the filing message onto the NATS filing subject."}
{"text_id": "8970", "text": "docstring: Recruit macrophages based on MIP1b activation\nParameters\n\nstate : State\nglobal simulation state\n\nReturns\n\nnothing"}
{"text_id": "8971", "text": "docstring: Parses through the given array of HTTP headers to fill in the dictionary `self.headers`\nParams:\n`headers` - an array of strings after the status line but before the final CLRF before the payload"}
{"text_id": "8972", "text": "docstring: This function to keep the sytle or formatting\nfor the html output file and can be edited if needed."}
{"text_id": "8973", "text": "docstring: Generate a random walk in a rectangular box"}
{"text_id": "8974", "text": "docstring: Do the actual work of merging with bcftools merge."}
{"text_id": "8975", "text": "docstring: AudioNet model with LF input layer for AudioMNIST digit classification"}
{"text_id": "8976", "text": "docstring: Gets the path_suffix of this Body12.  # noqa: E501\nIf set, tokens created via this role will contain the given suffix as a part of their path. This can be used to assist use of the 'revoke-prefix' endpoint later on."}
{"text_id": "8977", "text": "docstring: Looks through all open issues. For any open issue, if the issue is\ntoo old and has not been recently commented on, chaosbot issues a\nvote close"}
{"text_id": "8978", "text": "docstring: Tests the Deep SVDD model on the test data."}
{"text_id": "8979", "text": "docstring: Gets dataframe, it can be train, dev, or test set depend on variable type_dataframe"}
{"text_id": "8980", "text": "docstring: Returns True if Tesseract is installed, or false if it is not"}
{"text_id": "8981", "text": "docstring: Inner function to install a interrupt handler.\nArgs\n\nstr\nInterrupt name\ncallback: function\nInterrupt callback\ninstaller: str\nModule or instance name that installed this interrupt"}
{"text_id": "8982", "text": "docstring: Clears the input and output buffers"}
{"text_id": "8983", "text": "docstring: Add a dropdown with given options"}
{"text_id": "8984", "text": "docstring: associates the current burrows with burrow tracks"}
{"text_id": "8985", "text": "docstring: Save transformed data sample as specified in opts."}
{"text_id": "8986", "text": "docstring: decorator used on signals to check if a model signal should be executed"}
{"text_id": "8987", "text": "docstring: Subtract a datetime range from a datetime range."}
{"text_id": "8988", "text": "docstring: Update multiple storage_pools withe the storage_pools dictionary."}
{"text_id": "8989", "text": "docstring: Called on page download start."}
{"text_id": "8990", "text": "docstring: Reads the images and masks and arranges them in a montage for sampling in training."}
{"text_id": "8991", "text": "docstring: Concatenates a list of tensors along specific axis. The axis must appear in every tensor in the\nlist."}
{"text_id": "8992", "text": "docstring: Plota a evolucao do erro com o refinamento da malha"}
{"text_id": "8993", "text": "docstring: color internal nodes with the mean of leaf color. this will end up\nbeing grey in most cases"}
{"text_id": "8994", "text": "docstring: Checks if the first line of the cell matches the regexp with re.match."}
{"text_id": "8995", "text": "docstring: Return a list (or adev-style dict) of all waiter adevs.\n\"Waiter\" adevs are the subdevices whose status must leave BUSY when\nwaiting on self.\n\nBy default, this includes *all* adevs (of which the non-waitables are\nremoved), but can be overridden to remove some waitable devices as\nwell, in case they are not important to determine the status of this\ndevice."}
{"text_id": "8996", "text": "docstring: Informs when the bot is connected, logs the guilds it's currently connected to."}
{"text_id": "8997", "text": "docstring: Generates dataset for regression,  fratures are drawn from multivariate gaussian,\ntarget is logistic function of features' sum + small noise"}
{"text_id": "8998", "text": "docstring: Create the updatemenu buttons for the OSM Shift plots. This is the same procedure for NUV and FUV."}
{"text_id": "8999", "text": "docstring: callback handler when sub image received"}
{"text_id": "9000", "text": "docstring: Given a dict with the fields for the srg export, create an HTML file"}
{"text_id": "9001", "text": "docstring: Use cluster information to plot an ASCII representation of the cluster\ntree."}
{"text_id": "9002", "text": "docstring: Embed a window from a separate process in RoboDK as a docked window. Returns True if successful."}
{"text_id": "9003", "text": "docstring: Delete the conversation and all message history."}
{"text_id": "9004", "text": "docstring: Enumerate all possible ways to assemble the central molecule and the neighboring clusters.\nParameters\n\nnode : dict\nThe information of the central molecule.\nneighbors : list of dict\nEach element contains the information of a neighboring cluster.\nprev_nodes : list of dict\nEach element contains the information of a neighboring cluster.\nprev_amap : list of 3-tuples\nEach tuple consists of the id of the neighboring cluster,\nthe id of the atom in the central molecule and the id of the same atom in the\nneighboring cluster.\nmax_ncand : int\nMaximum number of candidate assemble ways.\n\nReturns\n\nlist of 3-tuples\nEach 3-tuple consists of the SMILES, molecule and amap corresponding to a molecule\nassembled from the central molecule and the neighboring cluster. The amap is a list\nof tuples. Each tuple consists of the id of the neighboring cluster,\nthe id of the atom in the central molecule and the id of the same atom in the\nneighboring cluster."}
{"text_id": "9005", "text": "docstring: Populates the properties of this object by extracting them from a dictionary.\nArgs:\ndictionary (dictionary): A dictionary representation of the object as\nobtained from the deserialization of the server's response. The keys\nMUST match property names in the API description."}
{"text_id": "9006", "text": "docstring: Draws a loop edge.\nThe default implementation draws a small circle."}
{"text_id": "9007", "text": "docstring: Calculate the entropy of a dataset"}
{"text_id": "9008", "text": "docstring: remove the given user from the given group."}
{"text_id": "9009", "text": "docstring: Will extract geometric details from the polygon and plane of interest"}
{"text_id": "9010", "text": "docstring: Load a pretrained model from a .pth checkpoint given by `filename`."}
{"text_id": "9011", "text": "docstring: compute eigenvalue as a function of traveling bump velocity in axial or diagonal directions."}
{"text_id": "9012", "text": "docstring: Recursive function for pyramid building\nThis is a recursive function that builds an image pyramid by indicating\nan original region of an image at a given scale. This function then\nbuilds a pyramid up from the highest resolution components of the pyramid\n(the original images) to the given position resolution.\n\nAs an example, imagine the following possible pyramid.\n\n\n\nAt scale 2 (the highest resolution) there are 4 original images. At scale 1,\nimages are averaged and concatenated into one image . Calling\nthis function using S=0 will attempt to generate 1234 by calling this\nfunction again to get image 12, which will then call this function again to\nget image 1 and then image 2. Note that this function actually builds images\nin quadrants (top left and right, bottom left and right) rather than two\nsections as displayed above.\n\nDue to the nature of how this function works, it is possible to build a\npyramid in parallel, since building the subpyramid under image 12 can be run\nindependently of the building of subpyramid under 34."}
{"text_id": "9013", "text": "docstring: One or more `custom_header` blocks as defined below."}
{"text_id": "9014", "text": "docstring: Creates a dict of blog page numbers and a list of the names of all posts to display on each page."}
{"text_id": "9015", "text": "docstring: Issue multiple ops, all of which must succeed."}
{"text_id": "9016", "text": "docstring: Remove all values on the left corresponding to the given value on the right."}
{"text_id": "9017", "text": "docstring: Write the SNP files and position file required for WASP and mpileup\nParameters\n\nvcf_format : str\nA format string for the input VCF files (which are split by chromosome).\n``{}`` will be replaced by a chromosome number or character."}
{"text_id": "9018", "text": "docstring: Write multiple predicted causes with likelihoods.\nThe CSV version of this output produces a file which is easily\nmachine readable and exists in a non-proprietary format. This allows\nall users to access and post-process this info.\n\n"}
{"text_id": "9019", "text": "docstring: Returns the histogram intersection value for the two histograms of simulator and quantum computer"}
{"text_id": "9020", "text": "docstring: Sends messages to Discord context. Easily makes messages 'embeded' if embed == 1"}
{"text_id": "9021", "text": "docstring: import soil dict formatted from the database"}
{"text_id": "9022", "text": "docstring: Returns the Description of the comment."}
{"text_id": "9023", "text": "docstring: Method to read the portion of the XML that belongs to the BaseKnapsack model\n@ In, container, object, self-like object where all the variables can be stored\n@ In, xmlNode, xml.etree.ElementTree.Element, XML node that needs to be read\n@ Out, None"}
{"text_id": "9024", "text": "docstring: Return true if the node is a final node, that is,\nit has positive weight."}
{"text_id": "9025", "text": "docstring: Virtual field indicating the status of the voucher"}
{"text_id": "9026", "text": "docstring: Replaces any number of fields within an existing integration definition  # noqa: E501\nThis method makes a synchronous HTTP request by default. To make an\nasynchronous HTTP request, please pass async_req=True\n\n"}
{"text_id": "9027", "text": "docstring: Create a map that connects elements that occur in both arrays.\nThe output is a tuple list, with a tuple being;\n(index of element e in a1, index of element e in a2)\n\nN.b.:   Does not crash in case of double entries (behaviour is still correct),\nbut there are some ambiguities involved. So: do not do this."}
{"text_id": "9028", "text": "docstring: The Tenant which should be used for authentication."}
{"text_id": "9029", "text": "docstring: Select a subset from the unlabeled set, return the selected instance and label.\nParameters\n\n{list, np.ndarray, MultiLabelIndexCollection}\nThe indexes of labeled samples. It should be a 1d array of indexes (column major, start from 0) or\nMultiLabelIndexCollection or a list of tuples with 2 elements, in which,\nthe 1st element is the index of instance and the 2nd element is the index of labels.\n\n{list, np.ndarray, MultiLabelIndexCollection}\nThe indexes of unlabeled samples. It should be a 1d array of indexes (column major, start from 0) or\nMultiLabelIndexCollection or a list of tuples with 2 elements, in which,\nthe 1st element is the index of instance and the 2nd element is the index of labels.\n\nLabelRankingModel (optional, default=None)\nA trained model used to predict unlabeled data.\nIf None is passed, it will re-train a LabelRanking model.\n\nfloat, optional (default=0.5)\nThe threshold to avoid zero-division.\n\nReturns\n\nlist\nA list of tuples that contains the indexes of selected instance-label pairs."}
{"text_id": "9030", "text": "docstring: Give a line and the header for that line, find the correct\ncolumn for each line word, and return a dictionary of keys/values.\n\nParameters\n\nline :\nthe line to return as a dict\nheader :\nthe header line to use to determine column headers\n\nReturns\n\nout :\nThe line in dict form, with column headers as keys"}
{"text_id": "9031", "text": "docstring: Adds a new variable to the layer, or gets an existing one; returns it."}
{"text_id": "9032", "text": "docstring: Plots n most important features. Also plots the cumulative importance if\nthreshold is specified and prints the number of features needed to reach threshold cumulative importance.\nIntended for use with any tree-based feature importances."}
{"text_id": "9033", "text": "docstring: Create the descriptors we want to use for our device."}
{"text_id": "9034", "text": "docstring: Formats the line identifier of a change."}
{"text_id": "9035", "text": "docstring: ratio calculates the ratio between the two varibales"}
{"text_id": "9036", "text": "docstring: This function gets the dir entries in the dir_path\n:param: dir_path - path to directory\n:return: a list of path objects"}
{"text_id": "9037", "text": "docstring: Loads an array of variant configuration from the json file found at file_path."}
{"text_id": "9038", "text": "docstring: Returns the max_batch_size that the converter should use for tests."}
{"text_id": "9039", "text": "docstring: 1. Any live cell with two or three live neighbors survives.\n2. Any dead cell with three live neighbors becomes a live cell.\n3. All other live cells die in the next generation.\nSimilarly, all other dead cells stay dead."}
{"text_id": "9040", "text": "docstring: decode control, return a 2-element tuple where the first element is the control oid\nand the second element is a dictionary with description (from Oids), criticality and decoded control value"}
{"text_id": "9041", "text": "docstring: Create a new FileHandle representing an external URL."}
{"text_id": "9042", "text": "docstring: This there will be a nesting of tabs and accordions\nReturns:  A widget object. This is a wrapper that gets sent to\n\nSMM\n\n"}
{"text_id": "9043", "text": "docstring: Allow an object frame to be inferred from an implementation"}
{"text_id": "9044", "text": "docstring: After each partition is parsed, we update the current metric totals\nwith the total bytes and number of records parsed. After all partitions\nhave reported, we write the metric."}
{"text_id": "9045", "text": "docstring: Find the server process, shut it down, then remove the build directory"}
{"text_id": "9046", "text": "docstring: Uses all functions defined in this file to convert JSON to TeX codes."}
{"text_id": "9047", "text": "docstring: Adds a face to a patch in a mesh"}
{"text_id": "9048", "text": "docstring: Cross the two elits solutions and replace the two worst in the population with a 20% chance to occur"}
{"text_id": "9049", "text": "docstring: Toggle administrative state of Neutron port for local unit."}
{"text_id": "9050", "text": "docstring: Given an address, returns the related Contract object."}
{"text_id": "9051", "text": "docstring: data for each submodule is a 2-tuple where one item is None\nregular case:\nitem 0 is a dict of same (non-verbose) status-info\nreturned for regular repository\nitem 1 is None\nalternate case:\nitem 0 is None because submodule has a detached HEAD or\nhasn't been initialized\nitem 1 is a string with corresponding info"}
{"text_id": "9052", "text": "docstring: Defines a custom getter for the attribute.\nThis getter reads and returns the internal, thread-local variable. If this\nlocal variable has does not exist in the object's dictionary, the getter\nwill look for the class initializer for the attribute and initialize the\nlocal variable."}
{"text_id": "9053", "text": "docstring: Return a new instance of Symbol holding the representation of the provided int\nvalue using the provided amount of bits.\nIf bits is not enough to represent the provided int value, OverflowError is\nraised."}
{"text_id": "9054", "text": "docstring: Calculate the loss of total batch."}
{"text_id": "9055", "text": "docstring: Returns item/product recommendations for a given user in the context\nof a current item .\n\nIf an experiment is currently active for this feature ('home_product_recs'),\nrecommendations will be provided by the experiment. Otherwise, the default\nbehavior will be used which will look to see if an Amazon Personalize\ncampaign is available. If not, the Product service will be called to get\nproducts from the same category as the current product or featured products."}
{"text_id": "9056", "text": "docstring: Returns the boolean whether or not the script should be stopped. This\nrequest blocks while the script is to be paused."}
{"text_id": "9057", "text": "docstring: mock of github.Github which raises no exceptions and returns the\ncorrect values."}
{"text_id": "9058", "text": "docstring: Return the price of the food"}
{"text_id": "9059", "text": "docstring: Dynamically decode the frame data applying the values to the method\nobject by iterating through the attributes in order and decoding them."}
{"text_id": "9060", "text": "docstring: This function is called at every frame to handle\nmovement/stepping and redrawing"}
{"text_id": "9061", "text": "docstring: Generate crete table command based on self.data"}
{"text_id": "9062", "text": "docstring: Format the metadata of pypi packages stored in email header format.\nCurrently only used as backup on the wheel (compressed) file format."}
{"text_id": "9063", "text": "docstring: Pass operation & dependency names through `renamer`."}
{"text_id": "9064", "text": "docstring: flush email queue, every time: called from scheduler"}
{"text_id": "9065", "text": "docstring: Determins the IIIF image server URL for a given IIIF Canvas"}
{"text_id": "9066", "text": "docstring: Updates recursive make commands that pass command-line variables."}
{"text_id": "9067", "text": "docstring: Test that the correct IP is correctly set on a deny all egress term."}
{"text_id": "9068", "text": "docstring: Return the content of the VV as a list."}
{"text_id": "9069", "text": "docstring: Determine the total amount of wrapping paper required."}
{"text_id": "9070", "text": "docstring: > int\nGet the alpha of the selection."}
{"text_id": "9071", "text": "docstring: The handler will be called from a timer."}
{"text_id": "9072", "text": "docstring: Multi-linear interpolation in the LUT"}
{"text_id": "9073", "text": "docstring: Check that the item does not exist."}
{"text_id": "9074", "text": "docstring: Module caching, it helps with not having to import again and again same modules."}
{"text_id": "9075", "text": "docstring: Renders stack traces of those executions which failed"}
{"text_id": "9076", "text": "docstring: build a default probe on the beginning and end of RNA"}
{"text_id": "9077", "text": "docstring: Home page for app (and project)"}
{"text_id": "9078", "text": "docstring: Creates the entire documentation.\nParameters\n\nmodel : Model to document / validate\nfeature_set : Feature set to document / validate on"}
{"text_id": "9079", "text": "docstring: a model defined in OpenAPI\nKeyword Args:\n_check_type (bool): if True, values for parameters in openapi_types\nwill be type checked and a TypeError will be\nraised if the wrong type is input.\nDefaults to True\n_path_to_item (tuple/list): This is a list of keys or values to\ndrill down to the model in received_data\nwhen deserializing a response\n_spec_property_naming (bool): True if the variable names in the input data\nare serialized names, as specified in the OpenAPI document.\nFalse if the variable names in the input data\nare pythonic names, e.g. snake case (default)\n_configuration (Configuration): the instance to use when\ndeserializing a file_type parameter.\nIf passed, type conversion is attempted\nIf omitted no type conversion is done.\n_visited_composed_classes (tuple): This stores a tuple of\nclasses that we have traveled through so that\nif we see that class again we will not use its\ndiscriminator again.\nWhen traveling through a discriminator, the\ncomposed schema that is\nis traveled through is added to this set.\nFor example if Animal has a discriminator\npetType and we pass in \"Dog\", and the class Dog\nallOf includes Animal, we move through Animal\nonce using the discriminator, and pick Dog.\nThen in Dog, we will make an instance of the\nAnimal class but this time we won't travel\nthrough its discriminator because we passed in\n_visited_composed_classes = (Animal,)\nid (str): Message identifier. [optional]  # noqa: E501\ntype (str): Message type. [optional]  # noqa: E501\nendpoint (str): endpoint on which messages destined for the recipient are received.. [optional]  # noqa: E501\nrouting_keys ([str]): [optional]  # noqa: E501"}
{"text_id": "9080", "text": "docstring: Deletes a key/value pair from the server\nRaises ``ClientException`` and socket errors"}
{"text_id": "9081", "text": "docstring: Return the nominal size of image in angstrom in namedtuple (x, y) assuming no pre-termination while scanning.\nReturns\n\n"}
{"text_id": "9082", "text": "docstring: Method running the validation on both chemistry and plasma parameters,\nand checking if they are both consistent with each other.\n\nRaises\n\n"}
{"text_id": "9083", "text": "docstring: Turns a flattened dict into a nested one, e.g.\n\nParameters\n\ndict to be un-flattened\nsep: separator with which the nested keys are separated\nrecursive: bool, default: False\nWhether to also un-flatten sub-dictionaries recursively.\n\nReturns\n\nthe nested dictionary."}
{"text_id": "9084", "text": "docstring: Show memory size as a float value in the biggest measurement units"}
{"text_id": "9085", "text": "docstring: img (PIL Image or Tensor): Image to be transformed."}
{"text_id": "9086", "text": "docstring: Called when a tracking session is finalised"}
{"text_id": "9087", "text": "docstring: GEts the location of where to write calls to a magic mock file to."}
{"text_id": "9088", "text": "docstring: Returns the (row, col) of the base which point lies within."}
{"text_id": "9089", "text": "docstring: Resolves symbolic refs and duplicated submodule names."}
{"text_id": "9090", "text": "docstring: Turn RabbitMQ charm SSL config option off.\nTurn ssl charm config option off, confirm that it is disabled\non every unit."}
{"text_id": "9091", "text": "docstring: which features are categorical.\nfind their feature value pairs"}
{"text_id": "9092", "text": "docstring: Read single transaction from database with given transaction ID / transaction hash"}
{"text_id": "9093", "text": "docstring: This function takes a numpy array  and returns a list .\nThe list  should have one element for each red light in the\nimage. Each element of  should itself be a list, containing\nfour integers that specify a bounding box: the row and column index of the\ntop left corner and the row and column index of the bottom right corner (in\nthat order). See the code below for an example.\n\n"}
{"text_id": "9094", "text": "docstring: Adds empty accumulators to all `public_partitions` and returns those\nempty accumulators joined with `col`."}
{"text_id": "9095", "text": "docstring: Given a list of module names, skip the test if any of them dont exist"}
{"text_id": "9096", "text": "docstring: Use up all except for one output.\nThis provides ideal behavior for the default HTTP client\nconfiguration, since only a maximum of two simultaneous connections\nare allowed.  The remaining one output will let us signal the client\nat will without preventing the client from establishing new\nconnections."}
{"text_id": "9097", "text": "docstring: Change path to next possible glob with extension"}
{"text_id": "9098", "text": "docstring: Create a swarm plot of points for each candidate network, highlighting those with\nabove a threshold of coverage of workplaces.\n\nParameters\n\n"}
{"text_id": "9099", "text": "docstring: Returns a *subscribable* :class:`float`-typed Connector, publishing the currently measured power factor from the\nTasmota device."}
{"text_id": "9100", "text": "docstring: Return the resource corresponding to the article translations"}
{"text_id": "9101", "text": "docstring: Writes the list of notes to the __pad__ buffer.\nfiles: a list of files to process.\n\nwhether files is the result of a query or not.\n\nwhether we should keep the order of the list given (implies queried=True).\n\nKeeps a cache so we only read the notes when the files have been modified."}
{"text_id": "9102", "text": "docstring: Generator that parses a line of bgp summary table and returns a dict compatible with NAPALM\nExample line:\n10.2.1.14       4    10  472516  472238      361    0    0     3w1d 9"}
{"text_id": "9103", "text": "docstring: Update configuration files for a host."}
{"text_id": "9104", "text": "docstring: Test that realm entity gets set in super-entity"}
{"text_id": "9105", "text": "docstring: Does everything recv_video_frame_ndarray does, but also computes a number\nof useful / interesting debug metrics including effective framerate, bitrate,\nand frame size information.  Optionally, if you specify a format string to the\n`draw_stats` function, this information will be used to draw a line of text\nonto the image in the top-right corner with this debug information.\n\n\n\nThis method gives you an additional 'frame_stats' value every frame, which is a\ndict with the following keys.\n\n\n\nThis dictionary is available in the draw_stats string as arguments to a python\nstr.format() call, allowing you to quickly change the debug string in the top corner\nof the video.\n\nIn order to use this, you will need to install [PyAV],\n[numpy], and [PyOpenCV]."}
{"text_id": "9106", "text": "docstring: Retrieve unique identifier assigned during buckling.\nReturns\n\nIf instance is buckled the return the `uid`. Otherwise raise error."}
{"text_id": "9107", "text": "docstring: calculates the altitude and azimuth, given an ra, dec, time, and observatory location\nParameters.\n\nfloat\nThe right ascension of the target (in degrees)\n\nfloat\nThe declination of the target (in degrees)\n\nastropy.time.Time object\nContains the time of the observation.\nCan also contain the observatory location if\nlat and lon are not given.\n\nfloat\nThe latitude of the observatory, in degrees.\nNot needed if given in the obstime object\n\nfloat\nThe longitude of the observatory, in degrees.\nNot needed if given in the obstime object\n\n\n\nThe altitude and azimuth of the object, both in degrees."}
{"text_id": "9108", "text": "docstring: Find the sales records and copy the data into the sales database table."}
{"text_id": "9109", "text": "docstring: Parse version into a comparable Version tuple."}
{"text_id": "9110", "text": "docstring: Returns a SVG as a string in memory, without touching the disk"}
{"text_id": "9111", "text": "docstring: Dispatch messages from the remote server to their recipient.\nNote: Deserialization and dispatch occurs on a seperate greenlet, this only\nreads the message off the wire."}
{"text_id": "9112", "text": "docstring: Turn the wifi led on."}
{"text_id": "9113", "text": "docstring: \n\nReturns\n\nlabel image representing a semantic segmentation: pixel intensities represent label class"}
{"text_id": "9114", "text": "docstring: Round to nearest dollar. Format nicely."}
{"text_id": "9115", "text": "docstring: Computes the (weighted) mean of the given values.\n\nFor estimation of the metric over a stream of data, the function creates an\n`update_op` operation that updates these variables and returns the `mean`.\n\nIf `weights` is `None`, weights default to 1. Use weights of 0 to mask values."}
{"text_id": "9116", "text": "docstring: Apply token drop to both src and tgt side tokens."}
{"text_id": "9117", "text": "docstring: Return the state of the sensor."}
{"text_id": "9118", "text": "docstring: returns a Boolean True if any of the nonnull elements of the\nSpParVec instance are True (nonzero), and False otherwise."}
{"text_id": "9119", "text": "docstring: Creates an optimizer based on the algorithm name."}
{"text_id": "9120", "text": "docstring: End and keep the current sketch stroke"}
{"text_id": "9121", "text": "docstring: The relative humidity in RH %"}
{"text_id": "9122", "text": "docstring: Build a list of ciphers that are supported by the backend in use."}
{"text_id": "9123", "text": "docstring: returns a full symmetric matrix filled\nthe distinct elements of v, filled row-wise"}
{"text_id": "9124", "text": "docstring: A function to write file parsing error logs to a markdown file report"}
{"text_id": "9125", "text": "docstring: Downloads a list of url for each synset based on a mapping."}
{"text_id": "9126", "text": "docstring: Create Role object from configuration spec"}
{"text_id": "9127", "text": "docstring: Checks that simple deepcopy works (it uses the mechanism as pickle/unpickle)"}
{"text_id": "9128", "text": "docstring: Receive data from serial until expected string appears or timeout occurs"}
{"text_id": "9129", "text": "docstring: Return (an approximation to) a list of all possible attribute\nnames reachable via the attributes of OBJECT, i.e. roughly the\nleaves of the dictionary tree under it."}
{"text_id": "9130", "text": "docstring: Trains a subgroup-fair model using provided data and specified parameters."}
{"text_id": "9131", "text": "docstring: Given a normal distribution with a given mean and varience, compute the\nlog probability of a value from that distribution."}
{"text_id": "9132", "text": "docstring: Check if all gift cards assigned to checkout are available."}
{"text_id": "9133", "text": "docstring: Main entry of this script.\nParameters\n\nlist of str\nArguments received from the command line."}
{"text_id": "9134", "text": "docstring: Print a Fibonacci series up to n."}
{"text_id": "9135", "text": "docstring: Generate the HTML code of this `WebPageItem`.\nThis coroutine is called as part of the rendering of the `WebPage`, the `WebPageItem` has been added to. It must\nbe overriden by inheriting classes to return HTML code of the specific widget class to be inserted into the\npages HTML code. To create interactive widgets, the HTML code should contain tags with `data-widget` and\n`data-id` attributes."}
{"text_id": "9136", "text": "docstring: Force the variables constructed in this class to live in the sonnet module.\nWraps a method on a sonnet module.\n\nFor example the following will create two different variables."}
{"text_id": "9137", "text": "docstring: Set up the habitica sensors."}
{"text_id": "9138", "text": "docstring: Allow set default values for undefined flags."}
{"text_id": "9139", "text": "docstring: This function encloses the symbolic computation of the Lotka-Volterra equation for each species. It builds an array in which each component describes the relative species Lotka-Volterra equation."}
{"text_id": "9140", "text": "docstring: Return the londontube_vertices dataframe\nContains the following fields.\n\n"}
{"text_id": "9141", "text": "docstring: Calculate the coefficients of an airfoil.\nIncludes lift, drag, moment, friction etc coefficients."}
{"text_id": "9142", "text": "docstring: Write out a list of header dictionaries in JSON format\nsuitable for CRDS bestrefs --load-pickles,  inventing \"case\"\nnames for each combination."}
{"text_id": "9143", "text": "docstring: Parameters\nimg,pad, normalization\n\n> if normalization is True, intensity values of image is divided by 255.\npad -> if the model's output image is cropped by some pad value, the\n\nReturns\n\nGround truth, Input and bicubic images : numpy array\nInput is the input image for model"}
{"text_id": "9144", "text": "docstring: Read supplementary text file for Scopus API key"}
{"text_id": "9145", "text": "docstring: Create an altair chart object on html that plots 2 parallel plots about waiting times for 50% and 90% by procedure from a given dataframe.\nParameters\n\ndf : dataframe\nThe dataframe to plot.\n\nReturns\n\nhtml\nThe returned chart as html.\n\nExamples\n\n"}
{"text_id": "9146", "text": "docstring: Applies XPath rules to select DOM elements.\nParameters.\n\nThe XPath rule used to select DOM elements.\n\n"}
{"text_id": "9147", "text": "docstring: Load training / val data of laser scans plus heading and range to nearby waypoints"}
{"text_id": "9148", "text": "docstring: Clamp reel weight between -1 and 1."}
{"text_id": "9149", "text": "docstring: Process a status update that is received from an executor thread for\nany metadata that is relevant to this policy ."}
{"text_id": "9150", "text": "docstring: Parses networks into fully qualified Compute Engine network URLs.\nThe URLs will be a compute/v1 reference."}
{"text_id": "9151", "text": "docstring: Handle when an item is collapsed"}
{"text_id": "9152", "text": "docstring: Returns a generator object which visits all nodes in this tree in\nthe BFS (Breadth-first) order."}
{"text_id": "9153", "text": "docstring: Read service config for a tenant from a JSON file."}
{"text_id": "9154", "text": "docstring: Return token name from a index over profiles object."}
{"text_id": "9155", "text": "docstring: Fetch Overkiz data via event listener."}
{"text_id": "9156", "text": "docstring: Calculate log probability under the distribution."}
{"text_id": "9157", "text": "docstring: Updates the transformation V and the dimensionality of the clustered space m\nThe later only happens if pruneM is true"}
{"text_id": "9158", "text": "docstring: Make a GET request to the API"}
{"text_id": "9159", "text": "docstring: Outer wrapper in order to specify method name"}
{"text_id": "9160", "text": "docstring: Update assuming the gradients are finite."}
{"text_id": "9161", "text": "docstring: Load a CSV given its file path."}
{"text_id": "9162", "text": "docstring: Add a Renren login provider to the application."}
{"text_id": "9163", "text": "docstring: Get all unavailabilities  # noqa: E501\nThis method makes a synchronous HTTP request by default.\n\n"}
{"text_id": "9164", "text": "docstring: Before redeploy get started or on redeploy happens stop the tasks and deregister task definition"}
{"text_id": "9165", "text": "docstring: Create simple log file without starting from scratch.\nnickname -- Name your output log file.\ncmd -- Whether nickname will come from command line argument or not.\nwith_random -- Add random number to filename of output log file\nto avoid overwrites or not to add.\n\nAt the top of file just add line e.g..\n\n\n\nand output will be written to log file also."}
{"text_id": "9166", "text": "docstring: A helper routine to verify certain properties of a wavefront FITS file,\nas requested by some test routine."}
{"text_id": "9167", "text": "docstring: Returns the solution to the original problem given the inverse_data."}
{"text_id": "9168", "text": "docstring: Generate object setter function for ACL related field"}
{"text_id": "9169", "text": "docstring: Yields scopes created by comprehension generators."}
{"text_id": "9170", "text": "docstring: Check for PROXY definition in dsc.conf.\nAll we must do is set the appropriate value in the environment."}
{"text_id": "9171", "text": "docstring: Find the mean distance between a contour\nand a reference point"}
{"text_id": "9172", "text": "docstring: Converts basic python objects to a string representation"}
{"text_id": "9173", "text": "docstring: Determines whether the given Range object overlaps with this Range object."}
{"text_id": "9174", "text": "docstring: Load the data for your ML pipeline. Will be fed into `train`."}
{"text_id": "9175", "text": "docstring: Seperate function from save to allow it to\neasily be overridden by a subclass."}
{"text_id": "9176", "text": "docstring: Read optimal way in class STOP, way in coords\nand transfers in the way"}
{"text_id": "9177", "text": "docstring: Download and apply a diff to the local working copy."}
{"text_id": "9178", "text": "docstring: Delete all data from the specified project, one part at a time.\nThis method purges all data associated with the specified project. The\nfollowing is purged:\nAll issues of the project.\nProject config.\nSaved queries.\nFilter rules.\nFormer locations.\nLocal ID counters.\nQuick edit history.\nItem stars.\nProject from the DB.\n\nReturns a generator whose return values can be either issue\nids or the specified project id. The returned values are intended to be\niterated over and not read."}
{"text_id": "9179", "text": "docstring: Run rpmdev-bumpspec on the upstream spec file: it enables\nchanging version and adding a changelog entry"}
{"text_id": "9180", "text": "docstring: Return smallest element of the heap."}
{"text_id": "9181", "text": "docstring: Mouse press over the strand for erase tool"}
{"text_id": "9182", "text": "docstring: Populate the dictionary of KVStores by examining the files under this\ngroup's root directory."}
{"text_id": "9183", "text": "docstring: Returns the model properties as a dict"}
{"text_id": "9184", "text": "docstring: Finish creating this lessage page:\nThe slug for a lesson is the last directory in path (since the\nmain lesson file is always 'index.html').\nExtract the keypoints from this lesson for inclusion in the main\nindex page."}
{"text_id": "9185", "text": "docstring: Record info about a vistrail we used."}
{"text_id": "9186", "text": "docstring: Generate a mask, 0 means empty bbox, 1 means non-empty bbox."}
{"text_id": "9187", "text": "docstring: Function-wide test app client"}
{"text_id": "9188", "text": "docstring: Count the number of successful individuals."}
{"text_id": "9189", "text": "docstring: Topic name used for this specific test."}
{"text_id": "9190", "text": "docstring: Submit a job with the given parameters."}
{"text_id": "9191", "text": "docstring: Computes path distance between a pair of words"}
{"text_id": "9192", "text": "docstring: Set the name of the Named Range. The name is mandatory, if a Named\nRange of the same name exists, it will be replaced. Name must contains\nonly alphanumerics characters and '_', and can not be of a cell\ncoordinates form like 'AB12'.\n\n\n\n- str"}
{"text_id": "9193", "text": "docstring: Transpose all value dicts for the generation of datum files."}
{"text_id": "9194", "text": "docstring: \n\n`from_proto` function converts protocol buffer into a Python object, and\nreturns the object"}
{"text_id": "9195", "text": "docstring: Handle server `exec' command.\nExecute specially formatted input string and return specially formatted\nresponse."}
{"text_id": "9196", "text": "docstring: Plot observed data and spline fits of selected genes."}
{"text_id": "9197", "text": "docstring: Construct a digitised pulse based on a pulse definition,\nto be placed in the preview sequence."}
{"text_id": "9198", "text": "docstring: Build a list of program specific options.\n:param options: requested options."}
{"text_id": "9199", "text": "docstring: ctypes.create_string_buffer variant which does not add a trailing null\nwhen init_or_size is not a size."}
{"text_id": "9200", "text": "docstring: Solver function. Takes a 2D list of integers, starting from and including 0, in equal-length rows,\nand returns a list of single-letter string moves"}
{"text_id": "9201", "text": "docstring: Create masks for the hidden layers."}
{"text_id": "9202", "text": "docstring: Sets the period value of the PWM signal in nanoseconds."}
{"text_id": "9203", "text": "docstring: formats a line so that lib-SVM is happy"}
{"text_id": "9204", "text": "docstring: Check if the given image is integer-encoded."}
{"text_id": "9205", "text": "docstring: find all devices's wifi ssid"}
{"text_id": "9206", "text": "docstring: Run the service using the default development.ini from the service dir."}
{"text_id": "9207", "text": "docstring: Run the Bellman-Ford distance vector algorithm on the given node in the\ngiven topology. Return a dictionary, containing the distance vector and\nthe parent vector to each node. Parent vector should contain a\n2-tuple. For example, parent[node_1_ofid] = (node_2_ofid,\nnode_2_tp_ofid), where node_2_tp_ofid is the OF id of the termination\npoint (port) which can be used to DIRECTLY reach node_2\n\nRequired bandwidth is the bandwidth along a path requested by an edge device."}
{"text_id": "9208", "text": "docstring: Sync the queries for all of the rooms.\nThis is run on application startup."}
{"text_id": "9209", "text": "docstring: Convert vocab to id. Vocab not in dict map will be map to _UNK"}
{"text_id": "9210", "text": "docstring: fills artefact regions (assumed negative) with average of the perimeter"}
{"text_id": "9211", "text": "docstring: Play the Match End sound effect."}
{"text_id": "9212", "text": "docstring: Check that the output path can be created. Create the HDF file and\nadd some metadata from the exporter.\n\nIf newly created, then the `state` is stored into the disk.\n\nIf the output file already exists on disk, then it is just appended to. So, care must\nbe taken by the caller that old files are removed, if so desired."}
{"text_id": "9213", "text": "docstring: Handle shape and axes arguments for n-dimensional transforms.\nReturns the shape and axes in a standard form, taking into account negative\nvalues and checking for various potential errors.\nParameters\n\nx : array_like\nThe input array.\nshape : int or array_like of ints or None\nThe shape of the result.\n\nshape : array\nThe shape of the result. It is a 1D integer array.\naxes : array\nThe shape of the result. It is a 1D integer array."}
{"text_id": "9214", "text": "docstring: The input to the stream is a list of pairs: (id, value)\nwhere id is the id of a sensor and value is a measurement\ngenerated by that sensor. The agent outputs the average\nvalues generated by each sensor."}
{"text_id": "9215", "text": "docstring: Case 'list child Function/State/Functional ELement'"}
{"text_id": "9216", "text": "docstring: Ask user if he/she wants to play again or not"}
{"text_id": "9217", "text": "docstring: Loops waiting for any balance change on the lnurl and returns True if this\nhappens before the timeout"}
{"text_id": "9218", "text": "docstring: Heading cli argument type\nArguments:\nvalue: the heading\n\nReturn the heading or raises ArgumentTypeError if the heading is not\nvalid"}
{"text_id": "9219", "text": "docstring: Get the scores for each bot pair meetings list and store in\nself.interaction_scores. Tally up the total score for each bot and store\nin self.bot_info_by_id['total']"}
{"text_id": "9220", "text": "docstring: Reorigin the the contents of the positions table."}
{"text_id": "9221", "text": "docstring: Delete a single tasks  # noqa: E501\nThis method makes a synchronous HTTP request by default.\n\n"}
{"text_id": "9222", "text": "docstring: Uses pydicom to stack an alphabetical list of DICOM files. TODO: Make it\ntake slice_order into account."}
{"text_id": "9223", "text": "docstring: Generate a path for redis."}
{"text_id": "9224", "text": "docstring: Function which finds intersection points of given quadratic equation (y = ax^2 + bx + c).\nThe function returns 2 integers, if given equation has two different solutions.\nIt returns one integer, if given equation has two equal solutions.\nIt also returns one integer, when variable a is zero and function intersects x-axis.\nIt returns None, if given equation has no real solutions."}
{"text_id": "9225", "text": "docstring: Computes the distances between all pairs of words; returns them as a tensor."}
{"text_id": "9226", "text": "docstring: Generate instance masks for shapes of the given image ID."}
{"text_id": "9227", "text": "docstring: Take a tensor containing integers representing labels and return an dim0x...dim(D-1)x4\nmatrix where each label has been replaced by a color looked up in colormap\nand D is the number of dimensions in the original tensor.\ncolormap entries must be strings like plotly.express style colormaps.\nalpha is the value of the 4th channel. If a list, it is cycled and zipped\nwith the colormap to give that alpha channel for each corresponding color.\ncolor_class_offset allows adding a value to the color class index to force\nuse of a particular range of colors in the colormap. This is useful for\nexample if 0 means 'no class' but we want the color of class 1 to be\ncolormap[0].\nIf labels in img are a contiguous set of integers, then, for speed,\nlabels_contiguous=True can be set and this will iterate from the smallest\nthrough the greatest label, otherwise this iterates through the set of\nlabels as determined from img.\nif no_map_zero is True, then label 0 is not mapped (its items are left as\n[0,0,0,0] in the output)"}
{"text_id": "9228", "text": "docstring: Override to create a link to the Greenhopper velocity chart."}
{"text_id": "9229", "text": "docstring: Set resource's assigned resource type name."}
{"text_id": "9230", "text": "docstring: Construct and return a :class:`SmoothModelRun` instance that\nmodels the 14C component additional to the original model run."}
{"text_id": "9231", "text": "docstring: Higher ordered function that returns a\nfunction to wrap text with color code."}
{"text_id": "9232", "text": "docstring: Select an absolute date range for a location selector."}
{"text_id": "9233", "text": "docstring: Implement L{IStreamServerEndpoint.listen} to listen on a TCP\nsocket"}
{"text_id": "9234", "text": "docstring: Convert latitude and longitude data to UTM as a list of coordinates.\nInput\n\nlist of points given in decimal degrees (latitude, longitude) or\nlatitudes: list of latitudes   and\nlongitudes: list of longitudes\nfalse_easting (optional)\nfalse_northing (optional)\n\nOutput\n\nList of converted points\nzone:   Common UTM zone for converted points\n\nNotes\n\nAssume the false_easting and false_northing are the same for each list.\nIf points end up in different UTM zones, an ANUGAerror is thrown."}
{"text_id": "9235", "text": "docstring: Attach the provided callable to the future.\nThe provided function is called, with this future as its only argument,\nwhen the future finishes running."}
{"text_id": "9236", "text": "docstring: Convert the text_annotations from GCV output to an :obj:`Layout` object."}
{"text_id": "9237", "text": "docstring: Generates the string (based on the properties passed to the\ndecorator) used to create one register on the database, this\nregister will 'fit' in a database created by create_table_sql\nfunction\n:param cls: The class passed by the decorator"}
{"text_id": "9238", "text": "docstring: Mask a loss by using a tensor filled with 0 or 1 and average correctly."}
{"text_id": "9239", "text": "docstring: Parse XML into input parameters\nOverloaded to pass XML to getInputSpecifications\n@ In, xml, xml.etree.ElementTree.Element, XML element node\n@ Out, InputData.ParameterInput, the parsed input"}
{"text_id": "9240", "text": "docstring: Run the TF-IDF algorithm and evaluate the results, return a df"}
{"text_id": "9241", "text": "docstring: Build the graph with the previously stored config file."}
{"text_id": "9242", "text": "docstring: Replace a linked node with a fork."}
{"text_id": "9243", "text": "docstring: Create plugin URL to given name/method with arguments."}
{"text_id": "9244", "text": "docstring: Checks whether user has access to an analysis\nParameters\n\nuser : User object\nUser to check\nanalysis_id : int\nAnalysis to check access for\n\nRaises\n\nRuntimeError\nTried to access analysis that user does not have access to"}
{"text_id": "9245", "text": "docstring: Generates a log-Mel spectrogram from text."}
{"text_id": "9246", "text": "docstring: Define how metadata are derived from the spectrograph files."}
{"text_id": "9247", "text": "docstring: Populates this workspace data from a sublime-text window\nArguments:\nwindow -- the window to populate from"}
{"text_id": "9248", "text": "docstring: Sets the function that runs when the mouse is pressed."}
{"text_id": "9249", "text": "docstring: Raise an exception if the response indicates an error condition."}
{"text_id": "9250", "text": "docstring: ls       # Lists test results                                            .\nsummary  # Display a summary of the result : SLAs and statistics         .\njunitsla # Output SLA results to a file with junit format                .\nput      # Update the name, description or quality-status of the result  .\ndelete   # Remove a result                                               .\nuse      # Remember the test result you want to work on. Example : neoload\n|          test-results use MyTest#1 ; neoload test-results summary      ."}
{"text_id": "9251", "text": "docstring: build job script from statement."}
{"text_id": "9252", "text": "docstring: The main MMC loop.\nParameters\n\nrounds : int\nThe number of rounds of optimisation to perform.\ntemp : float, optional\nThe temperature (in K) used during the optimisation.\nverbose : bool, optional\nIf true, prints information about the run to std out."}
{"text_id": "9253", "text": "docstring: Returns decimal list for corresponding ipv4 string"}
{"text_id": "9254", "text": "docstring: Show or hide the viewer corresponding to the clicked button."}
{"text_id": "9255", "text": "docstring: Once float and point data is loaded, generate a track geometry\nfor each float from the point data. This has less information in it\nthan the point data and is used for geospatial queries"}
{"text_id": "9256", "text": "docstring: Summarize using the merge rules given"}
{"text_id": "9257", "text": "docstring: This is the function called by the bot\nwhen the bot sees a text message."}
{"text_id": "9258", "text": "docstring: A function to execute SSM Document on an EC2 instance"}
{"text_id": "9259", "text": "docstring: Compute a random amount of hashes at random positions in the file to ensure integrity after the copy (mitigate TOCTOU attacks)"}
{"text_id": "9260", "text": "docstring: Return the number of AVPs that matches the specified code (and vendor_id if nonzero)"}
{"text_id": "9261", "text": "docstring: Return a filehandle to the downloaded data."}
{"text_id": "9262", "text": "docstring: r\"\"\"Creates a UrlMap resource in the specified project\nusing the data included in the request."}
{"text_id": "9263", "text": "docstring: Parse the API response from biothings API using POST method"}
{"text_id": "9264", "text": "docstring: Combine variables from student model and teacher model by self defined loss."}
{"text_id": "9265", "text": "docstring: Emulate every opcode from pc.\nProcess instruction until the end"}
{"text_id": "9266", "text": "docstring: Periodically read the transmitter and send the values over UDP"}
{"text_id": "9267", "text": "docstring: Run the whole pipeline of scTenifoldNet\nReturns\n\npd.DataFrame\nDifferential regulation result dataframe"}
{"text_id": "9268", "text": "docstring: r\"\"\"\nReturn the minimum feedback vertex set of a (di)graph.\n\nThe minimum feedback vertex set of a (di)graph is a set of vertices that\nintersect all of its cycles.  Equivalently, a minimum feedback vertex\nset of a (di)graph is a set `S` of vertices such that the digraph `G-S`\nis acyclic. For more information, see the"}
{"text_id": "9269", "text": "docstring: Initiate the search process and return the best performance parameters"}
{"text_id": "9270", "text": "docstring: Caption in the main paper:\nFigure 3: Bot strategies. (a) Early bot support after a viral\nlow-credibility article is first shared. We consider a sample of 60,000\naccounts that participate in the spread of the 1,000 most viral stories\nfrom low-credibility sources. We align the times when each article\nfirst appears. We focus on a one-hour early spreading phase following\neach of these events, and divide it into logarithmic lag intervals.\nThe plot shows the bot score distribution for accounts sharing the articles\nduring each of these lag intervals.\n\nInput data and instructions.\n\n`fn`: sampled mention tweets that both the mentioning accounts and\nmentioned accounts are in file 'M3a_sampled_users_with_score.csv'."}
{"text_id": "9271", "text": "docstring: Output the piecewise expression expr."}
{"text_id": "9272", "text": "docstring: Matches term glob against short-name, keywords and categories."}
{"text_id": "9273", "text": "docstring: Count the frequencies of each bases in sequence including every letter"}
{"text_id": "9274", "text": "docstring: Creates new QApplication or returns current instance if existing.\n\nname           (str) Application name, passed to Qt"}
{"text_id": "9275", "text": "docstring: Plot the cutoff lines to each plot"}
{"text_id": "9276", "text": "docstring: Add Ornstein-Uhlenbeck noise to action tensor.\nWarning:\nOrnstein-Uhlenbeck noise generator is shared. And you cannot\nspecify OU noise of different distributions\nfor each of the last dimension of your action."}
{"text_id": "9277", "text": "docstring: Activate a port if it's inactive."}
{"text_id": "9278", "text": "docstring: Return username:servername or username\nUsed in logging for consistency with named servers."}
{"text_id": "9279", "text": "docstring: We automatically balance the sample classes, run prediction if X_test is not None"}
{"text_id": "9280", "text": "docstring: Spread-spectrum attack against blur defenses (gray-box scenario)."}
{"text_id": "9281", "text": "docstring: Creation of the color composite VRT file.\nParameters\n\nstr\nFull path to the output VRT file.\ninfiles: list[str]\nA list of paths pointing to the linear scaled measurement backscatter files.\noverviews: list[int]\nInternal overview levels to be defined for the created VRT file.\noverview_resampling: str\nResampling method applied to overview pyramids."}
{"text_id": "9282", "text": "docstring: Does any jobs after self has moved"}
{"text_id": "9283", "text": "docstring: Should be overridden if action has any validation"}
{"text_id": "9284", "text": "docstring: Save a map file to an image file"}
{"text_id": "9285", "text": "docstring: Mock function for implementing test responses from the server for put_votes() function."}
{"text_id": "9286", "text": "docstring: Function to draw text on the the start screen.\nParameters.\n\nself (self): keyword we can access the attributes and\nmethods of the class in python\n\nidentifies the screen on which to draw text\n\ntext (str): Words that are desired to be on the pygame\nscreen\n\nsize (int):  Provides the desired text size of words\n\nx (int): x coordinate of the text on the screen (changing\nthe coordinate moves the text horizontally)\n\ny (int): y coordinate of the text on the screen (changing\nthe coordinate moves the text vertically)\n\ncolor (preset color code from pygame): Determines the color\nof the text\n\n"}
{"text_id": "9287", "text": "docstring: This function is used to create a pie chart."}
{"text_id": "9288", "text": "docstring: Convert a skew notation stiffness matrix to a full stiffness tensor."}
{"text_id": "9289", "text": "docstring: Loads the a directory of preset files, merges the result into one preset."}
{"text_id": "9290", "text": "docstring: Mocked collision function which never reports that any two geometries have collided."}
{"text_id": "9291", "text": "docstring: Reset last moused over item tracker on mouse entering the window."}
{"text_id": "9292", "text": "docstring: Creates a single User consent."}
{"text_id": "9293", "text": "docstring: Calculate the ranks for a bye/forfeit round\nForfeits:\nIf the round is set to `lenient_late`, it uses average speaks\nOtherwise, it uses speaks of 0.0\n\nUses average speaks"}
{"text_id": "9294", "text": "docstring: Parses an HTML and crates a CadasterEntry object"}
{"text_id": "9295", "text": "docstring: Add a deck to the guild."}
{"text_id": "9296", "text": "docstring: Loads training dataset.\nDetailed description."}
{"text_id": "9297", "text": "docstring: original_type is the type of E in the expression E.var"}
{"text_id": "9298", "text": "docstring: Calls metric functions for a single output."}
{"text_id": "9299", "text": "docstring: Copies items from a source list to a destination list"}
{"text_id": "9300", "text": "docstring: Creates cart_item_name attribute if none exists.\nCalculates new cart_item_total on every save"}
{"text_id": "9301", "text": "docstring: Get all project collaborators with one of the given access levels."}
{"text_id": "9302", "text": "docstring: Fetch the current plugin issues.yaml if it exists and return its\ncontents or None if it doesn't exist yet."}
{"text_id": "9303", "text": "docstring: This method is to verify Shifting image element by 100 pixels."}
{"text_id": "9304", "text": "docstring: Use to remove all active instances when spot market fails"}
{"text_id": "9305", "text": "docstring: Increment the current qualification score for a worker, on a\nqualification with the provided name."}
{"text_id": "9306", "text": "docstring: Sends the given request to the server and asserts common checks"}
{"text_id": "9307", "text": "docstring: Fingerprint and enumerate information from website. (ext)\nTOOLS: whatweb"}
{"text_id": "9308", "text": "docstring: Use 'vcftools/bcftools merge' to merge multiple vcf files for\nthe same cohort into a single vcf.\nIf vcfs are not indexed, it will throw an error.\nIf bcftools is not installed, it will throw an error"}
{"text_id": "9309", "text": "docstring: Creating a file name from an index."}
{"text_id": "9310", "text": "docstring: Pull docker images needed for testing."}
{"text_id": "9311", "text": "docstring: Checks whether the specified array `x` contains valid values. A value is considered valid if it is\nnot a no-data value (null) and\na finite number (only if it is a number). The definition of finite and infinite numbers follows the\nIEEE Standard 754.\n\nParameters\n\nx : float or int or str\nThe data to check.\n\nReturns\n\nbool :\nTrue if the data is valid, otherwise False."}
{"text_id": "9312", "text": "docstring: This method is used to generate Values for the Object and Return the respective Sensor Data.\nInitializes new class scoped instance (self.newSensor) of SensorData with its specific type which is taken from class scoped Variables.\n\nChecks if Randomizder flag is enabled. If yes -> Sets Random Value between min and max to the newSensor value.\nor Else, it will simply get the current value from the dataset and then point towards the next index.\n\n"}
{"text_id": "9313", "text": "docstring: Return a planetary system list in the given data releases."}
{"text_id": "9314", "text": "docstring: Look for dot11 packets that aren't to or from broadcast address,\nare type 1 or 2 (control, data), and append the addr1 and addr2\nto the list of deauth targets."}
{"text_id": "9315", "text": "docstring: Get / set the currency used for monetary values.\nReturn: str"}
{"text_id": "9316", "text": "docstring: Creates or updates the custom resource provider."}
{"text_id": "9317", "text": "docstring: Convert corpus to D3M dataframe of shape Nx1\nN is the number of sentences.\nThe column is of vary length with metadata text."}
{"text_id": "9318", "text": "docstring: Calibrate out the preamp gain with a lookup table\ngenerated by CAEN with charge injection."}
{"text_id": "9319", "text": "docstring: Returns first directory containing .git file checking the dir and parent dirs."}
{"text_id": "9320", "text": "docstring: Disconnect from the Windscribe server."}
{"text_id": "9321", "text": "docstring: Update operation for adding batch of images to Coco evaluator."}
{"text_id": "9322", "text": "docstring: Free the resource of the embedding indices cause they are not necessary later."}
{"text_id": "9323", "text": "docstring: Publish current state to anyone listening"}
{"text_id": "9324", "text": "docstring: Event Handler when ActionButton \"New\" is pressed."}
{"text_id": "9325", "text": "docstring: Returns the hosts and ports of the Docker containers."}
{"text_id": "9326", "text": "docstring: Construct a Signal instance from an XML node exported from a Vector\nCANoe .dbc file."}
{"text_id": "9327", "text": "docstring: This function fetch sentences in self.reader by its `nextSentence`\nmethod and yield rules."}
{"text_id": "9328", "text": "docstring: Fully qualify the name of an extension and ensure it exists."}
{"text_id": "9329", "text": "docstring: Internal function that exports current file"}
{"text_id": "9330", "text": "docstring: Create an image.\nParameters:\nimage_format(k4a_image_format_t): The format of the image that will be stored in this image container.\n\nReturns #K4A_RESULT_SUCCEEDED on success. Errors are indicated with #K4A_RESULT_FAILED.\n\nThis function is used to create images of formats that have consistent stride. The function is not suitable for\ncompressed formats that may not be represented by the same number of bytes per line.\n\nFor most image formats, the function will allocate an image buffer of size height_pixels * stride_bytes.\nBuffers #K4A_IMAGE_FORMAT_COLOR_NV12 format will allocate an additional height_pixels / 2 set of lines (each of\nstride_bytes). This function cannot be used to allocate #K4A_IMAGE_FORMAT_COLOR_MJPG buffers."}
{"text_id": "9331", "text": "docstring: The name of the property in CloudFormation for these tags.\nNormally this is ``tags``, but Cognito UserPool uses UserPoolTags"}
{"text_id": "9332", "text": "docstring: Fire off workers to work on tasks."}
{"text_id": "9333", "text": "docstring: Return log soft evidence probabilities for each word token.\nReturns\n\nE_logsoftev_Edges : nDistinctEdges x K matrix\nentry n,k gives E log p( edge_ij | community k)"}
{"text_id": "9334", "text": "docstring: A backend pipeline does not personalize the query of anon users."}
{"text_id": "9335", "text": "docstring: cut event waveform from continous waveform based on phase file generated by\nHYPOINVERSE\n\n"}
{"text_id": "9336", "text": "docstring: This test demonstrates that doing two requests.post calls to the same endpoint\nworks fine."}
{"text_id": "9337", "text": "docstring: Return the full path to the user log dir for this application, using a virtualenv location as a base, if it is\nexists, and falling back to the host OS's convention if it doesn't.\n\n\n\n"}
{"text_id": "9338", "text": "docstring: \n\nIf a solver does not support dzn output, then its PyMzn implementation\nshould take care of parsing the solver output and return a dzn\nequivalent."}
{"text_id": "9339", "text": "docstring: Decoder that given an encoded report_file returns a dict of the report"}
{"text_id": "9340", "text": "docstring: For each diamond in the array, set the midpoint of that diamond to be\nthe average of the four corner points plus a random value."}
{"text_id": "9341", "text": "docstring: Parse some content into 'ET' tree and root elements."}
{"text_id": "9342", "text": "docstring: Compute Cronbach's alpha for one or more scales."}
{"text_id": "9343", "text": "docstring: Open a new connection for an incoming client."}
{"text_id": "9344", "text": "docstring: callback should take the following arguments and return nothing:\ntopic (str): Topic receiving message.\npayload (bytes): Payload of message.\ndup (bool): DUP flag. If True, this might be re-delivery of an earlier attempt to send the message.\nqos (QoS): Quality of Service used to deliver the message.\nretain (bool): Retain flag. If True, the message was sent as a result of a new subscription being made by the client.\nkwargs (dict): Forward-compatibility kwargs."}
{"text_id": "9345", "text": "docstring: remove the given user from the given group."}
{"text_id": "9346", "text": "docstring: Checks if structure is ordered, meaning no partial occupancies in any\nof the sites."}
{"text_id": "9347", "text": "docstring: Returns True if the tokn at offset is an oper."}
{"text_id": "9348", "text": "docstring: Validates that all objects in a filter indexing operation are valid\nfilters or filter expressions"}
{"text_id": "9349", "text": "docstring: This metric denotes the fraction of the classes in the data that are predicted by the ruleset R.\nReturns:\n1. fraction per target attribute, averaged over the different targets\n2. a map from target attribute to fraction for that target attr\n\nBoundary value:\n0.0 if no class is predicted\n1.0 every class is predicted by some rule in R.\n\nThe same for decision lists, but we not consider the ELSE clause (the default prediction)."}
{"text_id": "9350", "text": "docstring: Flatten a correlation matrix into a pandas Dataframe.\nParameters\n\nPandas Dataframe\nThe correlation matrix to be flattened.\n\nReturns\n\nPandas DataFrame\nThe flattened correlation matrix."}
{"text_id": "9351", "text": "docstring: Find and return lines of text from the package_metadata.py\nfile. The lines are bounded by the tags listed and are placed\nin the files listed.\n\n\n\n"}
{"text_id": "9352", "text": "docstring: Save the map with Id map_id into output_file."}
{"text_id": "9353", "text": "docstring: Using K-fold cross validation, this function evaluates root mean squared error on training folds and validation folds"}
{"text_id": "9354", "text": "docstring: Changes move_up to False if True and vice versa."}
{"text_id": "9355", "text": "docstring: An endpoint that returns a list of previously created channels\nin case of a GET request. And create a new channel in case of a\nPOST request."}
{"text_id": "9356", "text": "docstring: Perform a paginated index query for backlinked objects."}
{"text_id": "9357", "text": "docstring: Use a predefined python library to expand the given string.\nReturn the decompressed string"}
{"text_id": "9358", "text": "docstring: Count the unique items in a list.  Similar to calling collections.Counter(items).items(), but it doesn't require\nthat items be hashable."}
{"text_id": "9359", "text": "docstring: Returns a :class:`.RecombinationMap` instance in which the recombination\nrate is constant over a chromosome of the specified length.\nThe legacy ``num_loci`` option is no longer supported and should not be used."}
{"text_id": "9360", "text": "docstring: wcs factory function, returns a version specific WebCoverageService object"}
{"text_id": "9361", "text": "docstring: Format the supplied dict as specified."}
{"text_id": "9362", "text": "docstring: Adds a layer instance on top of the layer stack."}
{"text_id": "9363", "text": "docstring: Worker using REQ socket to do LRU routing"}
{"text_id": "9364", "text": "docstring: Gets the length range that the logs length is in, this is used for the Stand Class' report methods"}
{"text_id": "9365", "text": "docstring: Return captured text from stderr, if capturing is enabled\nversionadded:: 3.0"}
{"text_id": "9366", "text": "docstring: Test Golden Config with empty input"}
{"text_id": "9367", "text": "docstring: Adds a new forward propagating single-frequency pump to the simulation."}
{"text_id": "9368", "text": "docstring: Clears previous in-memory saved values from node calls."}
{"text_id": "9369", "text": "docstring: Gets the artifact details for the given run and file_type."}
{"text_id": "9370", "text": "docstring: Changes global case parameter and loads in new possible timestamps, selecting the first for inspection. This change triggers updatetime. This is a callback for selectcase.\nattr:       bokeh mandated arg, does nothing\nold:        bokeh mandated arg, does nothing\nnew:        bokeh mandated arg, index that specifies the case to use"}
{"text_id": "9371", "text": "docstring: Applies supplied classifer to determine a measurement's quality."}
{"text_id": "9372", "text": "docstring: Method to update pending imeis to approved in the table"}
{"text_id": "9373", "text": "docstring: Wrap the call to emulated_roku.close."}
{"text_id": "9374", "text": "docstring: Returns the cumulative product of an array along a given axis treating\nNot a Numbers (NaNs) as one."}
{"text_id": "9375", "text": "docstring: Cleans up data values\n1. Unwraps LDAP attributes\n2. Removes empty arrays\n3. Unwraps single value arrays\n4."}
{"text_id": "9376", "text": "docstring: Constructs a `Config` from a Python dictionary of parameters."}
{"text_id": "9377", "text": "docstring: Creates a graph from saved GraphDef file and returns a Graph object."}
{"text_id": "9378", "text": "docstring: Toggle the dropdown. Steps happening here."}
{"text_id": "9379", "text": "docstring: Concating those who found new partners and those who didn\"t"}
{"text_id": "9380", "text": "docstring: Change the contents of the file acl."}
{"text_id": "9381", "text": "docstring: Finds formatted current date and time"}
{"text_id": "9382", "text": "docstring: Executes an SQL query on the database."}
{"text_id": "9383", "text": "docstring: Validate a tree of tagged basic data types against any relevant\nschemas, both at the root level and anywhere a tag is found with a\nmatching schema."}
{"text_id": "9384", "text": "docstring: Helper function that blocks until a CSS selector is found on the page."}
{"text_id": "9385", "text": "docstring: String to match in the right column."}
{"text_id": "9386", "text": "docstring: Run a pass through the non-blocking tx loop."}
{"text_id": "9387", "text": "docstring: Perform a local Gaussian fit to the pixels near the mouse cursor.\nIf the fit is accetable, a new line will be added to the detections\nprovided that the line is not too close to another line already in\nthe detections list."}
{"text_id": "9388", "text": "docstring: Redraws the visualization with the specified field and particles state."}
{"text_id": "9389", "text": "docstring: Return the user's Browserstack credentials"}
{"text_id": "9390", "text": "docstring: This function is designed to operate in the opposite direction of\n_simplify_dictionary. It takes a dictionary of simple python objects\nand iterates through it to determine whether objects in the collection\nneed to be converted into more advanced types. In particular, it\nconverts binary objects into torch Tensors where appropriate."}
{"text_id": "9391", "text": "docstring: Get a list of recent outbound faxes (which does not include batch\nfaxes)."}
{"text_id": "9392", "text": "docstring: make a directory (dir) if it doesn't exist"}
{"text_id": "9393", "text": "docstring: Reads input data num_epochs times."}
{"text_id": "9394", "text": "docstring: Remove those images that can't be accessed due to donwload errors\n:param accepted_formats: filter of imgs format accepted"}
{"text_id": "9395", "text": "docstring: Return the status message that should be displayed at the beginning\nof the current mode."}
{"text_id": "9396", "text": "docstring: Load the initialGuess Group.\nThe group is populated using setdefault to avoid\noverwriting values that were previously (intentionally)\nmodified."}
{"text_id": "9397", "text": "docstring: Create the layout for the main menu and return it as a list.\nReturns\n\nmainMenuLayout : list\nThe layout to be used by the main menu GUI."}
{"text_id": "9398", "text": "docstring: Ensure the message decodes to what we expect."}
{"text_id": "9399", "text": "docstring: Return a json dictionary representing this model."}
{"text_id": "9400", "text": "docstring: Returns an xml tree object with annotations for the generated image\n@param annotations: List of coordinates of the image elements\n@return tree"}
{"text_id": "9401", "text": "docstring: Sleep for the requested amount of time using the appropriate async\nmodel.\n\nThis is a utility function that applications can use to put a task to\nsleep without having to worry about using the correct call for the\nselected async mode."}
{"text_id": "9402", "text": "docstring: This helper method returns number of factor by an\nindividual or globally\ngives global stats if uid is not given\nfactor: antibiotics(aid)/pathogens(pathid)/problems(pid)/syndromes(sid)"}
{"text_id": "9403", "text": "docstring: Called when the epoch begins."}
{"text_id": "9404", "text": "docstring: Gets client token, that will be used as a customer's identificator for\nclient-side tokenization of the chosen payment method."}
{"text_id": "9405", "text": "docstring: Get a specific header given the args and kwargs of an Http Request call."}
{"text_id": "9406", "text": "docstring: Whether should we play sound effects (activation etc) or not.\nReduced sound spam."}
{"text_id": "9407", "text": "docstring: Scans the original_root directory for English articles.\nPopulates `self.articles_` with a list of Article objects representing\neach."}
{"text_id": "9408", "text": "docstring: Function to install pip.\nreturns boolean annotating if an error was raised or not"}
{"text_id": "9409", "text": "docstring: Performs the Fourier Amplitude Sensitivity Test (FAST) on model outputs.\nReturns a dictionary with keys 'S1' and 'ST', where each entry is a list of\nsize D (the number of parameters) containing the indices in the same order\nas the parameter file."}
{"text_id": "9410", "text": "docstring: Moves the robot base to the given goal state relative to its current\npose."}
{"text_id": "9411", "text": "docstring: creates a redis client on the HttpHandlers"}
{"text_id": "9412", "text": "docstring: Enforce DAG for step dependency tree"}
{"text_id": "9413", "text": "docstring: a function that returns the path properties (metrics, crossed elements) into a dict"}
{"text_id": "9414", "text": "docstring: Updates the content of the widget with new log records."}
{"text_id": "9415", "text": "docstring: Takes an array and detects the troughs using the local maximum filter.\nReturns a boolean mask of the troughs\nThis can be very useful in molecular siting later on."}
{"text_id": "9416", "text": "docstring: Set uid/gid of current process\nExecuted after fork but before exec by python.\n\nAlso try to chdir to the user's home directory."}
{"text_id": "9417", "text": "docstring: Returns the locations of the corners of an image as a numpy float32 array with dimensions (4,2)."}
{"text_id": "9418", "text": "docstring: Provides the Punkt word tokenizer."}
{"text_id": "9419", "text": "docstring: Patch a patch set into individual patches."}
{"text_id": "9420", "text": "docstring: Remove or replace characters that are unsafe for filename"}
{"text_id": "9421", "text": "docstring: Uploads relaminarisation time based on TimeIntegration object. Used to extend method upload_data implemented in\nthe class derived from TimeIntegration."}
{"text_id": "9422", "text": "docstring: Encode input images in latent space and compute mean and variance.\nReturn list containing mean and variance."}
{"text_id": "9423", "text": "docstring: Function resets ball position and stops its movement"}
{"text_id": "9424", "text": "docstring: Calculate the gradient of the expected log likelihood with respect to the covariance of a\nspecific mixture of Gaussian's component.\n\nParameters\n\ncomponent_index : int\nThe index of the component with respect to which we wish to calculate the gradient.\nconditional_ll : ndarray\nThe values log(p(y|f)) where f is approximated using samples and y is the output data.\n\nReturns\n\ngrad : ndarray\nThe value of the gradient."}
{"text_id": "9425", "text": "docstring: Add new sms data to the database."}
{"text_id": "9426", "text": "docstring: Create a new extended dataset.\nIndependents are specified as: (label, shape, type, unit)\nDependents are specified as: (label, legend, shape, type, unit)\n\nLabel and legend have the same meaining as in regular new()\nshape is a list of integers representing the shape of the array.\nFor A scalar column, use [1].\ntype is the column data type including a type tag if applicable.\nTypes use the labrad typetags, but only scalar types are supported.\ni:          32 bit integer\nv:          double precision floating point with unit.  Use v[] for scalar\nc:          double precision complex with unit.  Use c[] for scalar\ns:          string.  The string must be plain ASCII or UTF-8 encoded\nunicode (until labrad has native unicode support)\nArbitrary binary data is *not* supported.\nt:          Timestamp\nunit is the unit of the column.  Only applies for types 'v' and 'c'.\nIt *must* be an empty string ('') for i,s,t datatypes\n\nNote that any dataset created with this function that does not conform\nto the old style restrictions will show up as an empty dataset to legacy\ncode.  The name and parameters will be there, but no actual data.\n\nThe legacy format requires each column be a scalar v[unit] type."}
{"text_id": "9427", "text": "docstring: Create or update a trigger type db object in the db given trigger_type definition as dict."}
{"text_id": "9428", "text": "docstring: Plots the reduced space using a mainfold transformation"}
{"text_id": "9429", "text": "docstring: Returns the config dictionary for live tests."}
{"text_id": "9430", "text": "docstring: Makes a meme from a template with the passed UID using the given\ncaptions."}
{"text_id": "9431", "text": "docstring: Product of a list of numbers; ~40x faster vs np.prod for Python tuples"}
{"text_id": "9432", "text": "docstring: Delete a subscription\nEmpty response\nThis method makes a synchronous HTTP request by default.\n\n:param async_req bool\n:param str subscription_id: A UUID string identifying the subscription. (required)\n:param str enterprise_id: A UUID string identifying the enterprise. (required)\n:return: None\nIf the method is called asynchronously,\nreturns the request thread."}
{"text_id": "9433", "text": "docstring: Convert exception to a list of error dicts.\nEach error dict is shaped as follows.\n\n"}
{"text_id": "9434", "text": "docstring: Raise exception if a given user cannot share this community with a given privilege\nto a specific user."}
{"text_id": "9435", "text": "docstring: Create a DuplicateFlagError by providing flag name and values."}
{"text_id": "9436", "text": "docstring: Extracts 389-ds Hash Information"}
{"text_id": "9437", "text": "docstring: Computes the predicted values for the entire test set."}
{"text_id": "9438", "text": "docstring: receives job with data field containing following two keys:\nnode: string node_id\nstatus: 'active' or 'inactive' status\nOn inactive event, this function triggers a flush of all\nnon-deleted endpoints currently learned on the inactive node\nOn active event, this function triggers a full epm refresh\nof all endpoints on the node.\n\nFor both events, this function returns a single job whose\ndata field contains a list of endpoint add/delete jobs with\nappropriate keys and parsed epm events."}
{"text_id": "9439", "text": "docstring: Sync remote so that the remote content of the current directory will\nbe the same as the local content."}
{"text_id": "9440", "text": "docstring: Uses the parameters of a FP cavity (and of the laser) to estimate the\nparameters of its matched gaussian beam."}
{"text_id": "9441", "text": "docstring: Displays 2 graphs:\nDPS over time\nDamage distribution by skill"}
{"text_id": "9442", "text": "docstring: Perform per-frame sequence evaluation."}
{"text_id": "9443", "text": "docstring: scale() applies scale transformations to each vertex of the 2d object."}
{"text_id": "9444", "text": "docstring: Shows info about the bot."}
{"text_id": "9445", "text": "docstring: Parameters\nmodel: Feed_forward_model obj\nObject representing the NN."}
{"text_id": "9446", "text": "docstring: Cleans the database by removing invalid blocks"}
{"text_id": "9447", "text": "docstring: symbolUploads_create  # noqa: E501\nBegins the symbol upload process for a new set of symbols for the specified application  # noqa: E501\nThis method makes a synchronous HTTP request by default.\n\n"}
{"text_id": "9448", "text": "docstring: Create a new Jinja2 environment."}
{"text_id": "9449", "text": "docstring: Include handlers from another collector into this one."}
{"text_id": "9450", "text": "docstring: Method to serialize instance value to integer to store in PostgreSQL"}
{"text_id": "9451", "text": "docstring: Duplicate selected objects and move them"}
{"text_id": "9452", "text": "docstring: Convert restructured text to basic text output.\nThis function removes most of the decorations added\nin restructured text.\n\nThis function is used to generate documentation we\ncan show to users in a cross platform manner.\n\nBasic indentation and list formatting are kept,\nbut many RST features are removed (such as\nsection underlines)."}
{"text_id": "9453", "text": "docstring: Connects this object to LabRAD and the RGA Server."}
{"text_id": "9454", "text": "docstring: Return ordered products to corresponding stocks."}
{"text_id": "9455", "text": "docstring: Resumes the watch from a stopped state."}
{"text_id": "9456", "text": "docstring: Generate an augmented image and adjust steering angle.\n(The steering angle is associated with the center image)"}
{"text_id": "9457", "text": "docstring: push 'node' one step further in its computation requirements\nself.intermediates_[node] either contains a list of values to be computed\nor an execution context"}
{"text_id": "9458", "text": "docstring: Input Self\nDescription This Method Generates all links of the main search query page and append it to\nself.links\n\nReturns Nothing"}
{"text_id": "9459", "text": "docstring: Returns the text with all formatting directives removed.\nNot to be confused with `raw`."}
{"text_id": "9460", "text": "docstring: Returns an array with the information content (right now, the derivative of the model)\nParameters.\n\nkglib.utils.DataStructures.xypoint instance\nThe model spectra (broadened if necessary)\n\n\n\nnumpy.ndarray with the information content (used for weights)"}
{"text_id": "9461", "text": "docstring: Update uptime and response time attributes."}
{"text_id": "9462", "text": "docstring: Sets status of the current experiment"}
{"text_id": "9463", "text": "docstring: Executes SQL and returns a list of dictionary with keys\nas column names.  Returns an empty list if no rows are\nreturned from SQL."}
{"text_id": "9464", "text": "docstring: In the case that a file is corrupted, move it to a quarantined\narea to allow replication to fix it."}
{"text_id": "9465", "text": "docstring: Instantiate from a zip file rather than a directory.\nParameters\n\nzfile\nPath to the archive file.\nuse_filenames : bool\nWhether to interpret axis angles using the filenames.\nSet to true for Elekta machines where the gantry/coll/couch data is not in the DICOM metadata."}
{"text_id": "9466", "text": "docstring: Returns the recall of given classification for class c."}
{"text_id": "9467", "text": "docstring: Generate new SMILES with one more token than the current SMILES by using the RNN model\nSMILES are selected is their probability is greater than 0.0001% according to the RNN model"}
{"text_id": "9468", "text": "docstring: Apply _train_transforms across a batch."}
{"text_id": "9469", "text": "docstring: Checks if the comment has at least one letter.\nArgs:\ntext: the comment to be checked\n\nTrue if the comment has at least one letter, False otherwise"}
{"text_id": "9470", "text": "docstring: Update the menu's options and controls for the current page."}
{"text_id": "9471", "text": "docstring: Initialize a graph with edge weights equal to one or the input value."}
{"text_id": "9472", "text": "docstring: Create policy_stat table which is specific to the account DB.\nNot a part of Pluggable Back-ends, internal to the baseline code."}
{"text_id": "9473", "text": "docstring: If we have a float key and are not a floating index\nthen try to cast to an int if equivalent"}
{"text_id": "9474", "text": "docstring: Takes a node we're leaving and, if necessary, performs cleanup\nrelated to moving it off of the stack"}
{"text_id": "9475", "text": "docstring: Launch probability tool on a database."}
{"text_id": "9476", "text": "docstring: Override some configuration values.\nThe keyword arguments are the names of configuration options to\noverride and their values.\n\nIf a group argument is supplied, the overrides are applied to\nthe specified configuration option group.\n\nAll overrides are automatically cleared at the end of the current\ntest by the fixtures cleanup process."}
{"text_id": "9477", "text": "docstring: Summary statistics Dataframe provided.\nThis returns feature stats on series using FeatureType summary method.\n\nExamples\n\n\n\nReturns"}
{"text_id": "9478", "text": "docstring: Receive a PIL Image instance of a GIF and return 2-tuple."}
{"text_id": "9479", "text": "docstring: Returns an array corresponding to the lengths of the\nscorable fields in the given document. It's up to the\ncaller to correlate the positions of the numbers in the\narray with the scorable fields in the schema."}
{"text_id": "9480", "text": "docstring: Read an AdbMessage from this transport."}
{"text_id": "9481", "text": "docstring: One-line constant-current configuration.\nif activate == True, also turns on the power supply"}
{"text_id": "9482", "text": "docstring: Encode DH domain parameters into DER-encoded format.\nCalculates the subprime if it isn't available."}
{"text_id": "9483", "text": "docstring: Compute the minimum intersection between two pairs\nof keypoints (filtered and unfiltered)."}
{"text_id": "9484", "text": "docstring: Binds to the LDAP server with the user's DN and password. Raises\nAuthenticationFailed on failure."}
{"text_id": "9485", "text": "docstring: Find a route matching the specified URI\nIf no matching route is found, None is returned"}
{"text_id": "9486", "text": "docstring: Manage the appliances that were not discovered automatically on LAN."}
{"text_id": "9487", "text": "docstring: Given CHANCE_FROM_0_TO_1,\nan array of chances of success for a series of trials,\nthis returns the chances\nfor each total possible number of successes."}
{"text_id": "9488", "text": "docstring: Finds all Filenodes that view self as a parent"}
{"text_id": "9489", "text": "docstring: This function check input is a integer value.\n:param input: unknown type object"}
{"text_id": "9490", "text": "docstring: Returns all datapoints for given sensor between unixtime start, end"}
{"text_id": "9491", "text": "docstring: Updated cached c array when rho changes."}
{"text_id": "9492", "text": "docstring: Function to upsample (transposed-convolution) image and\nuse for building decoder part of the network"}
{"text_id": "9493", "text": "docstring: Method to plot distribution of velocities by\ncolloid for array of velocity.\n\nParameters"}
{"text_id": "9494", "text": "docstring: Return str representation of obj, if s is a unicode object it's encoded\nwith utf8."}
{"text_id": "9495", "text": "docstring: Start MQTT client with setup that makes it a master."}
{"text_id": "9496", "text": "docstring: Evaluate lower and upper bounds."}
{"text_id": "9497", "text": "docstring: returns tuple (start, end) for the selected dates"}
{"text_id": "9498", "text": "docstring: Read & tokenize new line separated files."}
{"text_id": "9499", "text": "docstring: Read & save the calibration coefficients"}
{"text_id": "9500", "text": "docstring: Set up the Remove MQTT Device component."}
{"text_id": "9501", "text": "docstring: Return first child if expanded."}
{"text_id": "9502", "text": "docstring: Change the value of the first and last reference points (non user chosen points) such\nthat coordinates outside user picked regions have a linear fit applied"}
{"text_id": "9503", "text": "docstring: Get a new L{TestStompClient} connected to our test server.\nThe client will also be registered for close in the tearDown method."}
{"text_id": "9504", "text": "docstring: Builds a set of resnet visual encoders."}
{"text_id": "9505", "text": "docstring: Finds and returns the index with the highest average expected impact factor across all targets\nCan optionally return the value of the highest impact, as well.\n@ In, returnValue, bool, optional, returns the value of the index if True\n@ Out, point, tuple(int), polynomial index with greatest expected effect"}
{"text_id": "9506", "text": "docstring: Class Method that facilitates GET queries between the API and the client\nThis is useful for things like hitting /api/model/uuid with a GET request\n\nreturns a class instance if the resource returns an object matching the ID,\nor None if the response 404s.\nRaises if any other status code beyond OK or 404 is hit"}
{"text_id": "9507", "text": "docstring: Function that finds a user by account name and returns the user"}
{"text_id": "9508", "text": "docstring: Returns full information about a given flight.\nThis method requires all parameters."}
{"text_id": "9509", "text": "docstring: Logs into the TestLink web app"}
{"text_id": "9510", "text": "docstring: Compute pairwise similarity and mark vector with highest average to all with 1."}
{"text_id": "9511", "text": "docstring: Given batch of anchor descriptors and positive descriptors calculate distance matrix"}
{"text_id": "9512", "text": "docstring: call once to setup connection to dev/input/js0 and map buttons"}
{"text_id": "9513", "text": "docstring: Adds or removes cell from flagged cells. Returns int indicating view to flag or unflag cell."}
{"text_id": "9514", "text": "docstring: Checks to see if the player at the given `position` and `height`\nis colliding with any blocks in the world.\nParameters\n\nposition : tuple of len 3\nThe (x, y, z) position to check for collisions at.\nheight : int or float\nThe height of the player.\nReturns\n\nposition : tuple of len 3\nThe new position of the player taking into account collisions."}
{"text_id": "9515", "text": "docstring: Defines an helper function to generate links to scripts elements, by set names.\n1. it reads the file /configuration/scripts.js to generate the required script elements.\n2. if bundling is enabled, a single script element per set is generated, for bundled files.\n3. if also minification is enabled, a single script element per set is generated, for minified files.\n4. the same configuration file is read by Grunt.js to generate bundled and minified scripts upon publishing."}
{"text_id": "9516", "text": "docstring: Ensure migration files created have a descriptive\nname; if default name pattern is found, raise exception"}
{"text_id": "9517", "text": "docstring: Update dict from a TOML file."}
{"text_id": "9518", "text": "docstring: Load a subset of the PLC dataset.\ndataset_dir: Root directory of the dataset.\nsubset: Subset to load: train or val"}
{"text_id": "9519", "text": "docstring: Get or create a single Variable .\n\nSee the documentation of get_variable above (ignore partitioning components)\nfor details."}
{"text_id": "9520", "text": "docstring: Clustering of locations.\nCluster the stops of each individual in a TrajDataFrame. The stops correspond to visits to the same location at different times, based on spatial proximity [RT2004]_. The clustering algorithm used is DBSCAN (by sklearn [DBSCAN]_).\n\nParameters\n\ntdf : TrajDataFrame\nthe input TrajDataFrame that should contain the stops, i.e., the output of a `preprocessing.detection` function.\n\ncluster_radius_km : float, optional\nthe parameter `eps` of the function sklearn.cluster.DBSCAN, in kilometers.\n\nmin_samples : int, optional\nthe parameter `min_samples` of the function sklearn.cluster.DBSCAN indicating the minimum number of stops to form a cluster. The default is `1`.\n\nReturns\n\nTrajDataFrame\na TrajDataFrame with the additional column 'cluster' containing the cluster labels. The stops that belong to the same cluster have the same label. The labels are integers corresponding to the ranks of clusters according to the frequency of visitation (the most visited cluster has label 0, the second most visited has label 1, etc.).\n\nExamples\n\n\n\nReferences\n\n"}
{"text_id": "9521", "text": "docstring: Calculates time series features of the input time series\nParameters\n\n\n\nReturns\n\nA copy of the data frame with original time points and calculated features"}
{"text_id": "9522", "text": "docstring: Build a pre-defined topology from an NFFG stored in a file.\nThe file path is searched in CONFIG with tha name ``TOPO``."}
{"text_id": "9523", "text": "docstring: Objective function for minimization / maximization problem"}
{"text_id": "9524", "text": "docstring: Returns the Field subclass to be used, depending on the Packet\ninstance, or the default subclass.\n\nsince the Packet instance is not provided, we have to use a hack\nto guess it. It should only be used if you cannot provide the current\nPacket instance (for example, because of the current Scapy API).\n\nIf you have the current Packet instance, use ._find_fld_pkt_val() (if\nthe value to set is also known) of ._find_fld_pkt() instead."}
{"text_id": "9525", "text": "docstring: Construct the NamedTensor Protobuf.\nIncludes logic to create delta, compress tensors with the TensorCodec, etc."}
{"text_id": "9526", "text": "docstring: Update priorities of sampled transitions.\nsets priority of transition at index idxes[i] in buffer\nto priorities[i].\n\nParameters\n\n[int]\nList of idxes of sampled transitions\npriorities: [float]\nList of updated priorities corresponding to\ntransitions at the sampled idxes denoted by\nvariable `idxes`."}
{"text_id": "9527", "text": "docstring: Mark resource to be deleted. Resource will be deleted upon commit."}
{"text_id": "9528", "text": "docstring: Insert UTF8 encoded text at a position.  Works 'natively' in a\nunicode build of wxPython, and will also work in an ansi build if\nthe UTF8 text is compatible with the current encoding."}
{"text_id": "9529", "text": "docstring: Adds members of the modules to the respective lists."}
{"text_id": "9530", "text": "docstring: Determine an object count, supporting either querysets or regular lists."}
{"text_id": "9531", "text": "docstring: Given a VT340 HLS color return a VT340 RGB color.\nHue ranges from 0 to 360 degrees, 0 degrees is blue.\nLightness and Saturation range from 0 to 100 percent.\n\nR, G, B output is in the range from 0 to 100 percent."}
{"text_id": "9532", "text": "docstring: Loads sentences and labels from their corresponding files. Maps tokens and tags to their indices and stores\nthem in the provided dict d."}
{"text_id": "9533", "text": "docstring: Acts on extracted protocol messages based on header flags.\nAfter the incoming `data' is decrypted and authenticated, this method\nprocesses the received data based on the header flags.  Payload is\nwritten to the local application, new tickets are stored, or keys are\nadded to the replay table."}
{"text_id": "9534", "text": "docstring: For when a 'DELETE' request have been called on this element."}
{"text_id": "9535", "text": "docstring: Action to switch on the scene/group\nShould start with http:// or script."}
{"text_id": "9536", "text": "docstring: Stores the problem in the database."}
{"text_id": "9537", "text": "docstring: Revert value if snapshot exists."}
{"text_id": "9538", "text": "docstring: Add new Grease Pencil drawing brush for the active Grease Pencil datablock"}
{"text_id": "9539", "text": "docstring: adds column to specified csv file at given column index given column data in list form using pandas csv utilities"}
{"text_id": "9540", "text": "docstring: unpack serialized message in str into this message instance"}
{"text_id": "9541", "text": "docstring: Iterively call a function with the output of the previous call."}
{"text_id": "9542", "text": "docstring: Add new handler to collector."}
{"text_id": "9543", "text": "docstring: Iterate over batches in the test set"}
{"text_id": "9544", "text": "docstring: Used in ShiftImageData as a helper function"}
{"text_id": "9545", "text": "docstring: Return a list of all users in this organization. Users are identified\nby their login name. Note that this is computed from the teams in the\norganization, because GitHub does not currently offer a WebHook for\norganization membership, so converting org membership would lead to\nstale data."}
{"text_id": "9546", "text": "docstring: Adds an additional private key. This is to allow for key rotation. The default key to be used is the one set in\nthe instantiation of the factory."}
{"text_id": "9547", "text": "docstring: Fetch new state data for the sensor."}
{"text_id": "9548", "text": "docstring: Invoke the suplied pipeline template."}
{"text_id": "9549", "text": "docstring: change users group according to the user's risk level"}
{"text_id": "9550", "text": "docstring: Try to get our position from GPS"}
{"text_id": "9551", "text": "docstring: fill up a diagonal using token"}
{"text_id": "9552", "text": "docstring: returns True if capture is possible"}
{"text_id": "9553", "text": "docstring: Set system time if no NTP sync is available"}
{"text_id": "9554", "text": "docstring: Reads in the raw data stored in the data_directory\n(either sample, train, or test) and builds the required\nfeatures."}
{"text_id": "9555", "text": "docstring: arg   try discover a site feed address and add"}
{"text_id": "9556", "text": "docstring: Updates the duration and calories_burned for an exercise event."}
{"text_id": "9557", "text": "docstring: Load all imported environments from central DB\nand parse the PodData objects from environment definitions.\nSet all valid environments as remotes to control."}
{"text_id": "9558", "text": "docstring: Create configurattion file content that contains\none or more entries for the LDAP external user directory.\n\nFor example.\n\n"}
{"text_id": "9559", "text": "docstring: In the forward function we accept a Tensor of input data and we must return\na Tensor of output data. We can use Modules defined in the constructor as\nwell as arbitrary operators on Tensors."}
{"text_id": "9560", "text": "docstring: Make a colormap based on an increasing sequence of levels\nlevels* : increasing sequence\n\ncmap* : colormap, default = current colormap\n\nreverse* : False|True, whether to reverse the colormap\n\nreturn value : The new colormap"}
{"text_id": "9561", "text": "docstring: Validates that defined scalar types provide a proper implementation."}
{"text_id": "9562", "text": "docstring: Compute the \"weight\" of each LUT which is used as a heuristic for certain obfuscation functions.\nThe weight of a LUT is simply its fanout, i.e. how many LUTs its output feeds into."}
{"text_id": "9563", "text": "docstring: Fetches the capabilities of the given token on the given path.  # noqa: E501\nThis method makes a synchronous HTTP request by default.\n\n"}
{"text_id": "9564", "text": "docstring: A convenience method over filter_by_function."}
{"text_id": "9565", "text": "docstring: Filter results based that are within a (possibly open ended) daterange"}
{"text_id": "9566", "text": "docstring: Initialize the dictionary of dictionaries by examining the input map"}
{"text_id": "9567", "text": "docstring: this member function is wating while server working.\nthis loop is fundamentally infinity loop.\n\nParameters\n\nclient_data tuple\nneed clients socket and clients address"}
{"text_id": "9568", "text": "docstring: Print data in nice neat tables"}
{"text_id": "9569", "text": "docstring: Basic cleaning of the data by deleting manymissing columns,\nconstantcol and drop_col specified by the user"}
{"text_id": "9570", "text": "docstring: Transliterate the given value according to the rules.\nRules are set in the transliteration pack."}
{"text_id": "9571", "text": "docstring: Finds a column's index by its name."}
{"text_id": "9572", "text": "docstring: Return a string representing the form data, including attached files."}
{"text_id": "9573", "text": "docstring: Loads inputs into the mhe model"}
{"text_id": "9574", "text": "docstring: Handle a flow initialized by the user."}
{"text_id": "9575", "text": "docstring: Get dict of external-subnets to the routers of l3 policy"}
{"text_id": "9576", "text": "docstring: Formula price is sum of all foods prices"}
{"text_id": "9577", "text": "docstring: Build the app dictionary. The optional `label` parameter filters models\nof a specific app."}
{"text_id": "9578", "text": "docstring: Train a or load a `Sequential` model for text classification tasks"}
{"text_id": "9579", "text": "docstring: Estimate the Barycentric Correction from the Date and Target Coordinates\nReturns\n\nbarycentric_corrections : float\nBarycentric correction for targets in units of m/s"}
{"text_id": "9580", "text": "docstring: Checks that the blog post passes validation."}
{"text_id": "9581", "text": "docstring: Init distributed process group and run wrapped function."}
{"text_id": "9582", "text": "docstring: Initializes a new ZenML repository at the given path."}
{"text_id": "9583", "text": "docstring: Create a Molecule from a QCArchive molecule record or dataset entry\nbased on attached cmiles information.\n\nFor a molecule record, a conformer will be set from its geometry.\n\nFor a dataset entry, if a corresponding client instance is provided,\nthe starting geometry for that entry will be used as a conformer.\n\nA QCElemental Molecule produced from `Molecule.to_qcschema` can be round-tripped\nthrough this method to produce a new, valid Molecule.\n\nParameters\n\nqca_record : dict\nA QCArchive molecule record or dataset entry.\n\nclient : optional, default=None,\nA qcportal.FractalClient instance to use for fetching an initial geometry.\nOnly used if `qca_record` is a dataset entry.\n\n\n\nallow_undefined_stereo : bool, default=False\nIf false, raises an exception if oemol contains undefined stereochemistry.\n\nReturns\n\nmolecule : openff.toolkit.topology.Molecule\nAn OpenFF molecule instance.\n\nExamples\n\nGet Molecule from a QCArchive molecule record.\n\n\n\nGet Molecule from a QCArchive optimization entry.\n\n\n\nSame as above, but with conformer(s) from initial molecule(s) by providing client to database.\n\n\n\nRaises\n\nAttributeError : if the record dict can not be made from a record instance.\nif a client is passed, because the client could not retrive the initial molecule.\n\nKeyError : if the dict does not contain the canonical_isomeric_explicit_hydrogen_mapped_smiles.\n\nInvalidConformerError : silent error, if the conformer could not be attached."}
{"text_id": "9584", "text": "docstring: Adds a bid to the bid manager"}
{"text_id": "9585", "text": "docstring: Prepare content for a rootfs partition i.e. create a partition\nand fill it from a /rootfs dir.\n\nCurrently handles ext2/3/4, btrfs and vfat."}
{"text_id": "9586", "text": "docstring: Create visibility lists for plotly buttons. trace_lengths and visible_list must be in the correct order."}
{"text_id": "9587", "text": "docstring: Extract data from pandas.DataFrame for labels"}
{"text_id": "9588", "text": "docstring: updates patient intervention and resource utilization"}
{"text_id": "9589", "text": "docstring: Return the nodeids that can be removed by recursively trimming\nIf leaves is True (by default), trim leaves; if False, trim roots"}
{"text_id": "9590", "text": "docstring: Saves or adds a new profile to the JSON."}
{"text_id": "9591", "text": "docstring: Creates an optimizer, as specified by the config."}
{"text_id": "9592", "text": "docstring: Searches for something on Google, returning the top 10 results.\nSafe mode is enabled based on whether or not you're\nin an NSFW channel.\n\n(Bot Needs: Embed Links, Add Reactions, and Read Message History)\n\n"}
{"text_id": "9593", "text": "docstring: Add co-expression clusters, based on LSTrAP output (MCL clusters)"}
{"text_id": "9594", "text": "docstring: Read the output of the ReviewAutoPilot mrjob, returning a\ntransition distribution. The transition distribution is a\ndictionary with category keys. Each category key points to\nanother dictionary, which contains word keys, which contain\nanother set of dictionaries, which contain the probability of\ntransitioning to the the next word.\n\nHere's an example.\n\n\n\nThis means that for the category Food, the word 'hot' has a\n100% probability of being followed by the word 'dog'."}
{"text_id": "9595", "text": "docstring: This method formats returns a proper 'YYYY-MM-DD' string or a subpart of it  if not all information available.\nSee Tests for more information."}
{"text_id": "9596", "text": "docstring: Loads Psyonix bot configs and records some data about skill level."}
{"text_id": "9597", "text": "docstring: Download a directory from Google Cloud Storage."}
{"text_id": "9598", "text": "docstring: Draws the header onto the canvas."}
{"text_id": "9599", "text": "docstring: Checks if line contains prompt on target system."}
{"text_id": "9600", "text": "docstring: (internal coordinates of the water molecule)\nrOH            O-H bond distance\nthetaHOH       H-O-H bond angle"}
{"text_id": "9601", "text": "docstring: Listens for VIRA; ignores if something else is heard."}
{"text_id": "9602", "text": "docstring: Called when a new item gets selected in the list."}
{"text_id": "9603", "text": "docstring: Computes the safe set boundary based on the analytic solution.\nThe boundary of the safe set for the double integrator is determined by\ntwo parabolas and two line segments."}
{"text_id": "9604", "text": "docstring: Plots the learning curves of a baseline and a fine-tuned model for each of the train and validation datasets."}
{"text_id": "9605", "text": "docstring: Return the backend name for *frontend*."}
{"text_id": "9606", "text": "docstring: \n\nIn this case, this function will keep iterating till all inliers are within\na rule."}
{"text_id": "9607", "text": "docstring: Skips the node coercion if the value is `None` and directly returns it."}
{"text_id": "9608", "text": "docstring: whenever a mouse button is released"}
{"text_id": "9609", "text": "docstring: Returns a filtered list with strings that end with '.pdf'\nKeyword arguments:\nfilepaths -- List of filepath strings"}
{"text_id": "9610", "text": "docstring: Materializes the Tensor objects in subnetwork_reports using sess.\nThis converts the Tensors in subnetwork_reports to ndarrays, logs the\nprogress, converts the ndarrays to python primitives, then packages them\ninto `adanet.subnetwork.MaterializedReports`."}
{"text_id": "9611", "text": "docstring: Download the PDB file from PDB FTP server by providing a list of pdb id."}
{"text_id": "9612", "text": "docstring: Finds any connections to the relatives\nof the mesh and gets the attribute\nto trigger DG evaluation of connections\nFIXME Must be faster way of doing this"}
{"text_id": "9613", "text": "docstring: Convert a method from NdArray into a function that takes any PythonValue and\nconverts it into an NdArray if possible and runs the method on it.\n\nThe input method can either be.\n\nA method with only one argument: self (which must be a NdArray)\nA method with three or more arguments. The first argument is self, the last one must\nbe the pos and the values in between are all PythonValues"}
{"text_id": "9614", "text": "docstring: Logs settings used for the run"}
{"text_id": "9615", "text": "docstring: Aggregate rule groups for customer.\nKeyword arguments:\nbody -- full body payload, not required when using other keywords.\nList of dictionaries.\n\nThis method only supports keywords for providing arguments.\n\nThis method does not support body payload validation.\n\ndict object containing API response.\n\nHTTP Method: POST\n\n"}
{"text_id": "9616", "text": "docstring: Sets the new address of the device."}
{"text_id": "9617", "text": "docstring: Contract all auxiliary edge elements (if contract_aux_edge == False, create low resistance edges instead)."}
{"text_id": "9618", "text": "docstring: True iff dtype is nonstructured or every sub dtype is the same"}
{"text_id": "9619", "text": "docstring: This function computes LCM\ncalculated from GCD by Euclidean Algorithm."}
{"text_id": "9620", "text": "docstring: Converts a pretrained tree and cluster size into a\nset of labels and probabilities."}
{"text_id": "9621", "text": "docstring: The List LocalNetworkGateways opertion retrieves all the local network\ngateways stored.\n\n\n\nresource_group_name (string): The name of the resource group.\n\n\n\nResponse for ListLocalNetworkGateways\nApi service call"}
{"text_id": "9622", "text": "docstring: Writes a mesh to collada file format."}
{"text_id": "9623", "text": "docstring: Converts a csv to a structured array\nParameters\n\nfin : file-like object\nfile-like object containing csv\ndelimiter : str\nCharacter used to delimit csv fields\nheader : bool\nIf True, assumes the first line of the csv has column names\ncol_names : list of str or None\nIf header is False, this list will be used for column names\n\nReturns\n\nnumpy.ndarray\nstructured array corresponding to the csv\n\nIf header is False and col_names is None, diogenes will assign\narbitrary column names"}
{"text_id": "9624", "text": "docstring: Adds a basic control endpoint to the device.\nDoes not add any request handlers. If you want standard request handlers."}
{"text_id": "9625", "text": "docstring: Determine whether receptor atom belongs to residue sidechain or backbone."}
{"text_id": "9626", "text": "docstring: Easy adaptation of the training script for Tensorpack Faster-RCNN.\nTrain Faster-RCNN from Scratch or fine-tune a model using Tensorpack's training API. Observe the training with\nTensorpack callbacks and evaluate the training progress with a validation data set after certain training intervals.\n\nTensorpack provides a training API under TF1. Training runs under a TF2 installation if TF2 behavior is deactivated."}
{"text_id": "9627", "text": "docstring: function to train model - over all data"}
{"text_id": "9628", "text": "docstring: Checks to see if the passed-in line is sufficient to end the current statement.\nThere are a few different things to check.\n\nA statement is only over if all of the following are met:\n+ There is an even number of backticks (no unclosed bash injections)\n+ The indention level is zero AND the line is not an emptystring.\n+ The indention level is greater than zero AND the passed-in line is an empty line."}
{"text_id": "9629", "text": "docstring: This method is called when the datacache has established a connection\nto the server.\n> we can get information about out GUI elements, and start building it."}
{"text_id": "9630", "text": "docstring: Adds experience to the buffer."}
{"text_id": "9631", "text": "docstring: Extends the array with the given values"}
{"text_id": "9632", "text": "docstring: Return a sequence of discord.Role converted from SubRole."}
{"text_id": "9633", "text": "docstring: Execute a .soil file with a .use file and get the result\nas a .sex file, that is, the file with the evaluation result\nembedded. Change outAndErr just like if the engine returned\nthe text.\n\nThe implementation is:\n1. first create the trace (.stc) with executeSoilFileAsTrace\n2. merge the soil file and trace file with merge\nIf the file contains no soil statements at all the content is\ncopied directly to the .sex file with 00001 like marker to\nmimics what happend with the regular process."}
{"text_id": "9634", "text": "docstring: Returns list of tuples of books mentioned and guest who mentioned it"}
{"text_id": "9635", "text": "docstring: A tuple representing the current linear acceleration values on the X, Y, and Z\naxes in meters per second squared"}
{"text_id": "9636", "text": "docstring: Predict the next state given the current state."}
{"text_id": "9637", "text": "docstring: Given a name, makes it pythonic.\nremoves leading dashes\nreplaces remaining dashes with underscores\nchecks for keywords and appends a trailing underscore\nchecks for leading numbers and appends a leading underscore"}
{"text_id": "9638", "text": "docstring: Given a list of png files, pass to eog for viewing.\nIf specified in `config`, remove them when done"}
{"text_id": "9639", "text": "docstring: Returns the file name converted to an OS-specific path\nThe \"file_name\" attribute may not be directly usable,\nespecially in OSes other than Windows. Raises ValueError if\nthe file name is unsuitable for the current OS."}
{"text_id": "9640", "text": "docstring: Set up the geometry optimizations for a transition for a structure, i.e. using\nISIF = 2. By default, it is assumed that the initial structure is already\noptimized, unless the user specifically requests its optimization.\n\nIf requested, a charge density calculation will be set up for the\n\"host structure\", i.e. the structure with vacancies at the initial and\nfinal locations of the migrating ion. This can be used later to provide an\nestimated path for the nudged elastic band calculations. (WIP)"}
{"text_id": "9641", "text": "docstring: Make sure the udev rules look good."}
{"text_id": "9642", "text": "docstring: In the case of discrete ranges (integer, date), then we normalise the values\nso it is in the form [start,finish), the same way that postgres does.\nIf the lower value is None, we normalise this to (None,finish)"}
{"text_id": "9643", "text": "docstring: Converts DMLab world coordinates to maze coordinates.\nInspired from LuaMazeGeneration::FromWorldPos, with the big difference that\nFromWorldPos uses (LUA) 1-based indexing."}
{"text_id": "9644", "text": "docstring: Return a new ``MonoCut`` that will lazily perturb the volume while loading audio."}
{"text_id": "9645", "text": "docstring: If labels are already recorded, make sure the check boxes match."}
{"text_id": "9646", "text": "docstring: Yield the same day of each month. Defaults to the first day.\nYielded values are datetime.date objects.\n\nIf day is a positive number, return that date for each month,\nstarting with startDate.\n\nIf day is zero or negative, return the same date counting\nbackwards from the end of the month.\n\nIf day specifies a day which does not appear in every month,\nthen the closest valid date within that month will be used instead.\n\nIf startDate is greater than what would otherwise be the first date\nin the sequence, that first item is not yielded; instead, the next\nitem becomes the first item yielded.\n\nIf endDate is less than what would otherwise be the last date in the\nsequence, that last item is not yielded, and the sequence ends."}
{"text_id": "9647", "text": "docstring: Secure least significant bit of a."}
{"text_id": "9648", "text": "docstring: r\"\"\"Add configuration options specific in the executable type\nbefore the libraries are configured."}
{"text_id": "9649", "text": "docstring: Map the data in data_linear into a hilbert curve."}
{"text_id": "9650", "text": "docstring: Present Image as a recognition probe. Nothing is returned; rather, the\nresponse is recorded in self.response. Note that this means that any\nvalue currently in self.response will be overwritten.\n\nKeyword Parameters:\nallowed_keys: keys that can be pressed to respond to the probe;\ndefaults to O and N.\nbegin_time: the time, in milliseconds, that must elapse before a\nresponse can be made; defaults to 0.\nfinish_time: the number of milliseconds from probe onset that can\nelapse before the subject runs out of time to make a response.\nThe default is None, in which case no time limit is imposed.\nc: pygame.time.Clock object; defaults to None, in which case one\nis created.\nfps: frames per second; defaults to 30.\nexit_keys: keys that cause the program to close if pressed;\ndefaults to escape.\nfiles: any files that need to be closed if the program closes;\ndefaults to an empty tuple."}
{"text_id": "9651", "text": "docstring: Moves a delayed or buried job into the ready queue."}
{"text_id": "9652", "text": "docstring: Vertically flip the given image."}
{"text_id": "9653", "text": "docstring: Destroys the session with the given key."}
{"text_id": "9654", "text": "docstring: clear existing tables and re-initialize database."}
{"text_id": "9655", "text": "docstring: a str with the @ of the user that you want to reply to at the beginning of the str.\ntweetToReply: tweet's id that you want to reply.\npost a reply to a tweet."}
{"text_id": "9656", "text": "docstring: Parity evaluator based on current class indices."}
{"text_id": "9657", "text": "docstring: Open the view and run the thread."}
{"text_id": "9658", "text": "docstring: Delete files and directories inside given directory for which regex matches."}
{"text_id": "9659", "text": "docstring: Make a copy of this FreeformDataSet.\nReturns\n\n"}
{"text_id": "9660", "text": "docstring: Enable reporting of values for the whole port."}
{"text_id": "9661", "text": "docstring: Method that takes in a number and returns a contact that matches that number."}
{"text_id": "9662", "text": "docstring: Return values that are to be shown in repr string."}
{"text_id": "9663", "text": "docstring: Load all fixtures for given nodes.\nIf no nodes are given all fixtures will be loaded."}
{"text_id": "9664", "text": "docstring: stops the given thread forcefully if it is alive"}
{"text_id": "9665", "text": "docstring: Get the ingredients for an item"}
{"text_id": "9666", "text": "docstring: Run an action for a task which is an Observable and has has properties\n'node' and 'NOTIFY_FAILED'. Returns True on success, and calls\ntask.notify(NOTIF_FAILURE) and returns False on failure."}
{"text_id": "9667", "text": "docstring: Handle the POST REST API call."}
{"text_id": "9668", "text": "docstring: Load a dfk around entire test suite, except in local mode.\nThe special path `local` indicates that configuration will not come\nfrom a pytest managed configuration file; in that case, see\nload_dfk_local_module for module-level configuration management."}
{"text_id": "9669", "text": "docstring: Generate filtered diamond database name."}
{"text_id": "9670", "text": "docstring: Create method.\nSend information to Trello cards."}
{"text_id": "9671", "text": "docstring: Return response with the content in the format requested\nAvailable formats:\nJSON\nXML\nJSONP\nCSV"}
{"text_id": "9672", "text": "docstring: Perform video inference for the given saved model."}
{"text_id": "9673", "text": "docstring: Count the number of features ot the same kind in the pharmacophore.\nReturns\n\ncounter : dict\nDictionary with the count of each feature"}
{"text_id": "9674", "text": "docstring: Returns if there is any word in the trie that starts with the given prefix."}
{"text_id": "9675", "text": "docstring: Returns either a dictionary or a string depending on the 'content-type' of the response."}
{"text_id": "9676", "text": "docstring: Function that renames the variables in a standardized way"}
{"text_id": "9677", "text": "docstring: compute the log likelihood for a set of datapoints given\na parameterization"}
{"text_id": "9678", "text": "docstring: This gets called every time a reporter is failing and has been removed\nfrom the reporters of a NetTest.\nOnce a report has failed to be created that net_test will never use the\nreporter again.\n\nXXX hook some logic here.\nnote: failure contains an extra attribute called failure.reporter"}
{"text_id": "9679", "text": "docstring: Produce messages to a Kafka topic.\nBy default, connect to a kafka cluster at localhost:9092."}
{"text_id": "9680", "text": "docstring: split data into two parts with a given ratio."}
{"text_id": "9681", "text": "docstring: Parse, check and prepare arguments for main script."}
{"text_id": "9682", "text": "docstring: If _unauthorized_handler is not registered, This is called when the user is required to log in.\nOtherwise, this will be called."}
{"text_id": "9683", "text": "docstring: Calculates descriptors for a given compunds as SMILES strings\nParameters\n\nsmiles SMILES strings of a compound\ncalculator the calculator module\n\nReturns\n\narray of descriptor values for the compound"}
{"text_id": "9684", "text": "docstring: Returns a User object made from the first result from get_pv_fest_ids().\nUsually, students are enrolled in only one course, which means that\nget_pv_fest_ids() tends to be a tuple with a single int."}
{"text_id": "9685", "text": "docstring: Check that value for resourceid is valid i.e. a string."}
{"text_id": "9686", "text": "docstring: Generates a flexible 2D histogram of central wavelength and\ndispersion, where the wavelength grid spacing depends on the\ndispersion, so that each wavelength bin width roughly corresponds\nto the sample dispersion, scaled by a factor.\n\nParameters\n\nwaves : ndarray\narray of central wavelengths (A). Must be the same size as disps.\ndisps : ndarray\nlogarithmic array of dispersions (A/pix). Must be the same size as waves.\ndispbin : ndarray\nbin widths for the dispersion dimension\nwavebin : two-element list\nminimum and maximum wavelength of the histogram bins\nscale : float\nScale the sampling of the wavelength bin .\n\nReturns\n\nhist_wd : ndarray\nAn array of bin counts\ncent_w : ndarray\nThe value of the wavelength at the centre of each bin\ncent_d : ndarray\nThe value of the dispersion at the centre of each bin"}
{"text_id": "9687", "text": "docstring: View used when the Co-Branded UI returns.\nThis view verifies that the CBUI returned successfully and\nuses the provided authorization to initiate a Pay request."}
{"text_id": "9688", "text": "docstring: Multiplies all the axes uniformly by the given amount"}
{"text_id": "9689", "text": "docstring: Add taxon info to metadata."}
{"text_id": "9690", "text": "docstring: Callback function for finishing loading."}
{"text_id": "9691", "text": "docstring: Create or update IoT sensor."}
{"text_id": "9692", "text": "docstring: @param list : a list of strings, extracted from the data flow analysis\n@rtype : a boolean, True if there's at least 1 non-register number value, Else False"}
{"text_id": "9693", "text": "docstring: > QPixmap\nWidget special grabbing function"}
{"text_id": "9694", "text": "docstring: Returns the focal length of the camera.\nParameters :\nW      : sensor width\ntheta  : field of view"}
{"text_id": "9695", "text": "docstring: Compute the path to the various tools."}
{"text_id": "9696", "text": "docstring: Set up binary sensor(s) for KNX platform."}
{"text_id": "9697", "text": "docstring: Return columns of family row."}
{"text_id": "9698", "text": "docstring: Return a generator of containers."}
{"text_id": "9699", "text": "docstring: Function to conduct zero or normal-value occlusion. Zero occlusion means\nreplacing the feature with zeroes. Given the best model for the IHM task,\nthis would imply that the final model would mask out the zero-values.\n\nNormal-occlusion refers to replacing the feature of interest with the\n\"normal\" or \"healthy\" values present in 'dicretizer_config.json'. For\ndiscrete features, this would equate to a one-hot encoding of the \"normal\"\ncategorical feature. For continuous features, this would equate to replacing\nthe value with the normalized \"normal\" value.\n\n\n\n"}
{"text_id": "9700", "text": "docstring: A mapping of every game object's ID to the actual game object. Primarily used by the server and client to easily refer to the game objects via ID."}
{"text_id": "9701", "text": "docstring: handle a request to the function"}
{"text_id": "9702", "text": "docstring: Transform MPASSI timeMonthly_avg_iceAreaCell and\ntimeMonthly_avg_iceVolumeCell into CMIP.simass\n\nParameters\n\ninfiles : dict\na dictionary with namelist, mesh and time series file names\n\ntables : str\npath to CMOR tables\n\nuser_input_path : str\npath to user input json file\n\nReturns\n\nvarname : str\nthe name of the processed variable after processing is complete"}
{"text_id": "9703", "text": "docstring: Shape of a single sample from a single event index as a 1-D `Tensor`.\nThe batch dimensions are indexes into independent, non-identical\nparameterizations of this distribution."}
{"text_id": "9704", "text": "docstring: Get the path to the SoftHSM PKCS#11 module.\nReturn SOFTHSM_LIB if set, otherwise search a list of directories\nfor libsofthsm2.so."}
{"text_id": "9705", "text": "docstring: Helper script to generate the xselect commands to extract events from\na given sky region."}
{"text_id": "9706", "text": "docstring: This method handles any behaviors that must occur when a SID leaves the\nuniverse of the TradingAlgorithm.\n\nParameters\nsid : int\nThe sid of the Asset being removed from the universe."}
{"text_id": "9707", "text": "docstring: Returns serializable input data.\nParameters\n\n\n\nReturns\n\nDict\nA dictionary containing serialized input data and original data type\ninformation.\n\nRaises\n\nTypeError\nif provided data type is not supported."}
{"text_id": "9708", "text": "docstring: set a network device in the UP state"}
{"text_id": "9709", "text": "docstring: Check if the selected bucket contains expected ecosystem objects."}
{"text_id": "9710", "text": "docstring: Binary search through object list of servers, and return the index or object for the server depending on the calltype (1 = object, 0 = index)"}
{"text_id": "9711", "text": "docstring: Solve single equation with best effort: `A X = rhs`.\nThe returned `Tensor` will be close to an exact solution if `A` is well\nconditioned. Otherwise closeness will vary. See class docstring for details."}
{"text_id": "9712", "text": "docstring: ensures all instances of CR, LF and CRLF end up as the specified one"}
{"text_id": "9713", "text": "docstring: Set the mode of this module and all descendent modules to `train`."}
{"text_id": "9714", "text": "docstring: Used for the reified pg_connection property on weasyl requests."}
{"text_id": "9715", "text": "docstring: list, categorical field list that will be transformed with TF feature column\nvocab_dir: string, the path where the vocabulary text files are located\nreturn:\noutput_tf_list: list of TF feature columns"}
{"text_id": "9716", "text": "docstring: Migrate service and return counter."}
{"text_id": "9717", "text": "docstring: Yields the previously found file path and its changed lines."}
{"text_id": "9718", "text": "docstring: Performs the Men&Mice Login operation using the connection information\nand the zeep client that is initialized with the WSDL from the server."}
{"text_id": "9719", "text": "docstring: Returns True if a user has permission to execute the given command"}
{"text_id": "9720", "text": "docstring: Returns the string representing the declaration of columns\nin a sqlite3 table declaration which includes.\ncolumn name\ncolumn type (sqlite3)\nprimary key\n\nEx."}
{"text_id": "9721", "text": "docstring: Initialize a ResourceLimits object from a json dictionary."}
{"text_id": "9722", "text": "docstring: returns the enum representing the type of content parsed"}
{"text_id": "9723", "text": "docstring: Add public key of a host in chat to the dictionary"}
{"text_id": "9724", "text": "docstring: Calculates log returns for EMA and closing price to make data stationary."}
{"text_id": "9725", "text": "docstring: Handle updates to the locals scope using a tracing function"}
{"text_id": "9726", "text": "docstring: Format a date string to a presentable format."}
{"text_id": "9727", "text": "docstring: Has the same functionality as copy, except that will work on files\nover 5 TB, as well as when copying between locations and/or storage\nclasses.\n\ndestination_object can be omitted, in which case source_object is used."}
{"text_id": "9728", "text": "docstring: All of our values should be strings. Usually those can be passed in as\nbare words, but if they're parseable as an int or float we need to quote\nthem."}
{"text_id": "9729", "text": "docstring: Remove an LV2 plugin instance (and also the jack client)"}
{"text_id": "9730", "text": "docstring: The author's profile background image url.\nReturns"}
{"text_id": "9731", "text": "docstring: Remove an op from the list of ops that need to run before this op."}
{"text_id": "9732", "text": "docstring: This function will return a dictionary of the instance tags.\nThe main desire to have this inside of a filter_plugin is that we\nneed to build the following key.\n\n"}
{"text_id": "9733", "text": "docstring: fix alphabet and other problems in FASTA file"}
{"text_id": "9734", "text": "docstring: Return whether a user can change this group, including the effect of resource flags."}
{"text_id": "9735", "text": "docstring: Use RFE to estimate parameter importance based on model"}
{"text_id": "9736", "text": "docstring: Draws a number in a given slot with an animation.\nstdscr: curses window object\nnb: integer representing number to display\noffset: integer representing the slot's position"}
{"text_id": "9737", "text": "docstring: Deletes an existing namespace. This operation also removes all associated resources under the\nnamespace."}
{"text_id": "9738", "text": "docstring: Mark all relationships as clean (not dirty)."}
{"text_id": "9739", "text": "docstring: Conducts a Bayesian hyperparameter optimization, given the parameter ranges and selected model"}
{"text_id": "9740", "text": "docstring: Unsigned greater than or equal to."}
{"text_id": "9741", "text": "docstring: Validate a dictionary with global configuration."}
{"text_id": "9742", "text": "docstring: Called by the transport when some data is received."}
{"text_id": "9743", "text": "docstring: Called to indicate the occurrence of a link between two tokens.\nNote that this will not be called until handle_token() has been\ncalled for both the source and sink."}
{"text_id": "9744", "text": "docstring: Positive Connected Components\nYeilds:\nlist: list of aids indicating all annotations currently predicted\nto be some specific individual / category.\n\nlist : list of aids : Current prediction of individuals."}
{"text_id": "9745", "text": "docstring: Find a zone by its name or ID"}
{"text_id": "9746", "text": "docstring: Defines the dot product on two Array objects."}
{"text_id": "9747", "text": "docstring: Applies a transformation to an image according to given parameters."}
{"text_id": "9748", "text": "docstring: columna : ID tipo valortipo zonahoraria atributocolumn\n| PRIMARY KEY PAR_A lnombres PAR_C\n| FOREIGN KEY PAR_A lnombres PAR_C REFERENCES ID PAR_A lnombres PAR_C"}
{"text_id": "9749", "text": "docstring: Checks if the first range is included in the second range"}
{"text_id": "9750", "text": "docstring: Create a copy of this Datasets object"}
{"text_id": "9751", "text": "docstring: Overall check exit code according to the Nagios API.\nCorresponds with :attr:`state`. Read-only property."}
{"text_id": "9752", "text": "docstring: splitLines(s, buffer) -> lines, buffer\nAppend s to buffer and find any new lines of text in the\nstring splitting at the standard IRC delimiter CRLF. Any\nnew lines found, return them as a list and the remaining\nbuffer for further processing."}
{"text_id": "9753", "text": "docstring: Read messages from device until reply for the last command is received"}
{"text_id": "9754", "text": "docstring: Returns a fully-qualified instance_config resource name string."}
{"text_id": "9755", "text": "docstring: Return a fixture.\nParameter ``includes`` specifies objects to include in the response. Maximum level of includes allowed is 10."}
{"text_id": "9756", "text": "docstring: \n\nreturn (clauses : list)\n\nGenerates a list of random clauses with a maximum number of num_clauses.\nEach clause will contain at least min_lits and at most max_lits. Further\nthe number of existential variables in a clause depends on the specified\nratio. Forall reduction is also applied by default if --no-reduce is not\nenabled. The clauses will also be sorted if _sort_literals is enabled.\n\nReturns the list of generated clauses."}
{"text_id": "9757", "text": "docstring: Converts a url into a made-up module name by doing the following:\nExtract just the path name ignoring querystrings\nTrimming off the initial\nTrimming off the file extension\nRemoves off useless folder prefixes\n\n"}
{"text_id": "9758", "text": "docstring: Command line application for quickly creating documents in Google Drive."}
{"text_id": "9759", "text": "docstring: Checks that the blog post tags passes validation."}
{"text_id": "9760", "text": "docstring: Initiates a call to a specified endpoint with specified parameters."}
{"text_id": "9761", "text": "docstring: internal function to dissociate a definition from the library"}
{"text_id": "9762", "text": "docstring: returns the first Sunday of a growing season, which is the first Sunday\nafter the first Wednesday in March"}
{"text_id": "9763", "text": "docstring: wait for htcondor to be running\nArgs:\nmax_timeout: max time to wait\n\nboolean, true for success\n\nRuntimeError if the daemon is not up before the timeout"}
{"text_id": "9764", "text": "docstring: Create a subscription in pub/sub."}
{"text_id": "9765", "text": "docstring: start thread which tries to login as non existing user\nusing sql injection to recieve false JSON Web Token"}
{"text_id": "9766", "text": "docstring: Generate a function to download a file based on given parameters\nThis works by currying the above given arguments into a closure\nin the form of the following function."}
{"text_id": "9767", "text": "docstring: Frequency response of lift coefficient according Theodorsen's theory.\nThe output is a 3 elements array containing the CL frequency response w.r.t.\nto pitch, plunge and flap motion, respectively. Sign conventions are as\nfollows.\n\npositive when moving upward\n\nposition of axis of rotation in percentage of chord (measured\nfrom LE)\n\nposition of flap axis of rotation in percentage of chord\n(measured from LE)\n\nthis function uses different input/output w.r.t."}
{"text_id": "9768", "text": "docstring: A list of the egress Nat Rule Ids."}
{"text_id": "9769", "text": "docstring: Match the step defined by the regular expression pattern."}
{"text_id": "9770", "text": "docstring: Downgrade the database to the previous revision"}
{"text_id": "9771", "text": "docstring: This function is essential for pages that have multiple amplitude events that can trigger reruns.\nIf your page does more than logging at loading, it should add this to the end of the page so that\nwhen we load the entire page we can make sure to make throw the current values into the old values object\nand begin a new one. This means effectively updating our manager saying that the entire page loaded sucessfully\nand that now we should look into the future."}
{"text_id": "9772", "text": "docstring: Return the datetime as a string."}
{"text_id": "9773", "text": "docstring: Load a previously selected choice to the `TextCtrl` on dismiss."}
{"text_id": "9774", "text": "docstring: checks include:\nusing hartree to get info to check for:\nthe correct number of imaginary freq\nthe stoichiometry adds up\nsame implicit solvent (or lack thereof)\nsame functional and basis set\nawk for same versions of Gaussian\nmade GoodVibes checks optional to save run time"}
{"text_id": "9775", "text": "docstring: Returns an object from the Ephemeris."}
{"text_id": "9776", "text": "docstring: Print the result of the of the punch in"}
{"text_id": "9777", "text": "docstring: sphere is an objective function used to test\noptimization algorithms."}
{"text_id": "9778", "text": "docstring: Computes ASTRA FBP reconstruction for a given GPU projector type"}
{"text_id": "9779", "text": "docstring: This is for low-level components that deal directly with\nthe event loop to to schedule a coroutine. We\ntrack them so we can either wait for or cancel them when stop()\nis called."}
{"text_id": "9780", "text": "docstring: Read and return the entire body from an incoming ASGI message."}
{"text_id": "9781", "text": "docstring: Called after each iteration of the optimizer.\nParameters\n\ntransformation : ndarray of shape (n_components * n_features,)\nThe solution computed by the optimizer in this iteration."}
{"text_id": "9782", "text": "docstring: Encode various settings in puppet.conf and setup Nextdoor external Facts."}
{"text_id": "9783", "text": "docstring: Returns boolean whether inputted string contain matching angular brackets."}
{"text_id": "9784", "text": "docstring: If this view is directly presented, the top bar will show this view's title."}
{"text_id": "9785", "text": "docstring: Return a dict of readable parameters of the current settings"}
{"text_id": "9786", "text": "docstring: Usage Handler\nRetrieve just the usage string for a command."}
{"text_id": "9787", "text": "docstring: Silence a subscription so that the user is never notified in any way about\nnew comments on an entry"}
{"text_id": "9788", "text": "docstring: If the source file exists on the system, rename it to the named file. The\nnamed file will not be overwritten if it already exists unless the force\noption is set to True.\n\nname\nThe location of the file to rename to\n\nsource\nThe location of the file to move to the location specified with name\n\nforce\nIf the target location is present then the file will not be moved,\nspecify \"force: True\" to overwrite the target file\n\nmakedirs\nIf the target subdirectories don't exist create them"}
{"text_id": "9789", "text": "docstring: Create the project directory if necessary\nParameters\n\nstr\nproject name\n\nReturns\n\nstr\n/\n\nRaises\n\nException\nif the name already exists as a file instead of a directory"}
{"text_id": "9790", "text": "docstring: Join layer strings into one multi-component layer string."}
{"text_id": "9791", "text": "docstring: Apply moving average algorithm to the elevation of a given segment"}
{"text_id": "9792", "text": "docstring: Given that all Roles are in sorted order of priority, greedily assign the highest-priority Role to the lowest-cost robot for that Role.\nInstantiate Tactics with the correct robots post-assignment. (Note that this behavior is largely handled by the init_roles() of each Tactic.)\nSatisfy constraint that all Roles of a Tactic must all be assigned at once.\nIf a Tactic's Roles cannot all be filled, none will be filled and a debug message signifying error is displayed along with the tactic's tick not running.\""}
{"text_id": "9793", "text": "docstring: returns a python function of a Tensorflow compiled graph as a callable\nnote\nThis returns the entire graph as a function that terminates on\nthis layer. If you want the function for this layer alone just\nget the `tf.function(layer.compute)`\n\n\n\nfn (`Callable`): either a Tensorflow static graph or a python callable function."}
{"text_id": "9794", "text": "docstring: This function extracts the kpoint labels and index locations for a regular\nband structure calculation (non HSE)."}
{"text_id": "9795", "text": "docstring: Create params that are defined in the Java obj but not here"}
{"text_id": "9796", "text": "docstring: GetLineRaw(self, int line) -> wxCharBuffer\nRetrieve the contents of a line.  The returned value is a utf-8\nencoded string in unicode builds of wxPython, or raw 8-bit text\notherwise."}
{"text_id": "9797", "text": "docstring: Find the dot product of the two vectors."}
{"text_id": "9798", "text": "docstring: Add a new Physics Object to the environment\nParameters\n\nnew_obj\nObject to add to environment"}
{"text_id": "9799", "text": "docstring: Pitch Bend Change MIDI message."}
{"text_id": "9800", "text": "docstring: Return an n-qubit projector for a given prepration."}
{"text_id": "9801", "text": "docstring: Extract leftmost int number found in given text."}
{"text_id": "9802", "text": "docstring: Pops up an error message box displaying the given text."}
{"text_id": "9803", "text": "docstring: Delete the characters under the cursor until the end of the line."}
{"text_id": "9804", "text": "docstring: Returns a set of versions which don't need to bee re-converted."}
{"text_id": "9805", "text": "docstring: Sets the initial state of the device."}
{"text_id": "9806", "text": "docstring: Run handlers for commands, wrapping messages in a `Command` object\nbefore passing them to the handler. Handlers are executed by a\nThreadPoolExecutor."}
{"text_id": "9807", "text": "docstring: Runs a method from the global onc object\noptionally allows for a second nameless parameter"}
{"text_id": "9808", "text": "docstring: Initialize the primal variables to the mid-point of the box constraints (halfway through each\nvariable's lower and upper bounds)."}
{"text_id": "9809", "text": "docstring: Return the proper runtime based on scala version."}
{"text_id": "9810", "text": "docstring: Adds order to the order list if there is an available vehicle."}
{"text_id": "9811", "text": "docstring: Extracts the list of files passed into the test case."}
{"text_id": "9812", "text": "docstring: Convenient method to create an apply node.\nRaise `KeyError` or `ValueError` if an error occurs"}
{"text_id": "9813", "text": "docstring: Given a target directory and an existing manifest, run a hashdeep audit.\n> chdir into the target, audit the relative paths, and get out.\nUpdated version creates a bagit-style tree that contains the package,\nalong with the existing manifest.\nsame idea as above: read manifest from blob in db and write the audit file\nas a new blob."}
{"text_id": "9814", "text": "docstring: The security group for the worker node group to communicate with the cluster.\nThis security group requires specific inbound and outbound rules.\n\n\n\nThe `nodeSecurityGroup` option and the cluster option`nodeSecurityGroupTags` are mutually exclusive."}
{"text_id": "9815", "text": "docstring: Update personal user password (require previous password)."}
{"text_id": "9816", "text": "docstring: Check if Time Sheets are completed against before manufacturing to capture operating costs."}
{"text_id": "9817", "text": "docstring: Extracts bytesarray to get mvhd header"}
{"text_id": "9818", "text": "docstring: Check if we should continue decode logic\nThis is meant to be used in a while loop in the decoding phase to let\nthe decoder know that there is still data in the buffer."}
{"text_id": "9819", "text": "docstring: Calculates the proportions of the data missing and data observed.\nMethod calculates two arrays:\n`poms`: Proportion of missing data.\n`pobs`: Proportion of observed data."}
{"text_id": "9820", "text": "docstring: Converts a single `InputExample` into a single `InputFeatures`."}
{"text_id": "9821", "text": "docstring: Finds the n_queries best and worst queries, according to the CPU time in the dataset."}
{"text_id": "9822", "text": "docstring: Load state from cookie to the context"}
{"text_id": "9823", "text": "docstring: Take a slice of dataframe where col matches any of the values (list).\nIf matches is False, the rows that match values are not included and those that do not are.\nIt turns the function into an \"all except these\" where."}
{"text_id": "9824", "text": "docstring: Similar to __delitem__, but only deletes from local db.  Does not delete from kafka"}
{"text_id": "9825", "text": "docstring: Adds a bias column to a given input sample array"}
{"text_id": "9826", "text": "docstring: \"Hardware\" pause on EBB control board"}
{"text_id": "9827", "text": "docstring: calculate the lower bound of the region mutual information."}
{"text_id": "9828", "text": "docstring: Gets a channel object from a provided device identifier."}
{"text_id": "9829", "text": "docstring: Replaces all the bound reference names in `comp` with unique names.\nNotice that `uniquify_reference_names` simply leaves alone any reference\nwhich is unbound under `comp`."}
{"text_id": "9830", "text": "docstring: DPMaximum Component\nReturns differentially private estimates of the maximum elements of each column of the data."}
{"text_id": "9831", "text": "docstring: checks whether goal is reached by comparing goal to current location. (used in GUI)"}
{"text_id": "9832", "text": "docstring: Update progress metrics which consist of last reset step and time used\nfor calculation of fps, and update mean and best rewards. The model is\nsaved if there is a checkpoint path specified."}
{"text_id": "9833", "text": "docstring: This is the setter method."}
{"text_id": "9834", "text": "docstring: Turn the device off (Return Robot to base)."}
{"text_id": "9835", "text": "docstring: Returns True is module has any ports (this includes\nsuperclasses).  This method exists to make automatic abstract\nmodule detection efficient."}
{"text_id": "9836", "text": "docstring: Helper function to retrieve the current options for this\nfilter widget"}
{"text_id": "9837", "text": "docstring: \n\nto call third party WSGI applications"}
{"text_id": "9838", "text": "docstring: Deletes any resources used by tests."}
{"text_id": "9839", "text": "docstring: If the class is not stopping, publish a message to RabbitMQ,\nappending a list of deliveries with the message number that was sent.\nThis list will be used to check for delivery confirmations in the\non_delivery_confirmations method.\n\nOnce the message has been sent, schedule another message to be sent.\nThe main reason I put scheduling in was just so you can get a good idea\nof how the process is flowing by slowing down and speeding up the\ndelivery intervals by changing the _PUBLISH_INTERVAL constant in the\nclass."}
{"text_id": "9840", "text": "docstring: When the user presses enter, print the jobs that are currently being executed"}
{"text_id": "9841", "text": "docstring: Authenticate a request.\nRequired by starlette authentication middleware"}
{"text_id": "9842", "text": "docstring: Writes the message for the supplied devices to\nIf Apple throw exception during the push,\nCall Apple Feedback Service and retry from last sent device.\nthe APN Service SSL socket."}
{"text_id": "9843", "text": "docstring: Ensures that the flows going into the PEM electrolyzer hydrogen production\ncomponent and those going into the PEM electrolyzer waste heat production\ncomponent are equal."}
{"text_id": "9844", "text": "docstring: Run a game of life simulation."}
{"text_id": "9845", "text": "docstring: Home screen for student:\nA student can:\na. View all their test results\nb. Get tested/sign up for a timeslot\nc. View aggregate test results\nd. View daily test results"}
{"text_id": "9846", "text": "docstring: r\"\"\"Computes the output of the residual block"}
{"text_id": "9847", "text": "docstring: Serves the **notes** overview page.\nCorresponds with `Notes` in the menu bar.\n\nThe main part is the tree of note sets.\nThere is also a widget for bulk uploading sets of notes."}
{"text_id": "9848", "text": "docstring: This is the tangent line function at point x."}
{"text_id": "9849", "text": "docstring: Format CSL-JSON to HTML APA format"}
{"text_id": "9850", "text": "docstring: Stop when won enough, lost too much, or game taking too long."}
{"text_id": "9851", "text": "docstring: Update the vision data for a single pirate\nIncrements all the given offsets by delta for the vision\ndata for pirate.owner"}
{"text_id": "9852", "text": "docstring: Write the invoice information to a template xlsx file."}
{"text_id": "9853", "text": "docstring: Find handler and build a command string using passed body query_params."}
{"text_id": "9854", "text": "docstring: Parameters\ninfiles (List): a list of strings of file names for the raw input data\ntables (str): path to CMOR tables\nuser_input_path (str): path to user input json file\nReturns\n\nvar name (str): the name of the processed variable after processing is complete"}
{"text_id": "9855", "text": "docstring: Fill index with recipes. If a recipe already exists it is\nupdated."}
{"text_id": "9856", "text": "docstring: Add more rounds to the crawl.  This command does not start execution."}
{"text_id": "9857", "text": "docstring: Entry point of the program."}
{"text_id": "9858", "text": "docstring: Get a list of users whose privilege was granted by self and can be undone."}
{"text_id": "9859", "text": "docstring: Get each Y data as list"}
{"text_id": "9860", "text": "docstring: Stop the node.\nwait: if True (the default), wait for the Scylla process to be\nreally dead. Otherwise return after having sent the kill signal.\nwait_other_notice: return only when the other live nodes of the\ncluster have marked this node has dead.\ngently: Let Scylla and Scylla JMX clean up and shut down properly.\nOtherwise do a 'kill -9' which shuts down faster."}
{"text_id": "9861", "text": "docstring: Write a log text file that contains the following information: time/date,\ntemplate and list of conformations superimposed. Also print information to\nterminal."}
{"text_id": "9862", "text": "docstring: Replace labels (function declarations) with integer addresses"}
{"text_id": "9863", "text": "docstring: Format worksheets object for outfile."}
{"text_id": "9864", "text": "docstring: Pops `batch_morlist_size` items from the mor objects queue and run asynchronously\nthe _process_mor_objects_queue_async method to fill the Mor cache."}
{"text_id": "9865", "text": "docstring: Completely overrides the QuerySet._fetch_all method by adding the timestamp to all objects"}
{"text_id": "9866", "text": "docstring: Return a json dictionary representing this model."}
{"text_id": "9867", "text": "docstring: Get your account's history"}
{"text_id": "9868", "text": "docstring: find a cyclic path in the given digraph."}
{"text_id": "9869", "text": "docstring: Takes in a list of station objects, returns a list of rivers with at least one station"}
{"text_id": "9870", "text": "docstring: Convert a 2D numpy array to html.\nParameters\n\nm : numpy array\n2D array to convert into HTML.\n\nspecs : dictionary\nDictionary of user-specified and default parameters to formatting\n\nReturns\n\nstring\nhtml string for m."}
{"text_id": "9871", "text": "docstring: Full file directory of mapping output."}
{"text_id": "9872", "text": "docstring: The ID of the Virtual Hub Route Table associated with this Express Route Connection."}
{"text_id": "9873", "text": "docstring: Clustering analysis wrapper which clusters the trace into repeating instructions and presents the results in the Clustering Viewer."}
{"text_id": "9874", "text": "docstring: Fetch the authenticated users home timeline .\nReturns a list of toot dicts."}
{"text_id": "9875", "text": "docstring: swap from reciprocal space back to real space"}
{"text_id": "9876", "text": "docstring: Here, it takes path to embedding text file provided by glove."}
{"text_id": "9877", "text": "docstring: Return URL for given API call query."}
{"text_id": "9878", "text": "docstring: QuadraticBezierCurves is a helper function to create joins of quadratic\nbezier curves.\n\nSame as Lines it accepts points either as positional arguments or a single\niterable."}
{"text_id": "9879", "text": "docstring: Init Azure Blob Lease with existing blob."}
{"text_id": "9880", "text": "docstring: Predict values of a dependent variable using the fitted model."}
{"text_id": "9881", "text": "docstring: Get the metadata for a Z-Wave node."}
{"text_id": "9882", "text": "docstring: Updates the associated PVs when an experiment ID is set."}
{"text_id": "9883", "text": "docstring: Log out the warnings when outputing the file."}
{"text_id": "9884", "text": "docstring: Updates pack_dependencies_data for optional dependencies, excluding the CommonTypes pack.\nThe reason being when releasing a new pack with e.g, incident fields in the CommonTypes pack,\nonly a mandatory dependency will coerce the users to update it to have the necessary content entities.\n\npacks_found_from_incident_fields_or_types (set): pack names found by a dependency to an incident field,\nindicator field or an incident type.\n\npack_dependencies_data (list): representing the dependencies."}
{"text_id": "9885", "text": "docstring: Return whether every element of input tensor is `NaN` or not."}
{"text_id": "9886", "text": "docstring: Handler for user mouse press."}
{"text_id": "9887", "text": "docstring: Updates released quantities on Service Order part lists based on Stock Entry submission."}
{"text_id": "9888", "text": "docstring: An AlComplex compatible hyperbolic arccosine function. It gets the main value.\nParameters\n\nz : Python numeric type or AlComplex\n\nReturns\n\n"}
{"text_id": "9889", "text": "docstring: Will retry up to retry number of times.\nretry = None means use the value of rabbit_max_retries\nretry = -1 means to retry forever\nretry = 0 means no retry\nretry = N means N retries\n\nMust be called within the connection lock"}
{"text_id": "9890", "text": "docstring: Creates a heap from the array A with length n.\nThen it sorts the array A in non-ascending order in-place.\nInputs: A, n\nIt doesn't return A, because it sorts it in-place.\nIts time complexity is O(n log n), but it uses additional space for storing the heap, O(n)."}
{"text_id": "9891", "text": "docstring: Decorator that handles `MissingOrInvalidParametersError`.\nReturn to user notifications that the parameters specified in the\nexception are missing and/or invalid."}
{"text_id": "9892", "text": "docstring: Lists a developer's repositories. Receives an username/login."}
{"text_id": "9893", "text": "docstring: Returns a new CircuitPlaquette with any aliases expanded.\nAliases are expanded  within the circuits of this\nplaquette.  Optionally keeps only those strings which, after\nalias expansion, are in `ds_filter`.\n\nParameters\n\nds_filter : DataSet, optional\nIf not None, keep only strings that are in this data set.\n\nReturns\n\n"}
{"text_id": "9894", "text": "docstring: Check the sensor to see if new data is available"}
{"text_id": "9895", "text": "docstring: \n\nserial.serial_for_url will call that factory function with None as the\nport parameter (the first), and after creating the instance will assign\nthe url to the port property of the instance."}
{"text_id": "9896", "text": "docstring: Block until the server is live"}
{"text_id": "9897", "text": "docstring: Read, Modify, or Delete an access control policy.  # noqa: E501\nThis method makes a synchronous HTTP request by default.\n\n:param async_req bool\n:param str name: The name of the policy."}
{"text_id": "9898", "text": "docstring: Creates decoder from params and computes metrics with random inputs."}
{"text_id": "9899", "text": "docstring: Return list of all ecosystems from selected bucket."}
{"text_id": "9900", "text": "docstring: Saves the snapshot information\nfor mesh as is and any keyed animation"}
{"text_id": "9901", "text": "docstring: Load models from given module."}
{"text_id": "9902", "text": "docstring: When a new entry was found increase the entry counter for the current\ninvoice."}
{"text_id": "9903", "text": "docstring: register function to create a new user in the database\nwhen a user signs up for the first time"}
{"text_id": "9904", "text": "docstring: Load field information (tsv derived from the database definitions)"}
{"text_id": "9905", "text": "docstring: Raise a translation error.\nlines is a list of strings describing what went wrong.\nA TranslationError with that message will be raised.\n\nIf xml is given, it should be an element, which will be\npretty-printed and included in the error."}
{"text_id": "9906", "text": "docstring: Total counts per time, if this is constant over times and circuits.\nWhen that doesn't hold, an error is raised.\n\nReturns\n\nfloat or int"}
{"text_id": "9907", "text": "docstring: Initialize auth if necessary, fake-auth as a user, return cookie."}
{"text_id": "9908", "text": "docstring: The minimum allowed advertising interval, in millseconds.\nThis is defined by the Bluetooth specification."}
{"text_id": "9909", "text": "docstring: The accumulated torque is the cumulative sum of the average torque measured every update event count.\nThe accumulated torque field is 2 bytes. The resolution of power measurement changes with speed, but stays\nbelow the 1-watt level for the most useful speed range. The amount of time required to reach the rollover\nvalue of the accumulated torque field (2048Nm) varies with power output."}
{"text_id": "9910", "text": "docstring: Add animals to the world."}
{"text_id": "9911", "text": "docstring: Return a JSON-serializable dictionary representation of this resource graph."}
{"text_id": "9912", "text": "docstring: Connect the socket to the 'address' (which can be 32bit packed IP or\na hostname string). 'conntype' is an extra that may indicate SSL or not,\ndepending on the underlying interface"}
{"text_id": "9913", "text": "docstring: Ensure the user's public SSH key is known by the Account Service."}
{"text_id": "9914", "text": "docstring: Ensure that acess to a particular volume is revoked."}
{"text_id": "9915", "text": "docstring: Redraw the matplotlib artists that represent the flight track\n(path patch, line and waypoint scatter).\n\nIf waypoint vertices are specified, they will be applied to the\ngraphics output. Otherwise the vertex array obtained from the path\npatch will be used."}
{"text_id": "9916", "text": "docstring: Fetch data about droplet - use this instead of get_data()"}
{"text_id": "9917", "text": "docstring: Check if label of  predicted by  matches with "}
{"text_id": "9918", "text": "docstring: Create the root folders of the project (*inputs, ouputs and metadata*)"}
{"text_id": "9919", "text": "docstring: Initialize a TransitConnection object from a json dictionary."}
{"text_id": "9920", "text": "docstring: Opens the BMRB webpage for an entry in the user's default browser."}
{"text_id": "9921", "text": "docstring: Translates the given source program to regular Python code, and returns the translated code, as well as the\ncode of the auxiliary `__match__` module."}
{"text_id": "9922", "text": "docstring: Sets up an alias for the field. Note that this alias does not behave entirely\nlike the original field - you cannot access this field as a document attribute,\nbut you can use it in queries etc."}
{"text_id": "9923", "text": "docstring: Initiate the commit operation to the connected ledger."}
{"text_id": "9924", "text": "docstring: Shut down the SNS queue for this task."}
{"text_id": "9925", "text": "docstring: Our name as a string. Throws if is_tuple (no reasonable name)."}
{"text_id": "9926", "text": "docstring: Takes a list of lines to be committed to a user's crontab and writes it"}
{"text_id": "9927", "text": "docstring: Given the value of the code parameter, request an access token."}
{"text_id": "9928", "text": "docstring: Simple tokenizer by a separator.\nGiven a string and a separator, returns a list of strings\nseparated by the separator\n\nThe text to be split\nsep: The separator, if None or '' are passed,\nthe string will be separated by characters\n\nList of splitted text"}
{"text_id": "9929", "text": "docstring: Flip ZND quantities.\nThe purpose is to have detonation moving from left to right,\nwhile during integration of the ZND solution we assume that\ndetonation moves from right to left."}
{"text_id": "9930", "text": "docstring: Draws header information that will be the same for every page of a\ngiven incident report."}
{"text_id": "9931", "text": "docstring: Updates a certificate chain entry in the cache."}
{"text_id": "9932", "text": "docstring: Migrate an Azure Cosmos DB MongoDB database from manual throughput to autoscale."}
{"text_id": "9933", "text": "docstring: The total number of tests with errors"}
{"text_id": "9934", "text": "docstring: Returns a numpy array of RGB values and it's respective pixel indices"}
{"text_id": "9935", "text": "docstring: Returns a bootstraped sample of the time-series \"data\" of length \"sampleLength.\nThe algorithm used is stationary bootstrap from 1994 Politis & Romano.\n\ndata ... ndarray array. A single vector of numbers containing the time-series.\nm    ... floating number. Parameter to stationary bootstrap indicating the average length of each block in the sample.\nsampleLength ... integer. Length of the bootstrapped sample returned as output.\n\nsample ... ndarray array containing the final bootstraped sample.\n\n\n\nOriginal paper about stationary bootstrap:\nDimitris N. Politis & Joseph P.\n\nImplemented by Gregor Fabjan from Qnity Consultants on 12/11/2021."}
{"text_id": "9936", "text": "docstring: Insert data into the redis queue.\n:param list data:     The list of data to be stored in the queue\n:return               This operation does not return anything except when the data\nis no list or the number of element is not equal to 4."}
{"text_id": "9937", "text": "docstring: Run linear programming inverse reinforcement learning on the gridworld MDP.\nPlots the reward function.\n\nGrid size. int.\ndiscount: MDP discount factor. float."}
{"text_id": "9938", "text": "docstring: Calculate the 4x4 Wilson loops for a batch of lattices."}
{"text_id": "9939", "text": "docstring: This transformation was taken from the cpp Antares Simulator"}
{"text_id": "9940", "text": "docstring: Selects the node that will be used for scheduling. At this point we've already made sure the node is adequate\nto service each type of resource. There are many ways to select which node we're using, but in general, we want\nto try to pack the pod into a node as tightly as possible, meaning with the fewest leftover resources. Since we\nhave many types of resources, there can be competing objectives."}
{"text_id": "9941", "text": "docstring: Starting point when module is the main routine."}
{"text_id": "9942", "text": "docstring: Check whether a redis cache is alive by pinging it."}
{"text_id": "9943", "text": "docstring: Called when the widget is being redrawn"}
{"text_id": "9944", "text": "docstring: Return the next sentence to send after a given point."}
{"text_id": "9945", "text": "docstring: This method reverses the StridedInterval object for real. Do expect loss of precision for most cases!"}
{"text_id": "9946", "text": "docstring: plots square grid and flow density"}
{"text_id": "9947", "text": "docstring: Command entry point for signurl command."}
{"text_id": "9948", "text": "docstring: Pretty-printing for debugging purposes."}
{"text_id": "9949", "text": "docstring: Add a new rpath entry to a file while preserving as many existing\nrpath entries as possible.\n\nIn order to preserve an rpath entry it must.\n\n1) Point to a location within wheel_base_dir.\n2) Not be a duplicate of an already-existing rpath entry."}
{"text_id": "9950", "text": "docstring: method to read a csv file and return an iterable object"}
{"text_id": "9951", "text": "docstring: Method require by RAVEN to run this as an external model.\n@ In, self, object, object to store members on\n@ In, Input, dict, dictionary containing inputs from RAVEN\n@ Out, None"}
{"text_id": "9952", "text": "docstring: This is the alternative method for optimising the model's parameters when input\ndata must be batched into memory. Must be called before imputation can be\nperformed. The model will then be saved to the specified directory\n\nFunction which yields a pre-processed and scaled DataFrame\nfrom the designated source, be it a server or large flat file.\n\nInteger. The number of epochs the model will run for\n\nBoolean. Prints out messages, including loss\n\nInteger. This number determines the interval between\nmessages.\n\nBoolean. Used for troubleshooting, this argument will cause the\ncost of each batch to be printed to the terminal.\n\nSelf. Model is automatically saved upon reaching specified number of epochs"}
{"text_id": "9953", "text": "docstring: This function calculates a dimensionless measure of the output tracer\nconcentration from a spike input to reactor with advection and dispersion.\nParameters\n\nt : float (array)\ntime made dimensionless by dividing by the reactor residence time.\nt can be a single value or a numpy array.\n\nPe : float\nThe ratio of advection to dispersion\n((mean fluid velocity)/(Dispersion*flow path length))\n\nReturns\n\nfloat\ndimensionless measure of the output tracer concentration\n(Concentration * volume of reactor) / (mass of tracer)\n\nExamples\n\n"}
{"text_id": "9954", "text": "docstring: Return a grayscale image with black characters on a white background.\narguments:\nstring - this string will be converted to an image\nif string has \"\\n\" token in it, interpret it as a newline\nfont_path - path to a font file (for example impact.ttf)\nif font path is provided, it might work in three ways\n1) path completely defines location of a font\n2) just a file name works for a font in the current working directory\n3) just a file name works for a font somewhere in the system path\n4) on windows, PILLOW may search the windows fonts directory.\non linux, it does not as of 2015-August"}
{"text_id": "9955", "text": "docstring: make a color array using the specified colormap for n_parts classes\nParameters\n\nint\nhow many classes there are in the mask\ncmap:\nmatplotlib colormap handle\n\nReturns\n\nndarray\nan array with shape [n_parts, 3] representing colors in the range [0, 1]."}
{"text_id": "9956", "text": "docstring: Update the adjusted run time. Should only be called from _bucket_update and _force_mode_toggled event handlers."}
{"text_id": "9957", "text": "docstring: Return a json dictionary representing this model."}
{"text_id": "9958", "text": "docstring: read any events from the Trellis hardware and call associated\ncallbacks"}
{"text_id": "9959", "text": "docstring: Step function for the environment."}
{"text_id": "9960", "text": "docstring: Configure salt-master and salt-api service"}
{"text_id": "9961", "text": "docstring: Resolve a field type into the name of the referenced table,\nthe referenced key and the reference type (M:1 or M:N)"}
{"text_id": "9962", "text": "docstring: Check if CompCert is unhappy about something."}
{"text_id": "9963", "text": "docstring: Parse edge pool opts per AZ and returns result."}
{"text_id": "9964", "text": "docstring: Bind the device with a location."}
{"text_id": "9965", "text": "docstring: Sets teh message generated by the thread, received via signal to the\ntext-box of the panel"}
{"text_id": "9966", "text": "docstring: Returns serializable input data.\nParameters\n\n\n\nReturns\n\nDict\nA dictionary containing serialized input data and original data type\ninformation.\n\nRaises\n\nTypeError\nif provided data type is not supported."}
{"text_id": "9967", "text": "docstring: Wait for a key press on the console and return it."}
{"text_id": "9968", "text": "docstring: we expect that array_to_fill points to the memory specifically for this processor\n(a subset of the memory for the host when memory is shared)"}
{"text_id": "9969", "text": "docstring: Send confirmation block notifications to all recipients"}
{"text_id": "9970", "text": "docstring: Angular frequency of incident light\nrefractive indices for two media\nangle of incidence (to calculate wavenumbers\nOutputs: Reflection and transmission coefficients for s and p waves."}
{"text_id": "9971", "text": "docstring: Add a row to the dataframe of the validation set info"}
{"text_id": "9972", "text": "docstring: Replace a template variable in current template."}
{"text_id": "9973", "text": "docstring: Creates a slave. Steps:\n1. do a mysqldump and record position\n2. send the dump to the slave agent and let it\nstart the mysql slave"}
{"text_id": "9974", "text": "docstring: Filter out private items in a user dict."}
{"text_id": "9975", "text": "docstring: Decrease indent, and optionally add an extra blank line."}
{"text_id": "9976", "text": "docstring: func\nL Inductance\nC Capacitance\nR Resistance\nZ Impedance\nESR Equivalent Series Resistance\n\nreturns a namedtuple of the results from the meter.\n\n\n\n"}
{"text_id": "9977", "text": "docstring: Copies the content of a file object to an HDFS location."}
{"text_id": "9978", "text": "docstring: Parse a group of fits header values grouped by a keyword prefix."}
{"text_id": "9979", "text": "docstring: Returns InteractionAnswerSummariesMRJobManager class which calculates\ninteraction view statistics."}
{"text_id": "9980", "text": "docstring: Accepts Bathymetry data and initial wave conditions, and returns an image of the water region with quiver plots of refraction."}
{"text_id": "9981", "text": "docstring: Sets the new size of the margin to be used between the border\n(if displayed) and the value bar."}
{"text_id": "9982", "text": "docstring: Expand the node, with the given action."}
{"text_id": "9983", "text": "docstring: Formats an I2C message in an easily readable format."}
{"text_id": "9984", "text": "docstring: Measure the background of a cutout using an elliptical annulus."}
{"text_id": "9985", "text": "docstring: Return list of players with similar name."}
{"text_id": "9986", "text": "docstring: Determine if loss has runaway and we should stop."}
{"text_id": "9987", "text": "docstring: Remove supplied elements from the dict object\nWe use this with a list of binary elements so that we don't store\nempty tags in couchdb when we are already storing the binary data as\nattachments."}
{"text_id": "9988", "text": "docstring: Write in compact form a list of 2d facets\nPARAMETERS\n\ndict\ndict of xarray.dataarrays for the facets\nextra_metadata: dict\nextra_metadata from get_extra_metadata\n\nRETURNS\n\nflatdata : numpy.array\nall the data in vector form"}
{"text_id": "9989", "text": "docstring: Initialize references to other managers and key values from\nconfiguration manager."}
{"text_id": "9990", "text": "docstring: Add model-specific arguments to the parser."}
{"text_id": "9991", "text": "docstring: Test addding to an empty stack"}
{"text_id": "9992", "text": "docstring: Renders a browse/edit view of a certain deck."}
{"text_id": "9993", "text": "docstring: Return an expression of if-then-else trees which expresses a switch tree"}
{"text_id": "9994", "text": "docstring: Return a masked array containing the surface elevation only in wet cells.\nSurface is eta = h+topo, assumed to be output as 4th column of fort.q\nfiles."}
{"text_id": "9995", "text": "docstring: Creates an np.diag array and replaces the provided the specified\nindices of  trialkernel with this array, coef is by default 1 but\nwill be changed for right choice kernels to -1"}
{"text_id": "9996", "text": "docstring: Initialize or connect to a serve cluster.\nIf serve cluster is already initialized, this function will just return.\n\nIf `ray.init` has not been called in this process, it will be called with\nno arguments. To specify kwargs to `ray.init`, it should be called\nseparately before calling `serve.init`."}
{"text_id": "9997", "text": "docstring: Run JSON schema validation against data."}
{"text_id": "9998", "text": "docstring: Returns a set of randomly-generated but uniformly distributed weights.\nSimply producing N randomly-generated weights does not necessarily produce\nuniformly-distributed weights.  To help produce more uniformly-distributed\nweights, this method picks weights from a large collection of randomly\ngenerated weights such that the distances between weights is maximized.\n\nParameters\n\nnobjs : int\nThe number of objectives.\npopulation_size : int\nThe number of weights to generate."}
{"text_id": "9999", "text": "docstring: Process a intermediate node of the tree"}
